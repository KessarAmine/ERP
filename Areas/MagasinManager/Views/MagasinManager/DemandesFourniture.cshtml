@using DevKbfSteel.Models
@using DevExpress.XtraReports.UI;
@using DevKbfSteel.Controllers
@using DevExpress.XtraReports.Parameters;
@using DevKbfSteel.Reports
@using DevExpress.AspNetCore
@using DevExtreme.AspNet.Mvc
@using DevKbfSteel.Helpers;
@using DevKbfSteel.Areas.MagasinManager.Models;

@{
    ViewData["Title"] = "Magasin-Demandes Fournitures";
    Layout = "~/Views/Shared/_LayoutMagasinManager.cshtml";
}
@(Html.DevExtreme().Toolbar()
    .Items(items =>
    {
        items.Add()
           .Widget(w => w
           .Button()
           .Icon("refresh")
           .OnClick("refreshButton_click")
       )
       .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
       .Location(ToolbarItemLocation.Before);

        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("yyyy-MM-dd").ID("FilterDateDebut"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);

        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("yyyy-MM-dd").ID("FilterDateFin"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);

    }
    )
)
@(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.ApproDemandesFourniture>()
 .DataSource(ds => ds.Mvc()
     .Controller("ApproDemandesFournitures")
     .LoadAction("GetFournitureMagasin")
     .Key("NumeroDemande")
     .LoadParams(new { dateDebut = new JS("dateDebutBox_value"), dateFin = new JS("dateFinBox_value")}))
     .ColumnChooser(cc => cc.Enabled(true).AllowSearch(true))
     .Scrolling(scrolling => scrolling
     .ScrollByContent(true)
     .ShowScrollbar(ShowScrollbarMode.Always)
     .Mode(GridScrollingMode.Virtual))
     .Height("95%")
     .RemoteOperations(true)
     .ID("demandesTravailGrid")
     .NoDataText("Aucune donnée à afficher")
     .CacheEnabled(true)
     .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
 .Columns(columns => {

     columns.AddFor(m => m.DateDemande)
     .Format("yyyy-MM-dd HH:mm")
     .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
     columns.AddFor(m => m.CodeServiceDemandeur).Caption("Demandeur").AllowEditing(false).Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("ApproDemandesFournitures").LoadAction("CodeDemandeurLookup").Key("Value"))
    .AllowClearing(true)
    .ValueExpr("Value")
    .DisplayExpr("Text")
    );

     columns.AddFor(m => m.DateBesoin)
     .Format("yyyy-MM-dd HH:mm")
     .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));

     columns.AddFor(m => m.Status).AllowEditing(false).Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("ApproDemandesFournitures").LoadAction("StatusLookup").Key("Value"))
    .AllowClearing(true)
    .ValueExpr("Value")
    .DisplayExpr("Text")
    );
     columns.AddFor(m => m.Obeservations);
        columns.Add()
        .Type(GridCommandColumnType.Buttons)
        .Width(110)
        .Buttons(b => {
        b.Add().Name(GridColumnButtonName.Edit);
        b.Add().Name(GridColumnButtonName.Delete);
        b.Add()
            .Hint("Imprimer")
            .OnClick(@<text>imprimerDemandeFourniture</text>)
            .Icon("print");
        });
})
.MasterDetail(md => md
    .Enabled(true)
    .Template(new TemplateName("DemandeFournitureDetails")))
   .Editing(editing =>
   {
       editing.AllowUpdating(false);
       editing.AllowDeleting(false);
       editing.AllowAdding(false);
   })
.OnRowExpanding("CollpaseAll")
.OnRowExpanded("refreshButton_click")
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
)
@(Html.DevExtreme().Popup()
.ID("Add-popup")
.ShowTitle(true)
.Title("Ajouter une demande fourniture")
.Visible(false)
.DragEnabled(false)
.CloseOnOutsideClick(true)
)
@(Html.DevExtreme().Popup()
.ID("AddArticle-popup")
.ShowTitle(true)
.Title("Ajouter un Article")
.Visible(false)
.DragEnabled(false)
.CloseOnOutsideClick(true)
)
@using (Html.DevExtreme().NamedTemplate("DemandeFournitureDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Articles demandés")
                .Template(new TemplateName("ArticlesDemandesGrid"))
                .Option("ArticlesDemandesGrid", new { id = new JS("data.NumeroDemande") });
            items.Add()
                .Title("Demande Achat")
                .Template(new TemplateName("DemandeAchatGrid"))
                .Option("DemandeAchatGrid", new { id = new JS("data.NumeroDemande") });
            items.Add()
                .Title("Bon d'affectation")
                .Template(new TemplateName("BonAffectationGrid"))
                .Option("BonAffectationGrid", new { id = new JS("data.NumeroDemande") });
            items.Add()
                .Title("Bon de Sortie")
                .Template(new TemplateName("BonSortieGrid"))
                .Option("BonSortieGrid", new { id = new JS("data.NumeroDemande") });
        })
        )
}
@using (Html.DevExtreme().NamedTemplate("ArticlesDemandesGrid"))
{
    @(Html.DevExtreme().DataGrid<ApproFournituresArticlesMagasinModel>()
            .DataSource(ds => ds.Mvc()
            .Controller("ApproDemandesFournitures")
            .LoadAction("GetFournitureArticlesMagasin")
            .LoadParams(new
            {
                id = new JS("ArticlesDemandesGrid.id")
            }
            )
            )
            .RemoteOperations(true)
            .NoDataText("Aucune donnée à afficher")
            .CacheEnabled(true)
            .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
            .Columns(columns => {
                columns.AddFor(m => m.CodeArticle);
                columns.AddFor(m => m.DesignationArticle)
                .EditCellTemplate(@<text> @Html.Partial("DxDropDownBoxArticlesFourniture") </text>);
                columns.AddFor(m => m.CodeUniteMesure).Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("ApproDemandesFournitures").LoadAction("CodeUniteMesureLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
                .AllowClearing(true)
                );
                columns.AddFor(m => m.QteDemande);
                columns.AddFor(m => m.QteValable);
                columns.Add()
                .Type(GridCommandColumnType.Buttons)
                .Width(110)
                .Buttons(b =>
                {
                    b.Add().Name(GridColumnButtonName.Edit);
                    b.Add().Name(GridColumnButtonName.Delete);
                });
            })
    .ColumnChooser(cc => cc
    .Enabled(true)
    .AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(false);
       editing.AllowDeleting(false);
       editing.AllowAdding(false);
       editing.Mode(GridEditMode.Row);
   })
)
}

@using (Html.DevExtreme().NamedTemplate("BonAffectationGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkAffectations>()
            .DataSource(ds => ds.Mvc()
            .Controller("StkAffectations")
            .LoadAction("GetBonAffectationDemandeFourniture")
            .InsertAction("PostBonAffectation")
            .UpdateAction("PutBonAffectation")
            .DeleteAction("DeleteBonAffectation")
            .LoadParams(new
            {
                numDemandeFourniture = new JS("BonAffectationGrid.id")
            }
            )
            .Key("NumBonAffectation")
            )
            .RemoteOperations(true)
            .NoDataText("Aucune donnée à afficher")
            .CacheEnabled(true)
            .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
            .Columns(columns => {
                columns.AddFor(m => m.DateAffectation).Caption("Date Affectation");
                columns.AddFor(m => m.NumBonEntree).Caption("N° Bon d'entrée");
                columns.AddFor(m => m.DateEntree).Caption("Date Entrée");

                columns.AddFor(m => m.CodeIntervenant)
                    .Lookup(lookup => lookup
                    .DataSource(ds => ds.WebApi().Controller("Sorties").LoadAction("IntervenantLookup").Key("Value"))
                    .ValueExpr("Value")
                    .DisplayExpr("Text")
                    .AllowClearing(true));
                columns.AddFor(m => m.ServiceReceveur)
                .Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("StkAffectations").LoadAction("ServiceReceveurLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
                .AllowClearing(true));
                columns.Add()
                    .Type(GridCommandColumnType.Buttons)
                    .Width(110)
                    .Buttons(b => {
                    b.Add().Name(GridColumnButtonName.Edit);
                    b.Add().Name(GridColumnButtonName.Delete);
                    b.Add()
                            .Hint("Imprimer")
                            .OnClick(@<text>imprimerBonAffectation</text>)
                                   .Icon("print");
                    });
            })
    .ColumnChooser(cc => cc
    .Enabled(true)
    .AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .MasterDetail(md => md
    .Enabled(true)
    .Template(new TemplateName("BonAffectationDetails")))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_preparedAffectation")
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(true);
       editing.AllowDeleting(true);
       editing.AllowAdding(true);
       editing.Mode(GridEditMode.Form);
   })
)
}
@using (Html.DevExtreme().NamedTemplate("BonAffectationDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Détails bon d'affectation")
                .Template(new TemplateName("ArticlesBonAffectationGrid"))
                .Option("BonAffectationDetailsGrid", new { id = new JS("data.NumBonAffectation") });
        })
        )
}
@using (Html.DevExtreme().NamedTemplate("ArticlesBonAffectationGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkAffectationsArticles>()
            .DataSource(ds => ds.Mvc()
            .Controller("StkAffectations")
            .InsertAction("PostBonAffectationArticles")
            .UpdateAction("PutBonAffectationArticles")
            .DeleteAction("DeleteBonAffectationArticles")
            .LoadAction("GetBonAffectationDemandeArticles")
            .Key("Id")
            .LoadParams(new
            {
                numBonAffectation = new JS("BonAffectationDetailsGrid.id")
            }
            )
            )
            .RemoteOperations(true)
            .NoDataText("Aucune donnée à afficher")
            .CacheEnabled(true)
            .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
            .Columns(columns => {
                columns.AddFor(m => m.CodePdr)
                .Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("ApproDemandesFournitures").LoadAction("DesignationArticleLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
                .AllowClearing(true)
                )
                .EditCellTemplate(@<text> @Html.Partial("DxDropDownBoxArticlesBonAffectation") </text>);
                columns.AddFor(m => m.Qte);
                columns.Add()
                .Type(GridCommandColumnType.Buttons)
                .Width(110)
                .Buttons(b =>
                {
                    b.Add().Name(GridColumnButtonName.Edit);
                    b.Add().Name(GridColumnButtonName.Delete);
                });
            })
   .ColumnChooser(cc => cc
   .Enabled(true)
   .AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(true);
       editing.AllowDeleting(true);
       editing.AllowAdding(true);
       editing.Mode(GridEditMode.Form);
   })
)
}

@using (Html.DevExtreme().NamedTemplate("DemandeAchatGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.ApproDemandeAchats>()
            .DataSource(ds => ds.Mvc()
            .Controller("ApproDemandeAchats")
            .LoadAction("GetFromFourniture")
            .InsertAction("Post")
            .UpdateAction("Put")
            .DeleteAction("Delete")
            .LoadParams(new
            {
                numDemandeFourniture = new JS("DemandeAchatGrid.id")
            }
            )
            .Key("NumDemandeAchat")
            )
            .RemoteOperations(true)
            .NoDataText("Aucune donnée à afficher")
            .CacheEnabled(true)
            .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
            .Columns(columns => {
                columns.AddFor(m => m.DateDemandeAchat).Caption("Date demande");
                columns.AddFor(m => m.CodeNatureDemandeAchat).Caption("Nature")
                .Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("ApproDemandeAchats").LoadAction("ApproNatureDemandeAchatLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
                .AllowClearing(true));
                columns.AddFor(m => m.MotifDemandeAchat).Caption("Motif");
                columns.AddFor(m => m.StatutDemandeAchat).Caption("Status")
                .Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("ApproDemandeAchats").LoadAction("ApproStatutLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
                .AllowClearing(true));
                columns.Add()
                    .Type(GridCommandColumnType.Buttons)
                    .Width(110)
                    .Buttons(b => {
                    b.Add().Name(GridColumnButtonName.Edit);
                    b.Add().Name(GridColumnButtonName.Delete);
                    b.Add()
                            .Hint("Imprimer")
                                            .OnClick(@<text>imprimerDemandeAchat</text>)
                                   .Icon("print");
                    });
            })
    .ColumnChooser(cc => cc
    .Enabled(true)
    .AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .MasterDetail(md => md
    .Enabled(true)
    .Template(new TemplateName("DemandeAchatDetails")))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_preparedAchat")
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(true);
       editing.AllowDeleting(true);
       editing.AllowAdding(true);
       editing.Mode(GridEditMode.Form);
   })
)
}
@using (Html.DevExtreme().NamedTemplate("DemandeAchatDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Détails demande achat")
                .Template(new TemplateName("ArticlesDemandeAchatGrid"))
                .Option("ArticlesDemandeAchatGrid", new { id = new JS("data.NumDemandeAchat") });
        })
        )
}
@using (Html.DevExtreme().NamedTemplate("ArticlesDemandeAchatGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.ApproArticlesDemandes>()
            .DataSource(ds => ds.Mvc()
            .Controller("ApproDemandeAchats")
            .LoadAction("GetArticles")
            .InsertAction("PostArticles")
            .UpdateAction("PutArticles")
            .DeleteAction("DeleteArticles")
            .LoadParams(new
            {
                id = new JS("ArticlesDemandeAchatGrid.id")
            }
            )
            .Key("Id")
            )
            .RemoteOperations(true)
            .NoDataText("Aucune donnée à afficher")
            .CacheEnabled(true)
            .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
            .Columns(columns => {
                columns.AddFor(m => m.CodeArticle)
                .Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("ApproDemandesFournitures").LoadAction("DesignationArticleLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
                .AllowClearing(true)
                )
                .EditCellTemplate(@<text> @Html.Partial("DxDropDownBoxArticlesFourniture") </text>);
                columns.AddFor(m => m.ArticleNonGere);
                columns.AddFor(m => m.Qte);
                columns.AddFor(m => m.QteValable).AllowEditing(false);
                columns.Add()
                .Type(GridCommandColumnType.Buttons)
                .Width(110)
                .Buttons(b =>
                {
                    b.Add().Name(GridColumnButtonName.Edit);
                    b.Add().Name(GridColumnButtonName.Delete);
                });
            })
   .ColumnChooser(cc => cc
   .Enabled(true)
   .AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(true);
       editing.AllowDeleting(true);
       editing.AllowAdding(true);
       editing.Mode(GridEditMode.Form);
   })
)
}

@using (Html.DevExtreme().NamedTemplate("BonSortieGrid"))
{
@(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkBonSortie>()
.DataSource(ds => ds.Mvc()
.Controller("Sorties")
.LoadAction("GetFromDemandeFourniture")
.InsertAction("Post")
.UpdateAction("Put")
.DeleteAction("Delete")
.LoadParams(new
{
    id = new JS("BonSortieGrid.id")
})
.Key("NumBonSortie")
)
.RemoteOperations(true)
.NoDataText("Aucune donnée à afficher")
.CacheEnabled(true)
.SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
.Columns(columns => {
    columns.AddFor(m => m.DateSortie)
     .Format("yyyy-MM-dd")
     .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
    columns.AddFor(m => m.CodeIntervenant)
    .Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("Sorties").LoadAction("IntervenantLookup").Key("Value"))
    .ValueExpr("Value")
    .DisplayExpr("Text")
    .AllowClearing(true));
    columns.AddFor(m => m.TypeSortie)
    .Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("Sorties").LoadAction("TypeSortieLookup").Key("Value"))
    .ValueExpr("Value")
    .DisplayExpr("Text")
    .AllowClearing(true));

    columns.Add()
    .Type(GridCommandColumnType.Buttons)
    .Width(110)
    .Buttons(b =>
    {
    b.Add().Name(GridColumnButtonName.Edit);
    b.Add().Name(GridColumnButtonName.Delete);
    b.Add()
        .Hint("Imprimer")
        .OnClick(@<text>imprimerBoneSortie</text>)
                .Icon("print");
            });
        })
.ColumnChooser(cc => cc
.Enabled(true)
.AllowSearch(true))
.Height("95%")
.Export(e => e.Enabled(true).AllowExportSelectedData(true))
.FilterRow(f => f.Visible(true))
.HeaderFilter(headerfilter => headerfilter.Visible(true))
.GroupPanel(p => p.Visible(true))
.MasterDetail(md => md
.Enabled(true)
.Template(new TemplateName("BonSortieDetails")))
.AllowColumnReordering(true)
.AllowColumnResizing(true)
.OnCellPrepared("receptionCell_preparedSortie")
.Selection(s => s.Mode(SelectionMode.Multiple))
.Editing(editing =>
{
    editing.AllowUpdating(true);
    editing.AllowDeleting(true);
    editing.AllowAdding(true);
    editing.Mode(GridEditMode.Form);
})
)
}
@using (Html.DevExtreme().NamedTemplate("BonSortieDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Détails")
                .Template(new TemplateName("DétailsGrid"))
                .Option("DétailsGrid", new { id = new JS("data.NumBonSortie") });
        })
        )
}
@using (Html.DevExtreme().NamedTemplate("DétailsGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkBonSortieArticles>()
            .DataSource(ds => ds.Mvc()
            .Controller("Sorties")
            .LoadAction("GetDetails")
            .InsertAction("PostDetail")
            .UpdateAction("PutDetail")
            .DeleteAction("DeleteDetail")
            .Key("Id")
            .LoadParams(new
            {
                id = new JS("DétailsGrid.id")
            }
            )
            )
                 .Scrolling(scrolling => scrolling
     .ScrollByContent(true)
     .ShowScrollbar(ShowScrollbarMode.Always)
     .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
        columns.AddFor(m => m.CodeArticle)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("ApproDemandesFournitures").LoadAction("DesignationArticleLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        );
        columns.AddFor(m => m.Qte);
        columns.AddFor(m => m.CodePreneur)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("Sorties").LoadAction("CodePreneurLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        );
        columns.AddFor(m => m.LieuDemandé);
        columns.AddFor(m => m.PrixUnitaire).AllowEditing(false);
        columns.AddFor(m => m.Montant).AllowEditing(false);
        columns.Add()
        .Type(GridCommandColumnType.Buttons)
        .Width(110)
        .Buttons(b =>
        {
            b.Add().Name(GridColumnButtonName.Edit);
            b.Add().Name(GridColumnButtonName.Delete);
        });
    })
   .ColumnChooser(cc => cc
   .Enabled(true)
   .AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(true);
       editing.AllowDeleting(true);
       editing.AllowAdding(true);
       editing.Mode(GridEditMode.Form);
   })
)
}

<script>
    function gridBoxIdEmployee_valueChanged(e) {
        var $dataGrid = $("#embedded-datagridMultipleIdEmployee");
        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(e.value, false);
        }
    }
    function gridBox_valueChanged(args, setValueMethod) {
        var $dataGrid = $("#embedded-datagridMultipleIdEmployee");

        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(args.value, false);
        }
        setValueMethod(args.value);
    }
    function onSelectionChanged(e, dropDownBoxInstance) {
        var keys = e.selectedRowKeys;
        dropDownBoxInstance.option("value", keys);
        console.log(dropDownBoxInstance);
    }
    function refreshButton_click() {
        DevExpress.ui.notify("Rafraichissement en cours!");
        var demandesTravailGrid = $("#demandesTravailGrid").dxDataGrid("instance");
        var demandesTravailDS = demandesTravailGrid.getDataSource();
        demandesTravailGrid.beginCustomLoading("Chargement en cours...");
        demandesTravailDS.reload();
        demandesTravailGrid.refresh();
        demandesTravailGrid.endCustomLoading();
    }
    function dateDebutBox_value() {
        var dateDebutBox = $("#FilterDateDebut").dxDateBox("instance");
        console.log(dateDebutBox.option('value'));
        return new Date(dateDebutBox.option('value')).toJSON();
    }
    function dateFinBox_value() {
        var dateFinBox = $("#FilterDateFin").dxDateBox("instance");
        console.log(dateFinBox.option('value'));
        return new Date(dateFinBox.option('value')).toJSON();
    }
    function receptionCell_preparedSortie(e) {
        if (e.rowType === "data" && e.column.command == "edit") {
            let d = new Date(e.row.data.DateSortie);
            let DateRef = new Date(d.getFullYear(), d.getMonth(), d.getDate())
            let Now = new Date();
            let today = new Date(Now.getFullYear(), Now.getMonth(), Now.getDate());
            if (DateRef < today) {
                e.cellElement.find(".dx-link-edit").remove();
                e.cellElement.find(".dx-link-delete").remove();
            }
        }
        if (e.rowType === "data" && e.column.command === "edit") {
            var isEditing = e.row.isEditing, $links = e.cellElement.find(".dx-link");
            $links.text("");
            if (isEditing) {
                $links.filter(".dx-link-save").addClass("dx-icon-save");
                $links.filter(".dx-link-cancel").addClass("dx-icon-revert");
            } else {
                $links.filter(".dx-link-edit").addClass("dx-icon-edit");
                $links.filter(".dx-link-delete").addClass("dx-icon-trash");
            }
        }
    }
    function receptionCell_preparedAchat(e) {
        if (e.rowType === "data" && e.column.command == "edit") {
            let d = new Date(e.row.data.DateDemandeAchat);
            let DateRef = new Date(d.getFullYear(), d.getMonth(), d.getDate())
            let Now = new Date();
            let today = new Date(Now.getFullYear(), Now.getMonth(), Now.getDate());
            if (DateRef < today) {
                e.cellElement.find(".dx-link-edit").remove();
                e.cellElement.find(".dx-link-delete").remove();
            }
        }
        if (e.rowType === "data" && e.column.command === "edit") {
            var isEditing = e.row.isEditing, $links = e.cellElement.find(".dx-link");
            $links.text("");
            if (isEditing) {
                $links.filter(".dx-link-save").addClass("dx-icon-save");
                $links.filter(".dx-link-cancel").addClass("dx-icon-revert");
            } else {
                $links.filter(".dx-link-edit").addClass("dx-icon-edit");
                $links.filter(".dx-link-delete").addClass("dx-icon-trash");
            }
        }
    }
    function receptionCell_preparedAffectation(e) {
        if (e.rowType === "data" && e.column.command == "edit") {
            let d = new Date(e.row.data.DateAffectation);
            let DateRef = new Date(d.getFullYear(), d.getMonth(), d.getDate());
            let Now = new Date();
            let today = new Date(Now.getFullYear(), Now.getMonth(), Now.getDate());
            if (DateRef < today) {
                e.cellElement.find(".dx-link-edit").remove();
                e.cellElement.find(".dx-link-delete").remove();
            }
        }
        if (e.rowType === "data" && e.column.command === "edit") {
            var isEditing = e.row.isEditing, $links = e.cellElement.find(".dx-link");
            $links.text("");
            if (isEditing) {
                $links.filter(".dx-link-save").addClass("dx-icon-save");
                $links.filter(".dx-link-cancel").addClass("dx-icon-revert");
            } else {
                $links.filter(".dx-link-edit").addClass("dx-icon-edit");
                $links.filter(".dx-link-delete").addClass("dx-icon-trash");
            }
        }
    }
    function receptionCell_prepared(e) {
        if (e.rowType === "data" && e.column.command == "edit") {
            let d = new Date(e.row.data.DateDemande);
            let DateRef = new Date(d.getFullYear(), d.getMonth(), d.getDate())
            let Now = new Date();
            let today = new Date(Now.getFullYear(), Now.getMonth(), Now.getDate());
            if (DateRef < today) {
                e.cellElement.find(".dx-link-edit").remove();
                e.cellElement.find(".dx-link-delete").remove();
            }
        }
        if (e.rowType === "data" && e.column.command === "edit") {
            var isEditing = e.row.isEditing, $links = e.cellElement.find(".dx-link");
            $links.text("");
            if (isEditing) {
                $links.filter(".dx-link-save").addClass("dx-icon-save");
                $links.filter(".dx-link-cancel").addClass("dx-icon-revert");
            } else {
                $links.filter(".dx-link-edit").addClass("dx-icon-edit");
                $links.filter(".dx-link-delete").addClass("dx-icon-trash");
            }
        }
    }
    var imprimerDemandeFourniture = function (e) {
        var num = e.row.data.NumeroDemande;
        window.open(' @Url.Action("DemandeFournitureViewer", "MagasinManager")?id='+num, '_blank').focus();
    }
    function CollpaseAll(e) {
        e.component.collapseAll(-1);
    }

    var imprimerBonAffectation = function (e) {
        var num = e.row.data.NumBonAffectation;
        window.open(' @Url.Action("BonAffectationViewer", "MagasinManager")?id='+num, '_blank').focus();
        }
    var imprimerDemandeAchat = function (e) {
        var num = e.row.data.NumDemandeAchat;
        window.open(' @Url.Action("DemandeAchatViewer", "MagasinManager")?id='+num, '_blank').focus();
    }
    var imprimerBoneSortie = function (e) {
        var num = e.row.data.NumBonSortie;
        window.open(' @Url.Action("BonSortieViewer", "MagasinManager")?id='+num, '_blank').focus();
    }
    function gridBox_valueChanged(args, setValueMethod) {
        var $dataGrid = $("#embedded-datagridMultipleIdEmployee");
        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(args.value, false);
        }
        setValueMethod(args.value);
    }
    function onSelectionChanged(e, dropDownBoxInstance) {
        var keys = e.selectedRowKeys;
        dropDownBoxInstance.option("value", keys);
    }
    function onCloseBtnClick(args, dropDownBoxInstance) {
        dropDownBoxInstance.close();
    }
</script>