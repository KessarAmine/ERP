@using DevKbfSteel.Models
@using DevExpress.XtraReports.UI;
@using DevKbfSteel.Controllers
@using DevExpress.XtraReports.Parameters;
@using DevKbfSteel.Reports
@using DevExpress.AspNetCore
@using DevExtreme.AspNet.Mvc
@using DevKbfSteel.Helpers;
@using DevKbfSteel.Areas.MagasinManager.Models;
@{
    ViewData["Title"] = "Magasin-Personnels";
    Layout = "~/Views/Shared/_LayoutMagasinManager.cshtml";
}

@(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.RhListeDesEmployes>()
        .ID("Personnels")
        .DataSource(ds => ds.Mvc()
        .Controller("GestionPersonnelsMagasin")
        .LoadAction("Get")
        .Key("Id")
        )
        .RemoteOperations(true)
        .NoDataText("Aucune donnée à afficher")
        .CacheEnabled(true)
        .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
        .Columns(columns => {
            columns.AddFor(m => m.Nom);
            columns.AddFor(m => m.Prenom);
            columns.AddFor(m => m.TelPersonnel);
            columns.AddFor(m => m.TelProfesionnel);
            columns.AddFor(m => m.Adresse);
            columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Width(110)
            .Buttons(b =>
            {
                b.Add()
                .Hint("Imprimer")
                .OnClick(@<text>imprimerBoneEntree</text>)
                .Icon("print");
            });
        })
.OnRowExpanding("CollpaseAll")
.OnRowExpanded("refreshButton_click")
.ColumnChooser(cc => cc
.Enabled(true)
.AllowSearch(true))
.Height("95%")
.Export(e => e.Enabled(true).AllowExportSelectedData(true))
.FilterRow(f => f.Visible(true))
.HeaderFilter(headerfilter => headerfilter.Visible(true))
.GroupPanel(p => p.Visible(true))
.MasterDetail(md => md
.Enabled(true)
.Template(new TemplateName("PersonnelsDetails")))
.AllowColumnReordering(true)
.AllowColumnResizing(true)
.OnCellPrepared("receptionCell_prepared")
.Selection(s => s.Mode(SelectionMode.Multiple))
.Editing(editing =>
{
    editing.AllowUpdating(false);
    editing.AllowDeleting(false);
    editing.AllowAdding(false);
    editing.Mode(GridEditMode.Form);
})
)
@using (Html.DevExtreme().NamedTemplate("PersonnelsDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Entrées")
                .Template(new TemplateName("EntreeGrid"))
                .Option("EntreeGrid", new { id = new JS("data.Id") });
            items.Add()
                .Title("Sorties")
                .Template(new TemplateName("SortiesGrid"))
                .Option("SortiesGrid", new { id = new JS("data.Id") });
            items.Add()
                .Title("Décharges")
                .Template(new TemplateName("DechargesGrid"))
                .Option("DechargesGrid", new { id = new JS("data.Id") });
            items.Add()
                .Title("Réstitution")
                .Template(new TemplateName("RestitutionPersonnelGrid"))
                .Option("RestitutionPersonnelGrid", new { id = new JS("data.Id") });
            items.Add()
                .Title("Affectations")
                .Template(new TemplateName("AffectationGrid"))
                .Option("AffectationGrid", new { id = new JS("data.Id") });
            items.Add()
                .Title("Réintégrations")
                .Template(new TemplateName("ReintegrationPersonnelGrid"))
                .Option("ReintegrationPersonnelGrid", new { id = new JS("data.Id") });
            items.Add()
                .Title("Transferts")
                .Template(new TemplateName("TransfertsGrid"))
                .Option("TransfertsGrid", new { id = new JS("data.Id") });
        })
        )
}

@using (Html.DevExtreme().NamedTemplate("EntreeGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkBonEntree>()
            .DataSource(ds => ds.Mvc()
            .Controller("GestionPersonnelsMagasin")
            .LoadAction("GetEntrees")
            .Key("NumBon")
            .LoadParams(new
            {
                id = new JS("EntreeGrid.id")
            }
            )
            )
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always)
    .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
            columns.AddFor(m => m.DateEntree)
             .Format("yyyy-MM-dd")
             .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
            columns.AddFor(m => m.CodeFournisseur)
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("Fournisseurs").LoadAction("FournisseurLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
            .AllowClearing(true))
            .EditCellTemplate(@<text> @Html.Partial("DxDropDownBoxFournisseur") </text>);

            columns.AddFor(m => m.TypeSource)
                .Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("Entrees").LoadAction("TypeSourceLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
                .AllowClearing(true));
            columns.AddFor(m => m.NumSource);
            columns.AddFor(m => m.DateDa)
             .Format("yyyy-MM-dd")
             .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
            columns.AddFor(m => m.Nda);
            columns.AddFor(m => m.TypeAchat)
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("Entrees").LoadAction("TypeAchatLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
            .AllowClearing(true));
            columns.AddFor(m => m.TypeDevise)
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("Entrees").LoadAction("TypeDeviseLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
            .AllowClearing(true));
            columns.AddFor(m => m.TauxChange);
    })
   .ColumnChooser(cc => cc
   .Enabled(true)
   .AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
    .MasterDetail(md => md
    .Enabled(true)
    .Template(new TemplateName("EntreeDetailGridTemp")))
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(false);
       editing.AllowDeleting(false);
       editing.AllowAdding(false);
       editing.Mode(GridEditMode.Form);
   })
)
}
@using (Html.DevExtreme().NamedTemplate("EntreeDetailGridTemp"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Entrées Détails")
                .Template(new TemplateName("EntreeDetailGrid"))
                .Option("EntreeDetailGrid", new { id = new JS("data.NumBon") });
        })
        )
}
@using (Html.DevExtreme().NamedTemplate("EntreeDetailGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkBonEntreeArticles>()
            .DataSource(ds => ds.Mvc()
            .Controller("Entrees")
            .LoadAction("GetDetails")
            .InsertAction("PostDetail")
            .UpdateAction("PutDetail")
            .DeleteAction("DeleteDetail")
            .Key("Id")
            .LoadParams(new
            {
                id = new JS("EntreeDetailGrid.id")
            }
            )
            )
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always)
    .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
        columns.AddFor(m => m.CodePdr)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("ApproDemandesFournitures").LoadAction("DesignationArticleLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        )
        .EditCellTemplate(@<text> @Html.Partial("DxDropDownPdrEntree") </text>);
        columns.AddFor(m => m.QteRecu);
        columns.AddFor(m => m.PrixUnitaire);
        columns.AddFor(m => m.Montant).AllowEditing(false);
    })
   .ColumnChooser(cc => cc
   .Enabled(true)
   .AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(false);
       editing.AllowDeleting(false);
       editing.AllowAdding(false);
       editing.Mode(GridEditMode.Form);
   })
)
}

@using (Html.DevExtreme().NamedTemplate("SortiesGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkBonSortie>()
            .DataSource(ds => ds.Mvc()
            .Controller("GestionPersonnelsMagasin")
            .LoadAction("GetSorties")
            .Key("NumBonSortie")
            .LoadParams(new
            {
                id = new JS("SortiesGrid.id")
            }
            )
            )
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always)
    .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns =>
    {
        columns.AddFor(m => m.DateSortie)
             .Format("yyyy-MM-dd")
             .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month)).AllowEditing(false);
        columns.AddFor(m => m.NumDemandeFourniture);
        columns.AddFor(m => m.TypeSortie)
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("Sorties").LoadAction("TypeSortieLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
            .AllowClearing(true));
    })
.MasterDetail(md => md
.Enabled(true)
.Template(new TemplateName("SortieDetailGridTemp")))
   .ColumnChooser(cc => cc
   .Enabled(true)
   .AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(false);
       editing.AllowDeleting(false);
       editing.AllowAdding(false);
       editing.Mode(GridEditMode.Form);
   })
)
}
@using (Html.DevExtreme().NamedTemplate("SortieDetailGridTemp"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Sortie Détails")
                .Template(new TemplateName("SortieDetailGrid"))
                .Option("SortieDetailGrid", new { id = new JS("data.NumBonSortie") });
        })
        )
}
@using (Html.DevExtreme().NamedTemplate("SortieDetailGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkBonSortieArticles>()
            .DataSource(ds => ds.Mvc()
            .Controller("Sorties")
            .LoadAction("GetDetails")
            .Key("Id")
            .LoadParams(new
            {
                id = new JS("SortieDetailGrid.id")
            }
            )
            )
                 .Scrolling(scrolling => scrolling
     .ScrollByContent(true)
     .ShowScrollbar(ShowScrollbarMode.Always)
     .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
        columns.AddFor(m => m.CodeArticle)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("ApproDemandesFournitures").LoadAction("DesignationArticleLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        );
        columns.AddFor(m => m.Qte);
        columns.AddFor(m => m.CodePreneur)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("Sorties").LoadAction("CodePreneurLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        );
        columns.AddFor(m => m.LieuDemandé);
        columns.AddFor(m => m.PrixUnitaire).AllowEditing(false);
        columns.AddFor(m => m.Montant).AllowEditing(false);
    })
   .ColumnChooser(cc => cc
   .Enabled(true)
   .AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(false);
       editing.AllowDeleting(false);
       editing.AllowAdding(false);
       editing.Mode(GridEditMode.Form);
   })
)
}

@using (Html.DevExtreme().NamedTemplate("DechargesGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkDecharge>()
            .DataSource(ds => ds.Mvc()
            .Controller("GestionPersonnelsMagasin")
            .LoadAction("GetDécharges")
            .Key("Id")
            .LoadParams(new
            {
                id = new JS("DechargesGrid.id")
            }
            )
            )
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always)
    .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns =>
    {
        columns.AddFor(m => m.DateDecharge).Caption("Date Décharge")
        .Format("yyyy-MM-dd")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month)).AllowEditing(false);
        columns.AddFor(m => m.CodeIntervenant)
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("Sorties").LoadAction("IntervenantLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
            .AllowClearing(true));
        columns.AddFor(m => m.ServiceReceveur)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("StkAffectations").LoadAction("ServiceReceveurLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true));
    })
   .ColumnChooser(cc => cc
   .Enabled(true)
   .AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
    .MasterDetail(md => md
    .Enabled(true)
    .Template(new TemplateName("DechargeDetails")))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(true);
       editing.AllowDeleting(true);
       editing.AllowAdding(true);
       editing.Mode(GridEditMode.Form);
   })
)
}
@using (Html.DevExtreme().NamedTemplate("DechargeDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Détails")
                .Template(new TemplateName("DétailsGrid"))
                .Option("DétailsGrid", new { id = new JS("data.NumDecharge") });
            items.Add()
                .Title("Réstitution")
                .Template(new TemplateName("RéstitutionGrid"))
                .Option("RéstitutionGrid", new { id = new JS("data.NumDecharge") });
        })
        )
}
@using (Html.DevExtreme().NamedTemplate("DétailsGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkDechargeArticles>()
            .DataSource(ds => ds.Mvc()
            .Controller("Decharge")
            .LoadAction("GetDechargeDetails")
            .InsertAction("PostDechargeDetails")
            .UpdateAction("PutDechargeDetails")
            .DeleteAction("DeleteDechargeDetails")
            .Key("Id")
            .LoadParams(new
            {
                id = new JS("DétailsGrid.id")
            }
            )
            )
                 .Scrolling(scrolling => scrolling
     .ScrollByContent(true)
     .ShowScrollbar(ShowScrollbarMode.Always)
     .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
        columns.AddFor(m => m.CodeArticle)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("ApproDemandesFournitures").LoadAction("DesignationArticleLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        )
        .EditCellTemplate(@<text> @Html.Partial("DxDropDownBoxArticlesBonAffectation") </text>);
        columns.AddFor(m => m.Qte);
        columns.AddFor(m => m.Observation);
    })
.OnRowExpanding("CollpaseAll")
.OnRowExpanded("refreshButton_click")
   .ColumnChooser(cc => cc
   .Enabled(true)
   .AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(true);
       editing.AllowDeleting(true);
       editing.AllowAdding(true);
       editing.Mode(GridEditMode.Form);
   })
)
}
@using (Html.DevExtreme().NamedTemplate("RéstitutionGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkRestitution>()
        .DataSource(ds => ds.Mvc()
        .Controller("Restitution")
        .LoadAction("GetRestitution")
        .InsertAction("PostRestitution")
        .UpdateAction("PutRestitution")
        .DeleteAction("DeleteRestitution")
        .Key("NumRestitution")
        )
        .RemoteOperations(true)
        .NoDataText("Aucune donnée à afficher")
        .CacheEnabled(true)
        .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
        .Columns(columns => {
            columns.AddFor(m => m.DateRestitution).Caption("Date Restitution");

            columns.AddFor(m => m.CodeIntervenant)
                .Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("Sorties").LoadAction("IntervenantLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
                .AllowClearing(true));
            columns.AddFor(m => m.ServiceEmetteur)
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("StkAffectations").LoadAction("ServiceReceveurLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
            .AllowClearing(true));
            columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Width(110)
            .Buttons(b =>
            {
                b.Add().Name(GridColumnButtonName.Edit);
                b.Add().Name(GridColumnButtonName.Delete);
                b.Add()
                .Hint("Imprimer")
                .OnClick(@<text>imprimerRestitution</text>)
                .Icon("print");
            });
        })
.ColumnChooser(cc => cc
.Enabled(true)
.AllowSearch(true))
.Height("95%")
.Export(e => e.Enabled(true).AllowExportSelectedData(true))
.FilterRow(f => f.Visible(true))
.HeaderFilter(headerfilter => headerfilter.Visible(true))
.GroupPanel(p => p.Visible(true))
.MasterDetail(md => md
.Enabled(true)
.Template(new TemplateName("RestitutionDetails")))
.AllowColumnReordering(true)
.AllowColumnResizing(true)
.OnCellPrepared("receptionCell_preparedRestitution")
.Selection(s => s.Mode(SelectionMode.Multiple))
.Editing(editing =>
{
    editing.AllowUpdating(true);
    editing.AllowDeleting(true);
    editing.AllowAdding(true);
    editing.Mode(GridEditMode.Form);
})
)
}
@using (Html.DevExtreme().NamedTemplate("RestitutionDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Détails")
                .Template(new TemplateName("DétailsRestitutionGrid"))
                .Option("DétailsRestitutionGrid", new { id = new JS("data.NumRestitution") });
        })
        )
}
@using (Html.DevExtreme().NamedTemplate("DétailsRestitutionGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkRestitutionArticles>()
            .DataSource(ds => ds.Mvc()
            .Controller("Restitution")
            .LoadAction("GetRestitutionDetails")
            .InsertAction("PostRestitutionDetails")
            .UpdateAction("PutRestitutionDetails")
            .DeleteAction("DeleteRestitutionDetails")
            .Key("Id")
            .LoadParams(new
            {
                id = new JS("DétailsRestitutionGrid.id")
            }
            )
            )
                 .Scrolling(scrolling => scrolling
     .ScrollByContent(true)
     .ShowScrollbar(ShowScrollbarMode.Always)
     .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
        columns.AddFor(m => m.CodeArticle)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("ApproDemandesFournitures").LoadAction("DesignationArticleLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        )
        .EditCellTemplate(@<text> @Html.Partial("DxDropDownBoxArticlesBonAffectation") </text>);
        columns.AddFor(m => m.Qte);
        columns.AddFor(m => m.Observation);
    })
   .ColumnChooser(cc => cc
   .Enabled(true)
   .AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_preparedRestitution")
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(true);
       editing.AllowDeleting(true);
       editing.AllowAdding(true);
       editing.Mode(GridEditMode.Form);
   })
)
}

@using (Html.DevExtreme().NamedTemplate("RestitutionPersonnelGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkRestitution>()
            .DataSource(ds => ds.Mvc()
            .Controller("GestionPersonnelsMagasin")
            .LoadAction("GetRestitutions")
            .Key("Id")
            .LoadParams(new
            {
                id = new JS("RestitutionPersonnelGrid.id")
            }
            )
            )
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always)
    .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns =>
    {
        columns.AddFor(m => m.DateRestitution).Caption("Date Restitution");
        columns.AddFor(m => m.ServiceEmetteur)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("StkAffectations").LoadAction("ServiceReceveurLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true));
    })
   .ColumnChooser(cc => cc
   .Enabled(true)
   .AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .MasterDetail(md => md
    .Enabled(true)
    .Template(new TemplateName("RestitutionDetails")))
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(false);
       editing.AllowDeleting(false);
       editing.AllowAdding(false);
       editing.Mode(GridEditMode.Form);
   })
)
}

@using (Html.DevExtreme().NamedTemplate("AffectationGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkAffectations>()
            .DataSource(ds => ds.Mvc()
            .Controller("GestionPersonnelsMagasin")
            .LoadAction("GetAffectations")
            .Key("NumBonAffectation")
            .LoadParams(new
            {
                id = new JS("AffectationGrid.id")
            }
            )
            )
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always)
    .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns =>
    {
        columns.AddFor(m => m.DateAffectation).Caption("Date Affectation");
        columns.AddFor(m => m.NumBonEntree).Caption("N° Bon d'entrée");
        columns.AddFor(m => m.DateEntree).Caption("Date Entrée");
        columns.AddFor(m => m.CodeIntervenant)
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("Sorties").LoadAction("IntervenantLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
            .AllowClearing(true));
        columns.AddFor(m => m.ServiceReceveur)
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("StkAffectations").LoadAction("ServiceReceveurLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
            .AllowClearing(true));
    })
   .ColumnChooser(cc => cc
   .Enabled(true)
   .AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .MasterDetail(md => md
    .Enabled(true)
    .Template(new TemplateName("BonAffectationDetails")))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(false);
       editing.AllowDeleting(false);
       editing.AllowAdding(false);
       editing.Mode(GridEditMode.Form);
   })
)
}
@using (Html.DevExtreme().NamedTemplate("BonAffectationDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Détails bon d'affectation")
                .Template(new TemplateName("ArticlesBonAffectationGrid"))
                .Option("BonAffectationDetailsGrid", new { id = new JS("data.NumBonAffectation") });
        })
        )
}
@using (Html.DevExtreme().NamedTemplate("ArticlesBonAffectationGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkAffectationsArticles>()
            .DataSource(ds => ds.Mvc()
            .Controller("StkAffectations")
            .LoadAction("GetBonAffectationDemandeArticles")
            .Key("Id")
            .LoadParams(new
            {
                numBonAffectation = new JS("BonAffectationDetailsGrid.id")
            }
            )
            )
            .RemoteOperations(true)
            .NoDataText("Aucune donnée à afficher")
            .CacheEnabled(true)
            .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
            .Columns(columns => {
                columns.AddFor(m => m.CodePdr)
                .Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("ApproDemandesFournitures").LoadAction("DesignationArticleLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
                .AllowClearing(true)
                );
                columns.AddFor(m => m.Qte);
                columns.Add()
                .Type(GridCommandColumnType.Buttons)
                .Width(110)
                .Buttons(b =>
                {
                    b.Add().Name(GridColumnButtonName.Edit);
                    b.Add().Name(GridColumnButtonName.Delete);
                });
            })
   .ColumnChooser(cc => cc
   .Enabled(true)
   .AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(false);
       editing.AllowDeleting(false);
       editing.AllowAdding(false);
       editing.Mode(GridEditMode.Form);
   })
)
}

@using (Html.DevExtreme().NamedTemplate("ReintegrationPersonnelGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkReintegration>()
            .DataSource(ds => ds.Mvc()
            .Controller("GestionPersonnelsMagasin")
            .LoadAction("GetReintegration")
            .Key("Id")
            .LoadParams(new
            {
                id = new JS("ReintegrationPersonnelGrid.id")
            }
            )
            )
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always)
    .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns =>
    {
        columns.AddFor(m => m.DateReingegration)
        .Format("yyyy-MM-dd")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month)).AllowEditing(false);
        columns.AddFor(m => m.ServiceEmetteur)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("ApproDemandeService").LoadAction("StructureLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true));
    })
   .ColumnChooser(cc => cc
   .Enabled(true)
   .AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(false);
       editing.AllowDeleting(false);
       editing.AllowAdding(false);
       editing.Mode(GridEditMode.Form);
   })
   .MasterDetail(md => md
    .Enabled(true)
    .Template(new TemplateName("BonReintegrationDetails")))
)
}
@using (Html.DevExtreme().NamedTemplate("BonReintegrationDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Détails")
                .Template(new TemplateName("DétailsReintegrationGrid"))
                .Option("DétailsReintegrationGrid", new { id = new JS("data.NumBonReintegration") });
        })
        )
}
@using (Html.DevExtreme().NamedTemplate("DétailsReintegrationGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkReintegrationArticles>()
            .DataSource(ds => ds.Mvc()
            .Controller("Reintegration")
            .LoadAction("GetReintegrationDetails")
            .Key("Id")
            .LoadParams(new
            {
                id = new JS("DétailsReintegrationGrid.id")
            }
            )
            )
    .Scrolling(scrolling => scrolling
     .ScrollByContent(true)
     .ShowScrollbar(ShowScrollbarMode.Always)
     .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
        columns.AddFor(m => m.CodeArticle)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("ApproDemandesFournitures").LoadAction("DesignationArticleLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        );
        columns.AddFor(m => m.Qte);
        columns.AddFor(m => m.CodeIntervenant).Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("Reintegration").LoadAction("EmployeLookup").Key("Value"))
    .AllowClearing(true)
    .ValueExpr("Value")
    .DisplayExpr("Text")
    )
    .EditCellTemplate(@<text>
        @Html.Partial("DxDropDownBox")
        </text>)
        .AllowGrouping(true);
        columns.AddFor(m => m.LieuDemande);
    })
   .ColumnChooser(cc => cc
   .Enabled(true)
   .AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(false);
       editing.AllowDeleting(false);
       editing.AllowAdding(false);
       editing.Mode(GridEditMode.Form);
   })
)
}

@using (Html.DevExtreme().NamedTemplate("TransfertsGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkBonTransfert>()
            .DataSource(ds => ds.Mvc()
            .Controller("GestionPersonnelsMagasin")
            .LoadAction("GetTransferts")
            .Key("Id")
            .LoadParams(new
            {
                id = new JS("TransfertsGrid.id")
            }
            )
            )
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always)
    .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns =>
    {
        columns.AddFor(m => m.DateTransfert)
        .Format("yyyy-MM-dd")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month)).AllowEditing(false);

        columns.AddFor(m => m.Destination)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("Transfert").LoadAction("SourceDestinationLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        );
        columns.AddFor(m => m.Source)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("Transfert").LoadAction("SourceDestinationLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        );
    })
   .ColumnChooser(cc => cc
   .Enabled(true)
   .AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
    .MasterDetail(md => md
    .Enabled(true)
    .Template(new TemplateName("BonTransfertDetails")))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(false);
       editing.AllowDeleting(false);
       editing.AllowAdding(false);
       editing.Mode(GridEditMode.Form);
   })
)
}
@using (Html.DevExtreme().NamedTemplate("BonTransfertDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Détails")
                .Template(new TemplateName("DetailsGrid"))
                .Option("DetailsGrid", new { id = new JS("data.NumBonTransfert") });
        })
        )
}
@using (Html.DevExtreme().NamedTemplate("DetailsGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkBonTransfertArticles>()
        .DataSource(ds => ds.Mvc()
        .Controller("Transfert")
        .LoadAction("GetTransfertArticles")
        .Key("Id")
        .LoadParams(new
        {
            NumBonTransfert = new JS("DetailsGrid.id")
        }
        )
        )
    .Scrolling(scrolling => scrolling
     .ScrollByContent(true)
     .ShowScrollbar(ShowScrollbarMode.Always)
     .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
        columns.AddFor(m => m.CodePdr)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("ApproDemandesFournitures").LoadAction("DesignationArticleLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        );
        columns.AddFor(m => m.Qte);
    })
   .ColumnChooser(cc => cc
   .Enabled(true)
   .AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(false);
       editing.AllowDeleting(false);
       editing.AllowAdding(false);
       editing.Mode(GridEditMode.Form);
   })
)
}

<script>
    function gridBoxIdEmployee_valueChanged(e) {
        var $dataGrid = $("#embedded-datagridMultipleIdEmployee");
        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(e.value, false);
        }
    }
    function gridBox_valueChanged(args, setValueMethod) {
        var $dataGrid = $("#embedded-datagridMultipleIdEmployee");

        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(args.value, false);
        }
        setValueMethod(args.value);
    }
    function onSelectionChanged(e, dropDownBoxInstance) {
        var keys = e.selectedRowKeys;
        dropDownBoxInstance.option("value", keys);
        console.log(dropDownBoxInstance);
    }
    function refreshButton_click() {
        DevExpress.ui.notify("Rafraichissement en cours!");
        var demandesTravailGrid = $("#Personnels").dxDataGrid("instance");
        var demandesTravailDS = demandesTravailGrid.getDataSource();
        demandesTravailGrid.beginCustomLoading("Chargement en cours...");
        demandesTravailDS.reload();
        demandesTravailGrid.refresh();
        demandesTravailGrid.endCustomLoading();
    }
    function dateDebutBox_value() {
        var dateDebutBox = $("#FilterDateDebut").dxDateBox("instance");
        console.log(dateDebutBox.option('value'));
        return new Date(dateDebutBox.option('value')).toJSON();
    }
    function dateFinBox_value() {
        var dateFinBox = $("#FilterDateFin").dxDateBox("instance");
        console.log(dateFinBox.option('value'));
        return new Date(dateFinBox.option('value')).toJSON();
    }
    function receptionCell_prepared(e) {
        if (e.rowType === "data" && e.column.command == "edit") {
            let d = new Date(e.row.data.DateEntree);
            let DateRef = new Date(d.getFullYear(), d.getMonth(), d.getDate())
            let Now = new Date();
            let today = new Date(Now.getFullYear(), Now.getMonth(), Now.getDate());
            if (DateRef < today) {
                e.cellElement.find(".dx-link-edit").remove();
                e.cellElement.find(".dx-link-delete").remove();
            }
        }
        if (e.rowType === "data" && e.column.command === "edit") {
            var isEditing = e.row.isEditing, $links = e.cellElement.find(".dx-link");
            $links.text("");
            if (isEditing) {
                $links.filter(".dx-link-save").addClass("dx-icon-save");
                $links.filter(".dx-link-cancel").addClass("dx-icon-revert");
            } else {
                $links.filter(".dx-link-edit").addClass("dx-icon-edit");
                $links.filter(".dx-link-delete").addClass("dx-icon-trash");
            }
        }
    }
    function CollpaseAll(e) {
        e.component.collapseAll(-1);
    }
    var imprimerBoneEntree = function (e) {
        var num = e.row.data.NumBon;
        window.open(' @Url.Action("BonEntreeViewer", "MagasinManager")?id='+num, '_blank').focus();
        }
    function gridBox_valueChanged(args, setValueMethod) {
        var $dataGrid = $("#embedded-datagridMultipleIdEmployee");
        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(args.value, false);
        }
        setValueMethod(args.value);
    }
    function onSelectionChanged(e, dropDownBoxInstance) {
        var keys = e.selectedRowKeys;
        dropDownBoxInstance.option("value", keys);
    }
    function onCloseBtnClick(args, dropDownBoxInstance) {
        dropDownBoxInstance.close();
    }
</script>