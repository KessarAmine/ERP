@using DevKbfSteel.Models
@using DevExpress.XtraReports.UI;
@using DevKbfSteel.Controllers
@using DevExpress.XtraReports.Parameters;
@using DevKbfSteel.Reports
@using DevExpress.AspNetCore
@using DevExtreme.AspNet.Mvc
@using DevKbfSteel.Helpers;
@{
    ViewData["Title"] = "Electrique-CheckList control maintenance";
    Layout = "~/Views/Shared/_LayoutElectriqueManager.cshtml";
}
@(Html.DevExtreme().Toolbar()
    .Items(items =>
    {
        items.Add()
           .Widget(w => w
           .Button()
           .Icon("refresh")
           .OnClick("refreshButton_click")
       )
       .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
       .Location(ToolbarItemLocation.Before);

        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("yyyy-MM-dd").ID("FilterDateDebut"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);

        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("yyyy-MM-dd").ID("FilterDateFin"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);

    })
)
@(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.MaintPointControlMaster>()
 .DataSource(ds => ds.Mvc()
     .Controller("MaintPointControlMasters")
     .LoadAction("Get")
     .UpdateAction("Put")
     .DeleteAction("Delete")
     .InsertAction("PostCheckList")
     .Key("NumCheckList")
     .LoadParams(new { dateDebut = new JS("dateDebutBox_value"), dateFin = new JS("dateFinBox_value"), id = XpertHelper.CodeElectrique }))
     .ColumnChooser(cc => cc.Enabled(true).AllowSearch(true))
     .Scrolling(scrolling => scrolling
     .ScrollByContent(true)
     .ShowScrollbar(ShowScrollbarMode.Always)
     .Mode(GridScrollingMode.Virtual))
     .Height("95%")
     .RemoteOperations(true)
     .ID("demandesTravailGrid")
     .NoDataText("Aucune donnée à afficher")
     .CacheEnabled(true)
     .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
 .Columns(columns => {
     columns.AddFor(m => m.Date)
     .DataType(GridColumnDataType.DateTime)
     .Format("yyyy-MM-dd HH:mm")
     .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
     columns.AddFor(m => m.DateDebut)
     .DataType(GridColumnDataType.DateTime)
     .Format("yyyy-MM-dd HH:mm")
     .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
     columns.AddFor(m => m.DateFin)
     .DataType(GridColumnDataType.DateTime)
     .Format("yyyy-MM-dd HH:mm")
     .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
     columns.Add()
        .Type(GridCommandColumnType.Buttons)
        .Width(110)
        .Buttons(b => {
        b.Add().Name(GridColumnButtonName.Edit);
        b.Add().Name(GridColumnButtonName.Delete);
        b.Add()
                .Hint("Imprimer demande service")
                .OnClick(@<text>imprimerCheckList</text>)
                .Icon("print");
        });
 })
.MasterDetail(md => md
    .Enabled(true)
    .Template(new TemplateName("CheckListDetails")))
   .Editing(editing =>
   {
       editing.AllowUpdating(true);
       editing.AllowDeleting(true);
       editing.AllowAdding(true);
       editing.Mode(GridEditMode.Row);
   })
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
)
@using (Html.DevExtreme().NamedTemplate("CheckListDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Visites")
                .Template(new TemplateName("CheckListDetailsGrid"))
                .Option("CheckListDetailsGrid", new { NumCheckList = new JS("data.NumCheckList") });
        })
        )
}
@using (Html.DevExtreme().NamedTemplate("CheckListDetailsGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.MaintPointControleDetail>()
            .DataSource(ds => ds.Mvc()
            .Controller("MaintPointControlMasters")
            .LoadAction("GetDetails")
            .UpdateAction("PutDetail")
            .Key("Id")
            .LoadParams(new
            {
                NumCheckList = new JS("CheckListDetailsGrid.NumCheckList")
            }
            )
            )
            .RemoteOperations(true)
            .NoDataText("Aucune donnée à afficher")
            .CacheEnabled(true)
            .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
            .Columns(columns => {
                columns.AddFor(m => m.CodeMachine).Caption("Designation")
                .Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("MaintPointControlMasters").LoadAction("DesignationLookup").Key("Value"))
                .AllowClearing(true)
                .ValueExpr("Value")
                .DisplayExpr("Text"))
                .EditCellTemplate(@<text>
                @Html.Partial("DxDropDownBoxMachine")
                </text>).AllowGrouping(true);

                columns.AddFor(m => m.Dimanche);
                columns.AddFor(m => m.Lundi);
                columns.AddFor(m => m.Mardi);
                columns.AddFor(m => m.Mercredi);
                columns.AddFor(m => m.Jeudi);
                columns.AddFor(m => m.Vendredi);
                columns.AddFor(m => m.Samedi);
                columns.AddFor(m => m.Observation);
                columns.Add()
                    .Type(GridCommandColumnType.Buttons)
                    .Width(110)
                    .Buttons(b => {
                    b.Add().Name(GridColumnButtonName.Edit);
                    b.Add().Name(GridColumnButtonName.Delete);
                    b.Add()
                        .Hint("OT")
                        .OnClick(@<text>ShowOt</text>)
                        .Icon("fas fa-hammer");

                    });
            })
    .ColumnChooser(cc => cc
    .Enabled(true)
    .AllowSearch(true))
    .Export(e => e.Enabled(true).AllowExportSelectedData(true))
    .FilterRow(f => f.Visible(true))
    .HeaderFilter(headerfilter => headerfilter.Visible(true))
    .GroupPanel(p => p.Visible(true))
    .AllowColumnReordering(true)
    .AllowColumnResizing(true)
    .OnCellPrepared("receptionCell_prepared")
    .Selection(s => s.Mode(SelectionMode.Multiple))
    .Editing(editing =>
    {
        editing.AllowUpdating(true);
        editing.AllowDeleting(false);
        editing.AllowAdding(false);
    })
)
}
@using (Html.DevExtreme().NamedTemplate("EditerOrdre"))
{
    @using (Html.BeginForm("Post_Ot_From_Ot_Sent_With_Form_Electrique", "AssOtTraveaux", FormMethod.Post))
    {
        @(Html.DevExtreme().Form<EditerOrdreTravailModel>()
        .ShowValidationSummary(true)
        .Items(items =>
        {
            items.AddGroup()
                    .ColCount(2)
                    .Items(groupItems =>
                    {
                        groupItems.AddGroup().Items(secondGroupItems => {
                            secondGroupItems.AddSimpleFor(m => m.CodeMaintenance).Editor(e => e.Lookup()
                            .DataSource(ds => ds.WebApi().Controller("AssOtTraveaux").LoadAction("TypeMaintenanceErrorLookup").Key("Value"))
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            .ShowClearButton(true)
                            );
                            secondGroupItems.AddSimpleFor(m => m.DateOt).Editor(e => e.DateBox()
                            .DateSerializationFormat("yyyy-MM-dd HH:mm")
                            .Type(DateBoxType.DateTime));
                        });
                        groupItems.AddGroup().Items(secondGroupItems =>
                        {
                            secondGroupItems.AddSimpleFor(m => m.NumEquipement).Editor(e => e.DropDownBox()
                                    .ValueExpr("Id")
                                    .DisplayExpr("Equipement")
                                    .DataSource(d => d.Mvc()
                                    .Controller("Equipements")
                                    .LoadAction("GetEqp")
                                    .LoadMode(DataSourceLoadMode.Raw)
                                    .Key("Id"))
                                    .Placeholder("Select a value...")
                                    .ShowClearButton(true)
                                    .OnValueChanged(@"function(args) { gridBox_valueChangedCheck(args, setValue); }")
                                    .ContentTemplate(@<text>
                                        @(Html.DevExtreme().DataGrid()
                                                .ID("embedded-datagridMultipleIdEmployee")
                                                .DataSource(new JS(@"component.getDataSource()"))
                                                .Columns(columns =>
                                                {
                                                    columns.Add().DataField("CodeInstallation")
                                                    .Lookup(lookup => lookup
                                                        .DataSource(ds => ds.Mvc().Controller("DemandeTravails").LoadAction("MachinesLookup").Key("Value"))
                                                        .AllowClearing(true)
                                                        .ValueExpr("Value")
                                                        .DisplayExpr("Text")
                                                    );
                                                    columns.Add().DataField("Equipement");
                                                })
                                                .HoverStateEnabled(true)
                                                .Paging(p => p.PageSize(10))
                                                .FilterRow(f => f.Visible(true))
                                                .Scrolling(s => s.Mode(GridScrollingMode.Infinite))
                                                .Height(345)
                                                .Selection(s => s.Mode(SelectionMode.Single))
                                                .SelectedRowKeys(new JS("component.option('value')"))
                                                .OnSelectionChanged(@"function(args) { onSelectionChanged(args, component); }")
                                        )
                                        @(Html.DevExtreme().Button()
                                                 .ElementAttr(new { style = "margin-top:10px;float:right" })
                                                 .Text("Close")
                                                 .OnClick(@"function(args) { onCloseBtnClick(args, component); }"))
                                    </text>)
                             );
                            secondGroupItems.AddSimpleFor(m => m.HeureInstallation).Editor(e => e.DateBox()
                            .DateSerializationFormat("yyyy-MM-dd HH:mm")
                            .Type(DateBoxType.DateTime));
                        });
                    });
            items.AddButton()
            .HorizontalAlignment(HorizontalAlignment.Right)
            .ButtonOptions(b => b.Text("Enregistrer")
                .Type(ButtonType.Success)
                .UseSubmitBehavior(true)
            );
        })
        )
        @(Html.DevExtreme().TabPanel()
        .ID("TravauxTab")
        .Items(items =>
        {
            items.Add()
                .Title("Travaux")
                .Template(new TemplateName("TachesOtAddGrid"));
            items.Add()
                .Title("Outillage")
                .Template(new TemplateName("OutillageGrid"));
        })
        )

    }
}
@using (Html.DevExtreme().NamedTemplate("TachesOtAddGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.TempAssOtTravaux>()
            .DataSource(ds => ds.Mvc()
            .Controller("TempAssOtTravaux")
            .LoadAction("Get")
            .InsertAction("Post")
            .UpdateAction("Put")
            .DeleteAction("Delete")
            .Key("Id"))
            .RemoteOperations(true)
            .NoDataText("Aucune donnée à afficher")
            .CacheEnabled(true)
            .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
            .Columns(columns => {
            columns.AddFor(m => m.CodeEquipement).Width(250).Caption("Equipement")
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("AssOtTraveaux").LoadAction("EquipementsLookup").Key("Value"))
            .AllowClearing(true)
            .ValueExpr("Value")
            .DisplayExpr("Text")
            ).EditCellTemplate(@<text>
            @Html.Partial("DxDropDownBoxEquipements")
            </text>).AllowGrouping(true);
            columns.AddFor(m => m.CodeMachine).Caption("Machine")
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("AssOtTraveaux").LoadAction("MachinesLookup").Key("Value"))
            .AllowClearing(true)
            .ValueExpr("Value")
            .DisplayExpr("Text")
            );
            columns.AddFor(m => m.Qte);
            columns.AddFor(m => m.TypeTraveaux).Caption("Travail")
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("AssOtTraveaux").LoadAction("TypeTraveauxLookup").Key("Value"))
            .AllowClearing(true)
            .ValueExpr("Value")
            .DisplayExpr("Text")
            );
            columns.AddFor(m => m.Autres);
            })
            .Export(e => e.Enabled(true).AllowExportSelectedData(true))
            .FilterRow(f => f.Visible(true))
            .HeaderFilter(headerfilter => headerfilter.Visible(true))
            .GroupPanel(p => p.Visible(true))
            .AllowColumnReordering(true)
            .AllowColumnResizing(true)
            .OnCellPrepared("receptionCell_prepared")
            .Selection(s => s.Mode(SelectionMode.Multiple))
            .Editing(editing =>
            {
            editing.AllowUpdating(true);
            editing.AllowDeleting(true);
            editing.AllowAdding(true);
            editing.Mode(GridEditMode.Row);
            })
            )
}

@(Html.DevExtreme().Popup()
.ID("AddOt-popup")
.ShowTitle(true)
.Title("Ajouter un Ordre de travail")
.Visible(false)
.DragEnabled(false)
.CloseOnOutsideClick(true))
<script>
    function refreshButton_click() {
        DevExpress.ui.notify("Rafraichissement en cours!");
        var demandesTravailGrid = $("#demandesTravailGrid").dxDataGrid("instance");
        var demandesTravailDS = demandesTravailGrid.getDataSource();
        demandesTravailGrid.beginCustomLoading("Chargement en cours...");
        demandesTravailDS.reload();
        demandesTravailGrid.refresh();
        demandesTravailGrid.endCustomLoading();
    }
    function dateDebutBox_value() {
        var dateDebutBox = $("#FilterDateDebut").dxDateBox("instance");
        console.log(dateDebutBox.option('value'));
        return new Date(dateDebutBox.option('value')).toJSON();
    }
    function dateFinBox_value() {
        var dateFinBox = $("#FilterDateFin").dxDateBox("instance");
        console.log(dateFinBox.option('value'));
        return new Date(dateFinBox.option('value')).toJSON();
    }
    function receptionCell_prepared(e) {
        if (e.rowType === "data" && e.column.command === "edit") {
            var isEditing = e.row.isEditing, $links = e.cellElement.find(".dx-link");
            $links.text("");
            if (isEditing) {
                $links.filter(".dx-link-save").addClass("dx-icon-save");
                $links.filter(".dx-link-cancel").addClass("dx-icon-revert");
            } else {
                $links.filter(".dx-link-edit").addClass("dx-icon-edit");
                $links.filter(".dx-link-delete").addClass("dx-icon-trash");
            }
        }
    }
    var imprimerCheckList= function (e) {
        var NumCheckList = e.row.data.NumCheckList;
        window.open(' @Url.Action("CheckListViewer", "MecaniqueManager")?NumCheckList=' + NumCheckList, '_blank').focus();
    }
    var ShowOt= function (e) {
        var popup = $("#AddOt-popup").dxPopup("instance");
        popup.option("contentTemplate", $("#EditerOrdre"));
        popup.show();
    }
    function gridBox_valueChangedCheck(args, setValueMethod) {
        var $dataGrid = $("#embedded-datagridMultipleIdEmployee");
        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(args.value, false);
        }
        setValueMethod(args.value);
    }
    function onSelectionChanged(e, dropDownBoxInstance) {
        var keys = e.selectedRowKeys;
        dropDownBoxInstance.option("value", keys);
    }
    function onCloseBtnClick(args, dropDownBoxInstance) {
        dropDownBoxInstance.close();
    }
</script>