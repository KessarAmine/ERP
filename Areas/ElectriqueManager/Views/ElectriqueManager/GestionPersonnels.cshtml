@using DevKbfSteel.Models;
@using DevExpress.XtraReports.UI;
@using DevKbfSteel.Controllers;
@using DevKbfSteel.Helpers;
@using DevExpress.XtraReports.Parameters;
@using DevKbfSteel.Reports;
@using DevExpress.AspNetCore;
@using DevExtreme.AspNet.Mvc;
@{
    ViewData["Title"] = "Electrique-Gestion du personnel";
    Layout = "~/Views/Shared/_LayoutElectriqueManager.cshtml";
}

@(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.RhListeDesEmployes>()
    .DataSource(ds => ds.Mvc()
     .Controller("GestionPersonnelsElectrique")
     .LoadAction("Get")
     .UpdateAction("Put")
     .Key("Id")
     )
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always)
    .Mode(GridScrollingMode.Virtual))
    .Height("95%")
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
        columns.AddFor(m => m.Nom);
        columns.AddFor(m => m.Prenom);
        columns.AddFor(m => m.CodeSpecialité).Caption("Specialité")
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("GestionPersonnelsElectrique").LoadAction("SpecieliteLookup").Key("Value"))
        .AllowClearing(true)
        .ValueExpr("Value")
        .DisplayExpr("Text")
        );
        columns.AddFor(m => m.CodeEquipe)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("GestionPersonnelsElectrique").LoadAction("EquipeLookup").Key("Value"))
        .AllowClearing(true)
        .ValueExpr("Value")
        .DisplayExpr("Text")
        );
        columns.AddFor(m => m.TelProfesionnel);
        columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Width(110)
            .Buttons(b => {
                b.Add().Name(GridColumnButtonName.Edit);
                b.Add()
                    .Hint("Imprimer suivi personnel")
                    .OnClick(@<text>imprimerSuiviPerso</text>)
                           .Icon("print");
                b.Add()
                    .Hint("Informations")
                    .Icon("fas fa-info")
                    .OnClick(@<text>
                        function showPopUpApp(e) {
                            var popup = $("#Informations-popup").dxPopup("instance");
                            popup.option("contentTemplate", $("#Informations-template"));

                            var Nom = document.getElementsByName("Nom");
                            Object.entries(Nom).forEach(nm => {
                            nm.value = e.row.data.Nom;
                            });

                            console.log(popup);

                            popup.show();
                        }
                     </text>);
            });
    })
    .ColumnChooser(cc => cc.Enabled(true).AllowSearch(true))

    .Editing(editing =>
    {
        editing.AllowUpdating(true);
        editing.Mode(GridEditMode.Popup)
        .Popup(p => p.Title("Editer Employé")
        .ShowTitle(true)
        .Position(pos => pos.My(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).Of(new JS("window"))));
    })
    .Export(e => e.Enabled(true).AllowExportSelectedData(true))
    .FilterRow(f => f.Visible(true))
    .HeaderFilter(headerfilter => headerfilter.Visible(true))
    .GroupPanel(p => p.Visible(true))
    .AllowColumnReordering(true)
    .AllowColumnResizing(true)
    .OnCellPrepared("receptionCell_prepared")
    .Selection(s => s.Mode(SelectionMode.Multiple))
    .MasterDetail(md => md
    .Enabled(true)
    .Template(new TemplateName("SuiviPersonnel"))
    )
    )
@using (Html.DevExtreme().NamedTemplate("SuiviPersonnel"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Suivi des interventions")
                .Template(new TemplateName("SuiviInterventionGrid"))
                .Option("SuiviInterventionGridData", new { id = new JS("data.Id") });
            items.Add()
                .Title("Suivi des entretiens")
                .Template(new TemplateName("SuiviEntretiensGrid"))
                .Option("SuiviInterventionGridData", new { id = new JS("data.Id") });
        })
        )
}
@using (Html.DevExtreme().NamedTemplate("SuiviInterventionGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Models.SuiviInterventionPersonnelRh>()
        .ShowBorders(true)
        .Export(e => e.Enabled(true).AllowExportSelectedData(true))
        .FilterRow(f => f.Visible(true))
        .HeaderFilter(headerfilter => headerfilter.Visible(true))
        .GroupPanel(p => p.Visible(true))
        .AllowColumnReordering(true)
        .AllowColumnResizing(true)
        .OnCellPrepared("receptionCell_prepared")
        .Selection(s => s.Mode(SelectionMode.Multiple))
        .Columns(columns =>
        {
            columns.AddFor(m => m.NumIntervention);
            columns.AddFor(m => m.DateIntervention).Format("yyyy-MM-dd")
            .DataType(GridColumnDataType.DateTime)
            .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
            columns.AddFor(m => m.DureeInervention);
            columns.AddFor(m => m.Remunération).Visible(false);
            columns.AddFor(m => m.CodeMachine).Caption("Machine")
            .Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("GestionPersonnelsElectrique").LoadAction("MachinesLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
                .AllowClearing(true)
                );
            columns.AddFor(m => m.CodeEquipement).Caption("Equipement")
            .Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("GestionPersonnelsElectrique").LoadAction("EquipementsLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
                .AllowClearing(true)
                );             
        columns.Add()
                .Caption("Valorisation")
                .CalculateCellValue(@<text>
                function(data) {
                    return [(data.Remunération * data.DureeInervention)/60];
                }
                </text>).AllowEditing(false);
                })
        .Summary(s => s.TotalItems(items =>
                {
                    items.Add()
                        .SummaryType(SummaryType.Count)
                        .Column("NumIntervention")
                        .ShowInColumn("NumIntervention")
                        .DisplayFormat("Count : {0}");
                    items.Add()
                        .SummaryType(SummaryType.Sum)
                        .Column("DureeInervention")
                        .ShowInColumn("DureeInervention")
                        .DisplayFormat("Total : {0} Mns");
                    items.Add()
                        .SummaryType(SummaryType.Sum)
                        .Column("Valorisation")
                        .ShowInColumn("Valorisation")
                        .DisplayFormat("Total : {0} DZD");
                    items.Add()
                        .SummaryType(SummaryType.Avg)
                        .Column("DureeInervention")
                        .ShowInColumn("CodeMachine")
                        .ValueFormat("#,##0.00")
                        .DisplayFormat("En moyenne : {0} Mns");
                }))
        .DataSource(ds => ds.Mvc()
            .Controller("SuiviEntretienPersonnels")
            .LoadAction("GetSuiviPersonnel")
            .LoadParams(new
            {
                id = new JS("SuiviInterventionGridData.id")
            }
            )
        )
    )
}
@using (Html.DevExtreme().NamedTemplate("SuiviEntretiensGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.SuiviEntretienPersonnels>()
        .ShowBorders(true)
        .Export(e => e.Enabled(true).AllowExportSelectedData(true))
        .FilterRow(f => f.Visible(true))
        .HeaderFilter(headerfilter => headerfilter.Visible(true))
        .GroupPanel(p => p.Visible(true))
        .AllowColumnReordering(true)
        .AllowColumnResizing(true)
        .OnCellPrepared("receptionCell_prepared")
        .Selection(s => s.Mode(SelectionMode.Multiple))
        .Editing(editing =>
        {
            editing.AllowUpdating(true);
            editing.AllowDeleting(true);
            editing.AllowAdding(true);
            editing.Mode(GridEditMode.Popup)
            .Popup(p => p.Title("Editer Demande")
            .ShowTitle(true)
            .Position(pos => pos.My(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).Of(new JS("window"))));
        })

        .Columns(columns =>
        {
            columns.AddFor(m => m.DateIncidant).Format("yyyy-MM-dd")
            .DataType(GridColumnDataType.DateTime)
            .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
            columns.AddFor(m => m.Poste);
            columns.AddFor(m => m.Sujet);
            columns.AddFor(m => m.Lieu);
            columns.AddFor(m => m.Explication);
            columns.AddFor(m => m.Observation).Caption("Observation/Décision");
            columns.Add()
                .Type(GridCommandColumnType.Buttons)
                .Width(110)
                .Buttons(b =>
                {
                    b.Add().Name(GridColumnButtonName.Edit);
                    b.Add().Name(GridColumnButtonName.Delete);
                });
        })
        .DataSource(ds => ds.Mvc()
            .Controller("SuiviEntretienPersonnels")
            .LoadAction("GetSuiviEntretiens")
            .InsertAction("PostEntretien")
            .UpdateAction("PutEntretien")
            .DeleteAction("DeleteEntretien")
            .Key("IdEntretien")
            .LoadParams(new
            {
                id = new JS("SuiviInterventionGridData.id")
            }
            )
        )
    )
}
@(Html.DevExtreme().Popup()
        .ID("Informations-popup")
        .ShowTitle(true)
        .Title("Détails du personnel")
        .Visible(false)
        .DragEnabled(false)
        .CloseOnOutsideClick(true)
)
@using (Html.DevExtreme().NamedTemplate("Informations-template"))
{
    @using (Html.BeginForm("Get", "MethodeManager", FormMethod.Get))
    {
        @(Html.DevExtreme().Form<DevKbfSteel.Entities.RhListeDesEmployes>()
        .ShowValidationSummary(true)
        .Items(items =>
        {
            items.AddGroup()
                    .ColCount(2)
                    .Caption("Informations Personnel")
                    .Items(groupItems =>
                    {
                        groupItems.AddGroup().Items(secondGroupItems => {
                            secondGroupItems.AddSimpleFor(m => m.Nom);
                            secondGroupItems.AddSimpleFor(m => m.TelProfesionnel);
                            secondGroupItems.AddSimpleFor(m => m.CodeSpecialité).Editor(e => e.Lookup()
                            .DataSource(ds => ds.WebApi().Controller("GestionPersonnelsElectrique").LoadAction("SpecieliteLookup").Key("Value"))
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            );
                        });
                        groupItems.AddGroup().Items(secondGroupItems =>
                        {
                            secondGroupItems.AddSimpleFor(m => m.Prenom);
                            secondGroupItems.AddSimpleFor(m => m.Adresse);
                            secondGroupItems.AddSimpleFor(m => m.CodeEquipe).Editor(e => e.Lookup()
                            .DataSource(ds => ds.WebApi().Controller("GestionPersonnelsElectrique").LoadAction("EquipeLookup").Key("Value"))
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            );
                        });
                    });
        })
        )
    }
    @(Html.DevExtreme().TabPanel()
    .Items(items =>
    {
        items.Add()
            .Title("Suivi des interventions")
            .Template(new TemplateName("SuiviInterventionGrid"))
            ;
        items.Add()
            .Title("Suivi des entretiens")
            .Template(new TemplateName("SuiviEntretiensGrid"))
            ;
    })
    )
}


<script>

    function receptionCell_prepared(e) {
        if (e.rowType === "data" && e.column.command === "edit") {
            var isEditing = e.row.isEditing, $links = e.cellElement.find(".dx-link");
            $links.text("");
            if (isEditing) {
                $links.filter(".dx-link-save").addClass("dx-icon-save");
                $links.filter(".dx-link-cancel").addClass("dx-icon-revert");
            } else {
                $links.filter(".dx-link-edit").addClass("dx-icon-edit");
                $links.filter(".dx-link-delete").addClass("dx-icon-trash");
            }
        }
    }
    var imprimerSuiviPerso = function (e) {
        var num = e.row.data.Id;
        window.open(' @Url.Action("FicheSuiviPersonnelViewer", "ElectriqueManager")?id='+num, '_blank').focus();
    }

</script>