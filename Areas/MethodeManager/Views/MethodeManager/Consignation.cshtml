@using DevKbfSteel.Models
@using DevExpress.XtraReports.UI;
@using DevKbfSteel.Controllers
@using DevExpress.XtraReports.Parameters;
@using DevKbfSteel.Reports
@using DevExpress.AspNetCore
@using DevExtreme.AspNet.Mvc
@using DevKbfSteel.Helpers;
@{
    ViewData["Title"] = "Methodes-Consignation";
    Layout = "~/Views/Shared/_LayoutMethodeManager.cshtml";
}
@(Html.DevExtreme().Toolbar()
    .Items(items =>
    {
        items.Add()
           .Widget(w => w
           .Button()
           .Icon("refresh")
           .OnClick("refreshButton_click")
       )
       .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
       .Location(ToolbarItemLocation.Before);

        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("yyyy-MM-dd").ID("FilterDateDebut"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);

        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("yyyy-MM-dd").ID("FilterDateFin"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);

    })
)
@(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.Consignation>()
 .DataSource(ds => ds.Mvc()
     .Controller("Consignation")
     .LoadAction("GetMethodes")
     .InsertAction("PostMethodes")
     .UpdateAction("PutMethodes")
     .DeleteAction("DeleteMethodes")
     .Key("NumConsignation")
     .LoadParams(new {structure = XpertHelper.CodeMethode}))
    .OnRowExpanding(@<text>
        function(e) {
        	e.component.collapseAll(-1);
        }
    </text>)
     .ColumnChooser(cc => cc.Enabled(true).AllowSearch(true))
     .Scrolling(scrolling => scrolling
     .ScrollByContent(true)
     .ShowScrollbar(ShowScrollbarMode.Always)
     .Mode(GridScrollingMode.Virtual))
     .Height("95%")
     .RemoteOperations(true)
     .ID("demandesTravailGrid")
     .NoDataText("Aucune donnée à afficher")
     .CacheEnabled(true)
     .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
 .Columns(columns => {
     columns.AddFor(m => m.Equipement).Caption("Machine").Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("AssOtIntervenants").LoadAction("MachinesLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
            .AllowClearing(true)
            );
     columns.Add()
        .Type(GridCommandColumnType.Buttons)
        .Width(110)
        .Buttons(b => {
        b.Add().Name(GridColumnButtonName.Edit);
        b.Add().Name(GridColumnButtonName.Delete);
        b.Add()
                .Hint("Imprimer demande service")
                .OnClick(@<text>imprimerConsignation</text>)
                .Icon("print");
        });
 })
.MasterDetail(md => md
    .Enabled(true)
    .Template(new TemplateName("ConsignationDetails")))
   .Editing(editing =>
   {
       editing.AllowUpdating(true);
       editing.AllowDeleting(true);
       editing.AllowAdding(true);
       editing.Mode(GridEditMode.Form);
   })
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
)
@using (Html.DevExtreme().NamedTemplate("ConsignationDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Détails")
                .Template(new TemplateName("DétailsGrid"))
                .Option("DétailsGrid", new { id = new JS("data.NumConsignation") });
            items.Add()
                .Title("Déconsignation")
                .Template(new TemplateName("DéconsignationGrid"))
                .Option("DéconsignationGrid", new { id = new JS("data.NumConsignation") });

        })
        )
}
@using (Html.DevExtreme().NamedTemplate("DétailsGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.ConsignationDetails>()
            .DataSource(ds => ds.Mvc()
            .Controller("Consignation")
            .LoadAction("GetDetailsMethodes")
            .InsertAction("PostDetailsMethodes")
            .UpdateAction("PutDetailsMethodes")
            .DeleteAction("DeleteDetailsMethodes")
            .Key("Id")
            .LoadParams(new
            {
                id = new JS("DétailsGrid.id")
            }
            ))
            .RemoteOperations(true)
            .NoDataText("Aucune donnée à afficher")
            .CacheEnabled(true)
            .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
            .Columns(columns => {
                columns.AddFor(m => m.Separation);
                columns.AddFor(m => m.Condamnation);
                columns.AddFor(m => m.Signalsiation);
                columns.AddFor(m => m.Identification);
                columns.AddFor(m => m.Verification);
                columns.AddFor(m => m.AutresOperation);
                columns.AddFor(m => m.MesureSecurite);
                columns.AddFor(m => m.IdChargeConsignation).Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("Consignation").LoadAction("EmployeLookup").Key("Value"))
                .AllowClearing(true)
                .ValueExpr("Value")
                .DisplayExpr("Text")
                ).AllowGrouping(true).AllowEditing(false);
                columns.AddFor(m => m.DateChargeConsignation)
                .DataType(GridColumnDataType.DateTime)
                .Format("yyyy-MM-dd HH:mm")
                .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month)).AllowEditing(false);
                columns.AddFor(m => m.IdChargeTravaux).Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("GestionPersonnelsMethode").LoadAction("NomLookup").Key("Value"))
                .AllowClearing(true)
                .ValueExpr("Value")
                .DisplayExpr("Text")
                )
                .EditCellTemplate(@<text>
                @Html.Partial("DxDropDownBoxCharegeT")
                </text>)
                .AllowGrouping(true);
                columns.AddFor(m => m.DateChargeTravaux)
                .DataType(GridColumnDataType.DateTime)
                .Format("yyyy-MM-dd HH:mm")
                .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
                columns.AddFor(m => m.IdChangementChargeTravaux).Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("GestionPersonnelsMethode").LoadAction("NomLookup").Key("Value"))
                .AllowClearing(true)
                .ValueExpr("Value")
                .DisplayExpr("Text")
                )
                .EditCellTemplate(@<text>
                @Html.Partial("DxDropDownBoxChangementCharegeT")
                </text>)
                .AllowGrouping(true);
                columns.AddFor(m => m.DateChangementChargeTravaux)
                .DataType(GridColumnDataType.DateTime)
                .Format("yyyy-MM-dd HH:mm")
                .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
            })
            .Export(e => e.Enabled(true).AllowExportSelectedData(true))
            .FilterRow(f => f.Visible(true))
            .HeaderFilter(headerfilter => headerfilter.Visible(true))
            .GroupPanel(p => p.Visible(true))
            .AllowColumnReordering(true)
            .AllowColumnResizing(true)
            .OnCellPrepared("receptionCell_prepared")
            .Selection(s => s.Mode(SelectionMode.Multiple))
            .Editing(editing =>
            {
                editing.AllowUpdating(true);
                editing.AllowDeleting(true);
                editing.AllowAdding(true);
                editing.Mode(GridEditMode.Form);
            })
            )
}
@using (Html.DevExtreme().NamedTemplate("DéconsignationGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.Deconsignation>()
            .DataSource(ds => ds.Mvc()
            .Controller("Consignation")
            .LoadAction("GetMethodesDeconsignation")
            .Key("Id")
            .LoadParams(new
            {
                id = new JS("DéconsignationGrid.id")
            }
            )
            )
            .RemoteOperations(true)
            .NoDataText("Aucune donnée à afficher")
            .CacheEnabled(true)
            .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
            .Columns(columns => {
                columns.AddFor(m => m.DateDemandeDeconsignation)
                .DataType(GridColumnDataType.DateTime)
                .Format("yyyy-MM-dd HH:mm")
                .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
                columns.AddFor(m => m.IdDemandeDeConsignation).Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("Consignation").LoadAction("EmployeLookup").Key("Value"))
                .AllowClearing(true)
                .ValueExpr("Value")
                .DisplayExpr("Text")
                ).AllowGrouping(true).AllowEditing(false);
                columns.AddFor(m => m.DateBonDeconsgination)
                .DataType(GridColumnDataType.DateTime)
                .Format("yyyy-MM-dd HH:mm")
                .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
                columns.AddFor(m => m.IdBonDéconsignation).Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("Consignation").LoadAction("EmployeLookup").Key("Value"))
                .AllowClearing(true)
                .ValueExpr("Value")
                .DisplayExpr("Text")
                ).AllowGrouping(true).AllowEditing(false);
            })
    .ColumnChooser(cc => cc
    .Enabled(true)
    .AllowSearch(true))
    .Export(e => e.Enabled(true).AllowExportSelectedData(true))
    .FilterRow(f => f.Visible(true))
    .HeaderFilter(headerfilter => headerfilter.Visible(true))
    .GroupPanel(p => p.Visible(true))
    .AllowColumnReordering(true)
    .AllowColumnResizing(true)
    .OnCellPrepared("receptionCell_prepared")
    .Selection(s => s.Mode(SelectionMode.Multiple))
    .Editing(editing =>
    {
       editing.AllowUpdating(false);
       editing.AllowDeleting(false);
       editing.AllowAdding(false);
       editing.Mode(GridEditMode.Form);
    })

)
}

<script>
    function toolbar_preparingArticlesGrid(e) {
        var dataGrid = e.component;
        e.toolbarOptions.items.unshift({
            location: "after",
            widget: "dxButton",
            options: {
                icon: "plus",
                width: 34,
                onClick: function (e) {
                    var popup = $("#AddArticle-popup").dxPopup("instance");
                    popup.option("contentTemplate", $("#EditerArticle"));
                    popup.show();
                }
            }
        });
    }
    function gridBoxIdEmployee_valueChanged(e) {
        var $dataGrid = $("#embedded-datagridMultipleIdEmployee");
        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(e.value, false);
        }
    }
    function gridBox_valueChanged(args, setValueMethod) {
        var $dataGrid = $("#embedded-datagridMultipleIdEmployee");

        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(args.value, false);
        }
        setValueMethod(args.value);
    }
    function onSelectionChanged(e, dropDownBoxInstance) {
        var keys = e.selectedRowKeys;
        dropDownBoxInstance.option("value", keys);
        console.log(dropDownBoxInstance);
    }
    function refreshButton_click() {
        DevExpress.ui.notify("Rafraichissement en cours!");
        var demandesTravailGrid = $("#demandesTravailGrid").dxDataGrid("instance");
        var demandesTravailDS = demandesTravailGrid.getDataSource();
        demandesTravailGrid.beginCustomLoading("Chargement en cours...");
        demandesTravailDS.reload();
        demandesTravailGrid.refresh();
        demandesTravailGrid.endCustomLoading();
    }
    function dateDebutBox_value() {
        var dateDebutBox = $("#FilterDateDebut").dxDateBox("instance");
        console.log(dateDebutBox.option('value'));
        return new Date(dateDebutBox.option('value')).toJSON();
    }
    function dateFinBox_value() {
        var dateFinBox = $("#FilterDateFin").dxDateBox("instance");
        console.log(dateFinBox.option('value'));
        return new Date(dateFinBox.option('value')).toJSON();
    }
    function receptionCell_prepared(e) {
        if (e.rowType === "data" && e.column.command === "edit") {
            var isEditing = e.row.isEditing, $links = e.cellElement.find(".dx-link");
            $links.text("");
            if (isEditing) {
                $links.filter(".dx-link-save").addClass("dx-icon-save");
                $links.filter(".dx-link-cancel").addClass("dx-icon-revert");
            } else {
                $links.filter(".dx-link-edit").addClass("dx-icon-edit");
                $links.filter(".dx-link-delete").addClass("dx-icon-trash");
            }
        }
    }
    var imprimerConsignation = function (e) {
        var num = e.row.data.NumeroDemandeService;
        window.open(' @Url.Action("DemandeServiceViewer", "ExploitationManager")?id='+num, '_blank').focus();
        }
    function gridBox_valueChanged(args, setValueMethod) {
        var $dataGrid = $("#embedded-datagridMultipleIdEmployee");
        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(args.value, false);
        }
        setValueMethod(args.value);
    }
    function onSelectionChanged(e, dropDownBoxInstance) {
        var keys = e.selectedRowKeys;
        dropDownBoxInstance.option("value", keys);
    }
    function onCloseBtnClick(args, dropDownBoxInstance) {
        dropDownBoxInstance.close();
    }
    function toolbar_preparing(e) {
        var dataGrid = e.component;

        e.toolbarOptions.items.unshift({
            location: "after",
            widget: "dxButton",
            options: {
                icon: "plus",
                width: 34,
                onClick: function (e) {
                    var popup = $("#Add-popup").dxPopup("instance");
                    popup.option("contentTemplate", $("#EditerDemande"));
                    popup.show();
                }
            }
        });
    }
</script>