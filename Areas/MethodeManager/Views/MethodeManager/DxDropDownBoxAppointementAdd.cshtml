@using DevKbfSteel.Models
@using DevExpress.XtraReports.UI;
@using DevKbfSteel.Controllers
@using DevExpress.XtraReports.Parameters;
@using DevKbfSteel.Reports
@using DevExpress.AspNetCore
@using DevExtreme.AspNet.Mvc
@using DevKbfSteel.Helpers;
<script>
    function gridBox_valueChanged(args, setValueMethod) {
        var $dataGrid = $("#embedded-datagridMultipleIdEmployee");
        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(args.value, false);
        }
        setValueMethod(args.value);
    }
    function onSelectionChanged(e, dropDownBoxInstance) {
        var keys = e.selectedRowKeys;
        dropDownBoxInstance.option("value", keys);
    }
    function onCloseBtnClick(args, dropDownBoxInstance) {
        dropDownBoxInstance.close();
    }
</script>
@(Html.DevExtreme().DropDownBox()
                .ValueExpr("Idoperation")
                .DisplayExpr("Description")
                .DataSource(d => d.Mvc()
                .Controller("MethOperations")
                .LoadAction("Get")
                .InsertAction("Post")
                .UpdateAction("Put")
                .DeleteAction("Delete")
                .Key("Idoperation")
                .LoadMode(DataSourceLoadMode.Raw))
                .Placeholder("Select a value...")
                .ShowClearButton(true)
                .OnValueChanged(@"function(args) { gridBox_valueChanged(args, setValue); }")
                .ContentTemplate(@<text>
                    @(Html.DevExtreme().DataGrid()
                        .ID("embedded-datagridMultipleIdEmployee")
                        .DataSource(new JS(@"component.getDataSource()"))
                        .Columns(columns =>
                        {
                            columns.Add().DataField("Description");
                            columns.Add().DataField("NumMachine").Lookup(lookup => lookup
                            .DataSource(ds => ds.Mvc().Controller("MethOperations").LoadAction("MachinesLookup").Key("Value"))
                            .AllowClearing(true)
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            );
                            columns.Add().DataField("Equipement")
                             .Lookup(lookup => lookup
                                .DataSource(ds => ds.Mvc().Controller("MethOperations").LoadAction("MaterielLookup").Key("Value"))
                                .AllowClearing(true)
                                .ValueExpr("Value")
                                .DisplayExpr("Text")
                            );
                            columns.Add().DataField("Unité")
                            .Lookup(lookup => lookup
                            .DataSource(ds => ds.WebApi().Controller("MethOperations").LoadAction("UniteLookup").Key("Value"))
                            .AllowClearing(true)
                            .ValueExpr("Value")
                            .DisplayExpr("Text")
                            );
                            columns.Add().DataField("Fréquence");
                            columns.Add()
                                .Type(GridCommandColumnType.Buttons)
                                .Width(110)
                                .Buttons(b =>
                                {
                                    b.Add().Name(GridColumnButtonName.Edit);
                                    b.Add().Name(GridColumnButtonName.Delete);
                                });
                        })
                        .HoverStateEnabled(true)
                        .Paging(p => p.PageSize(10))
                        .FilterRow(f => f.Visible(true))
                        .Scrolling(s => s.Mode(GridScrollingMode.Infinite))
                        .Height(345)
                        .Selection(s => s.Mode(SelectionMode.Single))
                        .SelectedRowKeys(new JS("component.option('value')"))
                        .OnSelectionChanged(@"function(args) { onSelectionChanged(args, component); }")
                    )
                    @(Html.DevExtreme().Button()
                         .ElementAttr(new { style = "margin-top:10px;float:right" })
                         .Text("Close")
                         .OnClick(@"function(args) { onCloseBtnClick(args, component); }"))
                </text>)
)