@using DevKbfSteel.Models
@using DevExpress.XtraReports.UI;
@using DevKbfSteel.Controllers
@using DevExpress.XtraReports.Parameters;
@using DevKbfSteel.Reports
@using DevExpress.AspNetCore
@using DevExtreme.AspNet.Mvc
@using DevKbfSteel.Helpers;

@{
    ViewData["Title"] = "Méthode-Demandes Travail Envoyées";
    Layout = "~/Views/Shared/_LayoutMethodeManager.cshtml";
}
@(Html.DevExtreme().Toolbar()
    .Items(items =>
    {
        items.Add()
           .Widget(w => w
           .Button()
           .Icon("refresh")
           .OnClick("refreshButton_click")
       )
       .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
       .Location(ToolbarItemLocation.Before);

        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("yyyy-MM-dd").ID("FilterDateDebut"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);

        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("yyyy-MM-dd").ID("FilterDateFin"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);
    })
)
@(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.DemandeTravail>()
.DataSource(ds => ds.Mvc()
 .Controller("DemandeTravails")
 .LoadAction("GetSent")
 .InsertAction("PostMethodes")
 .UpdateAction("Put")
 .DeleteAction("Delete")
 .Key("NumDt")
 .LoadParams(new { dateDebut = new JS("dateDebutBox_value"), dateFin = new JS("dateFinBox_value"), CodeDemandeur = XpertHelper.CodeMethode })
)
.ColumnChooser(cc => cc.Enabled(true).AllowSearch(true))
.RemoteOperations(true)
.ID("demandesTravailGrid")
.NoDataText("Aucune donnée à afficher")
.CacheEnabled(true)
.SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
.Height("95%")
.Scrolling(scrolling => scrolling
.ScrollByContent(true)
.ShowScrollbar(ShowScrollbarMode.Always)
.Mode(GridScrollingMode.Virtual))
.Columns(columns => {
columns.AddFor(m => m.DateDt)
    .DataType(GridColumnDataType.DateTime)
    .Format("yyyy-MM-dd")
    .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
columns.AddFor(m => m.TravailDemandee);
columns.AddFor(m => m.Note);
columns.AddFor(m => m.Journee);
columns.AddFor(m => m.Semaine);
columns.AddFor(m => m.RefMachine).Caption("Installation")
    .Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("DemandeTravails").LoadAction("MachinesLookup").Key("Value"))
    .AllowClearing(true)
    .ValueExpr("Value")
    .DisplayExpr("Text")
    );
columns.AddFor(m => m.CodeArret).Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("DemandeTravails").LoadAction("ArreteProductionLookup").Key("Value"))
    .ValueExpr("Value")
    .DisplayExpr("Text")
    .AllowClearing(true)
    );
columns.AddFor(m => m.CodeReceveur).Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("DemandeTravails").LoadAction("StructureLookup").Key("Value"))
    .ValueExpr("Value")
    .DisplayExpr("Text")
    .AllowClearing(true)
);
columns.AddFor(m => m.CodeUrgence).Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("DemandeTravails").LoadAction("UrgenceTravailleLookup").Key("Value"))
    .ValueExpr("Value")
    .DisplayExpr("Text")
    .AllowClearing(true)
     );
columns.AddFor(m => m.MachineOptionel).Caption("Autre Machine");
columns.Add()
    .Type(GridCommandColumnType.Buttons)
    .Width(110)
    .Buttons(b => {
    b.Add().Name(GridColumnButtonName.Edit);
    b.Add().Name(GridColumnButtonName.Delete);
    b.Add()
            .Hint("Imprimer")
            .OnClick(@<text>imprimerDemandeTravail</text>)
                   .Icon("print");
    });
})
.Editing(editing =>
   {
       editing.AllowUpdating(true);
       editing.AllowDeleting(true);
       editing.AllowAdding(true);
       editing.Mode(GridEditMode.Popup)
        .Popup(p => p.Title("Editer Demande")
        .ShowTitle(true)
        .Position(pos => pos.My(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).Of(new JS("window"))));
   })
    .MasterDetail(md => md
    .Enabled(true)
    .Template(new TemplateName("RapportInterventionDetails"))
    )
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple)
)
)

@using (Html.DevExtreme().NamedTemplate("RapportInterventionDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Ordre de travail")
                .Template(new TemplateName("OrdreTravailGrid"))
                .Option("masterGridData", new {idDt = new JS("data.NumDt"),idNumMachine = new JS("data.CodeMachine")});
            items.Add()
                .Title("Rapport Intervention")
                .Template(new TemplateName("RapportInterventionGrid"))
                .Option("masterGridData", new {id = new JS("data.NumDt")});
        })
    )
}
@using (Html.DevExtreme().NamedTemplate("RapportInterventionGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.RapportIntervention>()
        .ShowBorders(true)
        .LoadPanel(l => l.Enabled(false))
        .Columns(columns =>
        {
            columns.AddFor(m => m.DateIntervention).Format("yyyy-MM-dd")
            .DataType(GridColumnDataType.DateTime)
            .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
            columns.AddFor(m => m.DebutIntervention).Format("yyyy-MM-dd HH:mm")
            .DataType(GridColumnDataType.DateTime)
            .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
            columns.AddFor(m => m.DureeIntervention);
            columns.AddFor(m => m.CompteRendu);
            columns.AddFor(m => m.Observation);
            columns.Add()
                .Type(GridCommandColumnType.Buttons)
                .Width(110)
                .Buttons(b =>
                {
                    b.Add().Name(GridColumnButtonName.Edit);
                    b.Add().Name(GridColumnButtonName.Delete);
                });
        })
        .Export(e => e.Enabled(true).AllowExportSelectedData(true))
        .FilterRow(f => f.Visible(true))
        .HeaderFilter(headerfilter => headerfilter.Visible(true))
        .GroupPanel(p => p.Visible(true))
        .AllowColumnReordering(true)
        .AllowColumnResizing(true)
        .OnCellPrepared("receptionCell_prepared")
        .Selection(s => s.Mode(SelectionMode.Multiple))
        .MasterDetail(md => md
        .Enabled(true)
        .Template(new TemplateName("IntervenatsDetails"))
        )
        .DataSource(ds => ds.Mvc()
            .Controller("RapportInterventionsMethode")
            .LoadAction("GetDt")
            .Key("NumIntervention")
            .LoadParams(new { id = new JS("masterGridData.id")}))
        )
}
@using (Html.DevExtreme().NamedTemplate("OrdreTravailGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.OrdreTravail>()
    .DataSource(ds => ds.Mvc()
    .Controller("OrdresTravailMethode")
    .LoadAction("GetSentInDt")
    .Key("NumOt")
    .LoadParams(new
    {
        idDt = new JS("masterGridData.idDt"),
        idNumMachine = new JS("masterGridData.idNumMachine")
    }
    )
    )
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
    columns.AddFor(m => m.DateOt)
    .Format("yyyy-MM-dd")
    .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));

    columns.AddFor(m => m.HeureInstallation).Format("yyyy-MM-dd HH:mm")
    .DataType(GridColumnDataType.DateTime)
    .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));

    columns.AddFor(m => m.CodeMaintenance).Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("OrdresTravailMethode").LoadAction("TypeMaintenanceLookup").Key("Value"))
    .ValueExpr("Value")
    .DisplayExpr("Text")
    .AllowClearing(true)
    );
    columns.AddFor(m => m.NumEquipement).Caption("Equipement")
    .Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("OrdresTravailMethode").LoadAction("EquipementsLookup").Key("Value"))
    .AllowClearing(true)
    .ValueExpr("Value")
    .DisplayExpr("Text")
    );
    columns.Add()
    .Type(GridCommandColumnType.Buttons)
    .Width(110)
    .Buttons(b => {
    b.Add().Name(GridColumnButtonName.Edit);
    b.Add().Name(GridColumnButtonName.Delete);
    b.Add()
        .Hint("Imprimer Ordre")
        .OnClick(@<text>imprimerOrdreTravail</text>)
                           .Icon("print");
    });


    })
    .MasterDetail(md => md
    .Enabled(true)
    .Template(new TemplateName("OrdreTravailDetails"))
    )
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple)
)
)

}
@using (Html.DevExtreme().NamedTemplate("OrdreTravailDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Traveaux")
                .Template(new TemplateName("TachesGrid"))
                .Option("TachesGrid", new { id = new JS("data.NumOt")});
            items.Add()
                .Title("Outillage")
                .Template(new TemplateName("OutillageGrid"))
                .Option("OutillageGrid", new { id = new JS("data.NumOt") });
        })
        )
}
@using (Html.DevExtreme().NamedTemplate("IntervenatsDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Les intervenants")
                .Template(new TemplateName("IntervenantsGrid"))
                .Option("RapportGridData", new { id = new JS("data.NumIntervention") });

        })
        )
}
@using (Html.DevExtreme().NamedTemplate("IntervenantsGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.AssOtIntervenants>()
            .DataSource(ds => ds.Mvc()
            .Controller("AssOtIntervenants")
            .LoadAction("Get")
            .Key("Id")
            .LoadParams(new
            {
                id = new JS("RapportGridData.id")
            }
            )
            )
            .RemoteOperations(true)
            .NoDataText("Aucune donnée à afficher")
            .CacheEnabled(true)
            .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
            .Columns(columns => {

            columns.AddFor(m => m.CodeIntervenant)
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("GestionPersonnelsMethode").LoadAction("NomLookupIntervenant").Key("Value"))
            .AllowClearing(true)
            .ValueExpr("Value")
            .DisplayExpr("Text"))
            .AllowGrouping(true);
                columns.AddFor(m => m.CodeMachine).Caption("Machine").Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("AssOtIntervenants").LoadAction("MachinesLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
                .AllowClearing(true)
                 );
                columns.AddFor(m => m.CodeEquipement).Caption("Equipement").Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("AssOtIntervenants").LoadAction("EquipementsLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
                .AllowClearing(true)
                 );
                columns.Add()
                    .Type(GridCommandColumnType.Buttons)
                    .Width(110)
                    .Buttons(b => {
                    b.Add().Name(GridColumnButtonName.Edit);
                    b.Add().Name(GridColumnButtonName.Delete);
                });


    })
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
)

}
@using (Html.DevExtreme().NamedTemplate("TachesGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.AssOtTraveaux>()
            .DataSource(ds => ds.Mvc()
            .Controller("AssOtTraveaux")
            .LoadAction("Get")
            .Key("Id")
            .LoadParams(new
            {
                id = new JS("TachesGrid.id")
            }
            )
            )
            .RemoteOperations(true)
            .NoDataText("Aucune donnée à afficher")
            .CacheEnabled(true)
            .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
            .Columns(columns => {
                columns.AddFor(m => m.CodeEquipement).Caption("Equipement")
                .Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("AssOtTraveaux").LoadAction("EquipementsLookup").Key("Value"))
                .AllowClearing(true)
                .ValueExpr("Value")
                .DisplayExpr("Text")
                );
                columns.AddFor(m => m.CodeMachine).Caption("Machine")
                .Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("AssOtTraveaux").LoadAction("MachinesLookup").Key("Value"))
                .AllowClearing(true)
                .ValueExpr("Value")
                .DisplayExpr("Text")
                );
                columns.AddFor(m => m.Qte);
                columns.AddFor(m => m.TypeTraveaux).Caption("Travail")
                .Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("AssOtTraveaux").LoadAction("TypeTraveauxLookup").Key("Value"))
                .AllowClearing(true)
                .ValueExpr("Value")
                .DisplayExpr("Text")
                );
                columns.AddFor(m => m.Autres);
            })
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
)
}
@using (Html.DevExtreme().NamedTemplate("OutillageGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.AssOtOutils>()
    .DataSource(ds => ds.Mvc()
    .Controller("AssOtOutils")
    .LoadAction("Get")
    .Key("Id")
    .LoadParams(new {id = new JS("OutillageGrid.id")}))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
        columns.AddFor(m => m.CodeOutils).Caption("PDR").Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("AssOtOutils").LoadAction("OutilsLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
            );
    })
    .Export(e => e.Enabled(true).AllowExportSelectedData(true))
    .FilterRow(f => f.Visible(true))
    .HeaderFilter(headerfilter => headerfilter.Visible(true))
    .GroupPanel(p => p.Visible(true))
    .AllowColumnReordering(true)
    .AllowColumnResizing(true)
    .OnCellPrepared("receptionCell_prepared")
    .Selection(s => s.Mode(SelectionMode.Multiple))
)
}

<script>
    function refreshButton_click() {
        DevExpress.ui.notify("Rafraichissement en cours!");
        var demandesTravailGrid = $("#demandesTravailGrid").dxDataGrid("instance");
        var demandesTravailDS = demandesTravailGrid.getDataSource();
        demandesTravailGrid.beginCustomLoading("Chargement en cours...");
        demandesTravailDS.reload();
        demandesTravailGrid.refresh();
        demandesTravailGrid.endCustomLoading();
    }
    function addButton_click() {
        DevExpress.ui.notify("Ajouter une demande!");
        window.location.href = '@Url.Action("NewReception")';
    }
    function dateDebutBox_value() {
        var dateDebutBox = $("#FilterDateDebut").dxDateBox("instance");
        console.log(dateDebutBox.option('value'));
        return new Date(dateDebutBox.option('value')).toJSON();
}
    function dateFinBox_value() {
        var dateFinBox = $("#FilterDateFin").dxDateBox("instance");
        console.log(dateFinBox.option('value'));
        return new Date(dateFinBox.option('value')).toJSON();
    }
    function receptionCell_prepared(e) {
        if (e.rowType === "data" && e.column.command === "edit") {
            var isEditing = e.row.isEditing, $links = e.cellElement.find(".dx-link");
            $links.text("");
            if (isEditing) {
                $links.filter(".dx-link-save").addClass("dx-icon-save");
                $links.filter(".dx-link-cancel").addClass("dx-icon-revert");
            } else {
                $links.filter(".dx-link-edit").addClass("dx-icon-edit");
                $links.filter(".dx-link-delete").addClass("dx-icon-trash");
            }
        }
    }
    var imprimerDemandeTravail = function (e) {
    var num = e.row.data.NumDt;
    window.open( ' @Url.Action("DemandeTravailViewer", "MethodeManager")?id='+num, '_blank').focus();
    }
    var imprimerOrdreTravail = function (e) {
    var num = e.row.data.NumOt;
    window.open( ' @Url.Action("OrdreTravailViewer", "MethodeManager")?id='+num, '_blank').focus();

    }
</script>