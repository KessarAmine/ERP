@using DevKbfSteel.Models
@using DevExpress.XtraReports.UI;
@using DevKbfSteel.Controllers
@using DevExpress.XtraReports.Parameters;
@using DevKbfSteel.Reports
@using DevExpress.AspNetCore
@using DevExtreme.AspNet.Mvc
@using DevKbfSteel.Helpers;
@{
    ViewData["Title"] = "Contrats des employés";
    Layout = "~/Views/Shared/_LayoutRhManager.cshtml";
}
@(Html.DevExtreme().Toolbar()
    .Items(items =>
    {
        items.Add()
           .Widget(w => w
           .Button()
           .Icon("refresh")
           .OnClick("refreshButton_click")
       )
       .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
       .Location(ToolbarItemLocation.Before);
    }
    )
)
@(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.RhContratsEmployes>()
.DataSource(ds => ds.Mvc()
 .Controller("RhContratsEmployes")
 .LoadAction("Get")
 .InsertAction("Post")
 .UpdateAction("Put")
 .DeleteAction("Delete")
 .Key("Id")
 )
.Scrolling(scrolling => scrolling
.ScrollByContent(true)
.ShowScrollbar(ShowScrollbarMode.Always)
.Mode(GridScrollingMode.Virtual))
.Height("95%")
.RemoteOperations(true)
.ID("RhContratsDesEmployesGrid")
.NoDataText("Aucune donnée à afficher")
.CacheEnabled(true)
.SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
.Columns(columns => {

columns.AddFor(m => m.IdEmployee)
    .Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("RhContratsEmployes").LoadAction("EmployeLookup").Key("Value"))
    .AllowClearing(true)
    .ValueExpr("Value")
    .DisplayExpr("Text")
    )
    .EditCellTemplate(@<text>
        @Html.Partial("DxDropDownBox")
        </text>)
        .AllowGrouping(true);

        columns.AddFor(m => m.DateAmbouche).Format("d/M/yyyy")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
        columns.AddFor(m => m.Periode);
        columns.AddFor(m => m.DateFinAmbouche).Format("d/M/yyyy").AllowEditing(false)
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));

        columns.AddFor(m => m.UniteRecrutement)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("RhContratsEmployes").LoadAction("UniteRecrutementLookup").Key("Value"))
        .AllowClearing(true)
        .ValueExpr("Value")
        .DisplayExpr("Text")
        );
        columns.AddFor(m => m.TypeContrat)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("RhContratsEmployes").LoadAction("TypeContratLookup").Key("Value"))
        .AllowClearing(true)
        .ValueExpr("Value")
        .DisplayExpr("Text")
        );

        columns.AddFor(m => m.Etat).AllowEditing(false)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("RhContratsEmployes").LoadAction("EtatLookup").Key("Value"))
        .AllowClearing(true)
        .ValueExpr("Value")
        .DisplayExpr("Text")
        );

        columns.Add()
        .Type(GridCommandColumnType.Buttons)
        .Width(110)
        .Buttons(b => {
            b.Add().Name(GridColumnButtonName.Edit);
            b.Add().Name(GridColumnButtonName.Delete);
            b.Add()
                .Hint("Imprimer")
                .OnClick(@<text>imprimerContrat</text>)
                .Icon("print");
        });
    })
    .Editing(editing =>
    {
        editing.AllowUpdating(true);
        editing.AllowDeleting(true);
        editing.AllowAdding(true);
        editing.Mode(GridEditMode.Popup)
        .Popup(p => p.Title("Contrat Infos")
        .ShowTitle(true)
        .Position(pos => pos
        .My(HorizontalAlignment.Center, VerticalAlignment.Center)
        .At(HorizontalAlignment.Center, VerticalAlignment.Center)
        .Of(new JS("window"))))
        .Form(f => f.Items(items =>
        {
            items.AddGroup()
                .ColCount(2)
                .ColSpan(2)
                .Items(groupItems =>
                {
                    groupItems.AddSimpleFor(m => m.IdEmployee)
                    .ColSpan(2);
                    groupItems.AddSimpleFor(m => m.TypeContrat);
                    groupItems.AddSimpleFor(m => m.Periode);
                    groupItems.AddSimpleFor(m => m.UniteRecrutement);
                    groupItems.AddSimpleFor(m => m.DateAmbouche);
                });
        }));
    })
    .Export(e => e.Enabled(true).AllowExportSelectedData(true))
    .FilterRow(f => f.Visible(true))
    .HeaderFilter(headerfilter => headerfilter.Visible(true))
    .GroupPanel(p => p.Visible(true))
    .AllowColumnReordering(true)
    .AllowColumnResizing(true)
    .OnCellPrepared("receptionCell_prepared")
    .Selection(s => s.Mode(SelectionMode.Multiple))
    )

@using (Html.DevExtreme().NamedTemplate("EmbeddedDataGridMultipleIdEmployee"))
{
    @(Html.DevExtreme().DataGrid()
        .ID("embedded-datagridMultipleIdEmployee")
        .DataSource(new JS(@"component.getDataSource()"))
        .Columns(columns => {
            columns.Add().DataField("Nom");
            columns.Add().DataField("Prenom");
            columns.Add().DataField("Departement")
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("RhListeDesEmployes").LoadAction("DepartementsLookup").Key("Value"))
            .AllowClearing(true)
            .ValueExpr("Value")
            .DisplayExpr("Text")
            );})
        .HoverStateEnabled(true)
        .Paging(p => p.PageSize(10))
        .FilterRow(f => f.Visible(true))
        .Scrolling(s => s.Mode(GridScrollingMode.Infinite))
        .Height(345)
        .Selection(s => s.Mode(SelectionMode.Single))
        .SelectedRowKeys(new JS("component.option('value')"))
        .OnSelectionChanged(@"function(args) { onSelectionChanged(args, component); }")
    )
}

<script>

    function gridBoxIdEmployee_valueChanged(e) {
        var $dataGrid = $("#embedded-datagridMultipleIdEmployee");
        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(e.value, false);
        }
    }

    function gridBox_valueChanged(args, setValueMethod) {
        var $dataGrid = $("#embedded-datagridMultipleIdEmployee");

        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(args.value, false);
        }
        setValueMethod(args.value);
    }
    function onSelectionChanged(e, dropDownBoxInstance) {
        var keys = e.selectedRowKeys;
        dropDownBoxInstance.option("value", keys);
        console.log(dropDownBoxInstance);
    }

    function refreshButton_click() {
        DevExpress.ui.notify("Rafraichissement en cours!");
        var demandesTravailGrid = $("#RhContratsDesEmployesGrid").dxDataGrid("instance");
        var demandesTravailDS = demandesTravailGrid.getDataSource();
        demandesTravailGrid.beginCustomLoading("Chargement en cours...");
        demandesTravailDS.reload();
        demandesTravailGrid.refresh();
        demandesTravailGrid.endCustomLoading();
    }

    function addButton_click() {
        DevExpress.ui.notify("Ajouter une demande!");
        window.location.href = '@Url.Action("NewReception")';
    }

    function dateDebutBox_value() {
        var dateDebutBox = $("#FilterDateDebut").dxDateBox("instance");
        console.log(dateDebutBox.option('value'));
        return new Date(dateDebutBox.option('value')).toJSON();
    }

    function dateFinBox_value() {
        var dateFinBox = $("#FilterDateFin").dxDateBox("instance");
        console.log(dateFinBox.option('value'));
        return new Date(dateFinBox.option('value')).toJSON();
    }

    function receptionCell_prepared(e) {
        if (e.rowType === "data" && e.column.command === "edit") {
            var isEditing = e.row.isEditing, $links = e.cellElement.find(".dx-link");
            $links.text("");
            if (isEditing) {
                $links.filter(".dx-link-save").addClass("dx-icon-save");
                $links.filter(".dx-link-cancel").addClass("dx-icon-revert");
            } else {
                $links.filter(".dx-link-edit").addClass("dx-icon-edit");
                $links.filter(".dx-link-delete").addClass("dx-icon-trash");
            }
        }
        if (e.rowType === "data") {
            var dangerColor = "#f54542";
            if (e.column.dataField == "DateFinAmbouche") {
                var Today = new Date();
                var DateFin = new Date();
                DateFin = e.value;
                var limit = @XpertHelper.FacteurContratEnding;
                Today.setHours(0, 0, 0, 0)
                DateFin.setHours(0, 0, 0, 0)
                var diffInMs = Math.abs(DateFin - Today);
                diffInMs = diffInMs / (1000 * 60 * 60 * 24);

                if (diffInMs <= limit) {
                    $(e.cellElement).get(0).style.backgroundColor = dangerColor;
                }
            }
        }
    }
    var imprimerContrat = function (e) {
        var TypeContrat = e.row.data.TypeContrat;
        var num = e.row.data.Id;
        if (TypeContrat == 4)//Stagiere
        {
            window.open(' @Url.Action("ContratTravailStagiereViewer", "RhManager")?id='+num, '_blank').focus();
        }
        else
        {
            window.open(' @Url.Action("ContratTravailViewer", "RhManager")?id='+num, '_blank').focus();
        }
    }
</script>