@using DevKbfSteel.Models
@using DevExpress.XtraReports.UI;
@using DevKbfSteel.Controllers
@using DevExpress.XtraReports.Parameters;
@using DevKbfSteel.Reports
@using DevExpress.AspNetCore
@using DevExtreme.AspNet.Mvc
@using DevKbfSteel.Helpers;
@using DevKbfSteel.Areas.GestionnaireMagasin.Models;

@{
    ViewData["Title"] = "Demandes Achats";
    Layout = "~/Views/Shared/_LayoutGestionnaireMagasin.cshtml";
}
@(Html.DevExtreme().Toolbar()
    .Items(items =>
    {
        items.Add()
           .Widget(w => w
           .Button()
           .Icon("refresh")
           .OnClick("refreshButton_click")
       )
       .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
       .Location(ToolbarItemLocation.Before);

        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("yyyy-MM-dd").ID("FilterDateDebut"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);

        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("yyyy-MM-dd").ID("FilterDateFin"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);

    }
    )
)
@(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.ApproDemandeAchats>()
    .ID("DemandeAchatsGrid")
    .DataSource(ds => ds.Mvc()
    .Controller("ApproDemandeAchats")
    .InsertAction("Post")
    .UpdateAction("Put")
    .DeleteAction("Delete")
    .LoadAction("Get")
    .LoadParams(new { dateDebut = new JS("dateDebutBox_value"), dateFin = new JS("dateFinBox_value") })
    .Key("NumDemandeAchat")
    )
.Scrolling(scrolling => scrolling
.ScrollByContent(true)
.ShowScrollbar(ShowScrollbarMode.Always)
.Mode(GridScrollingMode.Virtual))
.Height("95%")
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
    columns.AddFor(m => m.NumDemandeFourniture).AllowEditing(false);
    columns.AddFor(m => m.DateDemandeAchat).Caption("Date demande")
        .Format("dd-MM-yyyy")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month)).AllowEditing(true);
    columns.AddFor(m => m.CodeNatureDemandeAchat).Caption("Nature")
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("ApproDemandeAchats").LoadAction("ApproNatureDemandeAchatLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true));
    columns.AddFor(m => m.MotifDemandeAchat).Caption("Motif");
    columns.AddFor(m => m.UrgenceDemande).Caption("Urgent ?")
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("ApproDemandeAchats").LoadAction("UregenceDemandeLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true));

    columns.AddFor(m => m.StatutDemandeAchat).Caption("Status")
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("ApproDemandeAchats").LoadAction("ApproStatutLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)).AllowEditing(false);
    columns.Add()
        .Type(GridCommandColumnType.Buttons)
        .Width(110)
        .Buttons(b => {
        b.Add().Name(GridColumnButtonName.Edit);
        b.Add().Name(GridColumnButtonName.Delete);
        b.Add()
            .Hint("Imprimer")
            .OnClick(@<text>imprimerDemandeAchat</text>)
                .Icon("print");
            });
        })
.OnRowExpanding("CollpaseAll")
.OnRowExpanded("refreshButton_click")
.ColumnChooser(cc => cc
.Enabled(true)
.AllowSearch(true))
.Export(e => e.Enabled(true).AllowExportSelectedData(true))
.FilterRow(f => f.Visible(true))
.HeaderFilter(headerfilter => headerfilter.Visible(true))
.GroupPanel(p => p.Visible(true))
.MasterDetail(md => md
.Enabled(true)
.Template(new TemplateName("DemandeAchatDetails")))
.AllowColumnReordering(true)
.AllowColumnResizing(true)
.OnCellPrepared("receptionCell_prepared")
.Selection(s => s.Mode(SelectionMode.Multiple))
.Editing(editing =>
{
    editing.AllowUpdating(true);
    editing.AllowDeleting(true);
    editing.AllowAdding(true);
    editing.Mode(GridEditMode.Form);
})
)
@using (Html.DevExtreme().NamedTemplate("DemandeAchatDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Détails demande achat")
                .Template(new TemplateName("ArticlesDemandeAchatGrid"))
                .Option("ArticlesDemandeAchatGrid", new { id = new JS("data.NumDemandeAchat") });
        })
        )
}
@using (Html.DevExtreme().NamedTemplate("ArticlesDemandeAchatGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.ApproArticlesDemandes>()
            .DataSource(ds => ds.Mvc()
            .Controller("ApproDemandeAchats")
            .LoadAction("GetArticles")
            .InsertAction("PostArticles")
            .UpdateAction("PutArticles")
            .DeleteAction("DeleteArticles")
            .LoadParams(new
            {
                id = new JS("ArticlesDemandeAchatGrid.id")
            }
            )
            .Key("Id")
            )
            .RemoteOperations(true)
            .NoDataText("Aucune donnée à afficher")
            .CacheEnabled(true)
            .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
            .Columns(columns => {
                columns.AddFor(m => m.CodeArticle).AllowEditing(false);
                columns.AddFor(m => m.CodeArticle).Caption("Article")
                .Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("ApproDemandesFournitures").LoadAction("DesignationArticleLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
                .AllowClearing(true)
                )
                .EditCellTemplate(@<text> @Html.Partial("DxDropDownBoxArticlesFourniture") </text>);
                columns.AddFor(m => m.ArticleNonGere);
                columns.AddFor(m => m.Qte);
                columns.AddFor(m => m.QteValable).AllowEditing(false);
            })
   .ColumnChooser(cc => cc
   .Enabled(true)
   .AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(true);
       editing.AllowDeleting(true);
       editing.AllowAdding(true);
       editing.Mode(GridEditMode.Form);
   })
)
}

<script>
    function gridBoxIdEmployee_valueChanged(e) {
        var $dataGrid = $("#embedded-datagridMultipleIdEmployee");
        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(e.value, false);
        }
    }
    function gridBox_valueChanged(args, setValueMethod) {
        var $dataGrid = $("#embedded-datagridMultipleIdEmployee");

        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(args.value, false);
        }
        setValueMethod(args.value);
    }
    function onSelectionChanged(e, dropDownBoxInstance) {
        var keys = e.selectedRowKeys;
        dropDownBoxInstance.option("value", keys);
        console.log(dropDownBoxInstance);
    }
    function refreshButton_click() {
        DevExpress.ui.notify("Rafraichissement en cours!");
        var demandesTravailGrid = $("#DemandeAchatsGrid").dxDataGrid("instance");
        var demandesTravailDS = demandesTravailGrid.getDataSource();
        demandesTravailGrid.beginCustomLoading("Chargement en cours...");
        demandesTravailDS.reload();
        demandesTravailGrid.refresh();
        demandesTravailGrid.endCustomLoading();
    }
    function dateDebutBox_value() {
        var dateDebutBox = $("#FilterDateDebut").dxDateBox("instance");
        console.log(dateDebutBox.option('value'));
        return new Date(dateDebutBox.option('value')).toJSON();
    }
    function dateFinBox_value() {
        var dateFinBox = $("#FilterDateFin").dxDateBox("instance");
        console.log(dateFinBox.option('value'));
        return new Date(dateFinBox.option('value')).toJSON();
    }
    function CollpaseAll(e) {
        e.component.collapseAll(-1);
    }

    function receptionCell_prepared(e) {
        if (e.rowType === "data" && e.column.command === "edit") {
            var isEditing = e.row.isEditing, $links = e.cellElement.find(".dx-link");
            $links.text("");
            if (isEditing) {
                $links.filter(".dx-link-save").addClass("dx-icon-save");
                $links.filter(".dx-link-cancel").addClass("dx-icon-revert");
            } else {
                $links.filter(".dx-link-edit").addClass("dx-icon-edit");
                $links.filter(".dx-link-delete").addClass("dx-icon-trash");
            }
        }
    }

    var imprimerDemandeAchat = function (e) {
        var num = e.row.data.NumDemandeAchat;
        window.open(' @Url.Action("DemandeAchatViewer", "GestionnaireMagasin")?id='+num, '_blank').focus();
        }
    function gridBox_valueChanged(args, setValueMethod) {
        var $dataGrid = $("#embedded-datagridMultipleIdEmployee");
        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(args.value, false);
        }
        setValueMethod(args.value);
    }
    function onSelectionChanged(e, dropDownBoxInstance) {
        var keys = e.selectedRowKeys;
        dropDownBoxInstance.option("value", keys);
    }
    function onCloseBtnClick(args, dropDownBoxInstance) {
        dropDownBoxInstance.close();
    }
</script>