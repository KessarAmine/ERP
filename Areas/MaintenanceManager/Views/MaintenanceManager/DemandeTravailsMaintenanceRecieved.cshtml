@using DevKbfSteel.Models
@using DevExpress.XtraReports.UI;
@using DevKbfSteel.Controllers
@using DevExpress.XtraReports.Parameters;
@using DevKbfSteel.Reports
@using DevExpress.AspNetCore
@using DevExtreme.AspNet.Mvc
@{
    ViewData["Title"] = "Demandes Travail Maintenance Recieved";
    Layout = "~/Views/Shared/_LayoutMaintenanceManager.cshtml";
}
@(Html.DevExtreme().Toolbar()
    .Items(items =>
    {
        items.Add()
           .Widget(w => w
           .Button()
           .Icon("refresh")
           .OnClick("refreshButton_click")
       )
       .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
       .Location(ToolbarItemLocation.Before);

        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("dd/MM/yyyy").ID("FilterDateDebut"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);

        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("dd/MM/yyyy").ID("FilterDateFin"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);

        items.Add()
        .Widget(w => w.Button()
            .Icon("plus")
            .OnClick("addButton_click")

    )

    .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
    .Location(ToolbarItemLocation.Before);

    }
    )
)
@(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.DemandeTravail>()
 .DataSource(ds => ds.Mvc()
     .Controller("DemandeTravailsMaintenance")
     .LoadAction("GetRecieved")
     .InsertAction("Post")
     .UpdateAction("Put")
     .DeleteAction("Delete")
     .Key("NumDt")
     .LoadParams(new { dateDebut = new JS("dateDebutBox_value"), dateFin = new JS("dateFinBox_value") })
 )
 .RemoteOperations(true)
 .ID("demandesTravailGrid")
 .NoDataText("Aucune donnée à afficher")
 .CacheEnabled(true)
 .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
 .Columns(columns => {

     columns.AddFor(m => m.NumDt)
    .CellTemplate("<a class=\"btn btn-outline-success my-2 my-sm-0\"><%= value %></a>");

     columns.AddFor(m => m.DateDt)
     .Format("d/M/yyyy")
     .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));

     columns.AddFor(m => m.TravailDemandee);


     columns.AddFor(m => m.Note);

     columns.AddFor(m => m.Journee);

     columns.AddFor(m => m.Semaine);

     columns.AddFor(m => m.RefMachine).Caption("Installation")
   .Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("DemandeTravailsMaintenance").LoadAction("MachinesLookup").Key("Value"))
    .AllowClearing(true)
    .ValueExpr("Value")
    .DisplayExpr("Text")
   );


     columns.AddFor(m => m.CodeArret).Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("DemandeTravailsMaintenance").LoadAction("ArreteProductionLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        );

     columns.AddFor(m => m.CodeStatut).Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("DemandeTravailsMaintenance").LoadAction("StatutLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
    );

     columns.AddFor(m => m.CodeStructure).Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("DemandeTravailsMaintenance").LoadAction("StructureLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        );

     columns.AddFor(m => m.CodeUrgence).Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("DemandeTravailsMaintenance").LoadAction("UrgenceTravailleLookup").Key("Value"))
    .ValueExpr("Value")
    .DisplayExpr("Text")
    .AllowClearing(true)

     );
     columns.Add()
        .Type(GridCommandColumnType.Buttons)
        .Width(110)
        .Buttons(b => {
        b.Add().Name(GridColumnButtonName.Edit);
        b.Add().Name(GridColumnButtonName.Delete);
        b.Add()
                .Hint("Imprimer")
                .OnClick(@<text>imprimerDemandeTravail</text>)
                   .Icon("print");
           });

   })
                 .MasterDetail(md => md
        .Enabled(true)
        .Template(new TemplateName("RapportInterventionDetails"))
    )
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
)




@using (Html.DevExtreme().NamedTemplate("RapportInterventionDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
               .Title("Ordre de travail")
               .Template(new TemplateName("OrdreTravailGrid"))
               .Option("masterGridData", new { idDt = new JS("data.NumDt"), idNumMachine = new JS("data.CodeMachine") });
            items.Add()
                .Title("Rapport Intervention")
                .Template(new TemplateName("RapportInterventionGrid"))
                .Option("masterGridData", new { id = new JS("data.NumDt") });
        })
        )
}
@using (Html.DevExtreme().NamedTemplate("RapportInterventionGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.RapportIntervention>()
        .ShowBorders(true)
        .LoadPanel(l => l.Enabled(false))
        .Columns(columns =>
        {
            columns.AddFor(m => m.DateIntervention).Format("dd/MM/yyyy HH:mm")
            .DataType(GridColumnDataType.DateTime)
            .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
            columns.AddFor(m => m.DebutIntervention).Format("dd/MM/yyyy HH:mm")
            .DataType(GridColumnDataType.DateTime)
            .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
            columns.AddFor(m => m.DureeIntervention);
            columns.AddFor(m => m.CompteRendu);
            columns.AddFor(m => m.Observation);
            columns.Add()
                .Type(GridCommandColumnType.Buttons)
                .Width(110)
                .Buttons(b =>
                {
                    b.Add().Name(GridColumnButtonName.Edit);
                    b.Add().Name(GridColumnButtonName.Delete);
                });
        })
        .Editing(editing =>
        {
            editing.AllowUpdating(true);
            editing.AllowDeleting(true);
            editing.AllowAdding(true);
            editing.Mode(GridEditMode.Popup)
            .Popup(p => p.Title("Editer Rapport")
            .ShowTitle(true)
            .Position(pos => pos.My(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).Of(new JS("window"))));
        })
        .Export(e => e.Enabled(true).AllowExportSelectedData(true))
        .FilterRow(f => f.Visible(true))
        .HeaderFilter(headerfilter => headerfilter.Visible(true))
        .GroupPanel(p => p.Visible(true))
        .AllowColumnReordering(true)
        .AllowColumnResizing(true)
        .OnCellPrepared("receptionCell_prepared")
        .Selection(s => s.Mode(SelectionMode.Multiple))
        .MasterDetail(md => md
        .Enabled(true)
        .Template(new TemplateName("IntervenatsDetails"))
        )
        .DataSource(ds => ds.Mvc()
            .Controller("RapportInterventionsMethode")
            .LoadAction("GetDt")
            .InsertAction("Post")
            .UpdateAction("Put")
            .DeleteAction("Delete")
            .Key("NumIntervention")
            .LoadParams(new
            {
                id = new JS("masterGridData.id")
            }
            )
        )

    )
}
@using (Html.DevExtreme().NamedTemplate("OrdreTravailGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.OrdreTravail>()
    .DataSource(ds => ds.Mvc()
    .Controller("OrdresTravailMethode")
    .LoadAction("GetSentInDt")
    .InsertAction("Post")
    .UpdateAction("Put")
    .DeleteAction("Delete")
    .Key("NumOt")
    .LoadParams(new
    {
        idDt = new JS("masterGridData.idDt"),
        idNumMachine = new JS("masterGridData.idNumMachine")
    }
    )
    )
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
    columns.AddFor(m => m.DateOt)
    .Format("d/M/yyyy")
    .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));

    columns.AddFor(m => m.HeureInstallation).Format("dd/MM/yyyy HH:mm")
    .DataType(GridColumnDataType.DateTime)
    .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));

    columns.AddFor(m => m.CodeMaintenance).Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("OrdresTravailMethode").LoadAction("TypeMaintenanceLookup").Key("Value"))
    .ValueExpr("Value")
    .DisplayExpr("Text")
    .AllowClearing(true)
    );
    columns.AddFor(m => m.NumEquipement).Caption("Equipement")
    .Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("DemandeTravailsMethode").LoadAction("EquipementsLookup").Key("Value"))
    .AllowClearing(true)
    .ValueExpr("Value")
    .DisplayExpr("Text")
    );
    columns.Add()
    .Type(GridCommandColumnType.Buttons)
    .Width(110)
    .Buttons(b => {
    b.Add().Name(GridColumnButtonName.Edit);
    b.Add().Name(GridColumnButtonName.Delete);
    b.Add()
        .Hint("Imprimer Ordre")
        .OnClick(@<text>imprimerOrdreTravail</text>)
                           .Icon("print");
    });


    })
    .MasterDetail(md => md
    .Enabled(true)
    .Template(new TemplateName("OrdreTravailDetails"))
    )
   .Editing(editing =>
   {
       editing.AllowUpdating(true);
       editing.AllowDeleting(true);
       editing.AllowAdding(true);
       editing.Mode(GridEditMode.Popup)
        .Popup(p => p.Title("Editer Ordre")
        .ShowTitle(true)
        .Position(pos => pos.My(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).Of(new JS("window"))));
   })
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple)
)
)

}
@using (Html.DevExtreme().NamedTemplate("OrdreTravailDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Traveaux")
                .Template(new TemplateName("TachesGrid"))
                .Option("masterGridData", new { id = new JS("data.NumOt")});
            items.Add()
                .Title("Outillage")
                .Template(new TemplateName("OutillageGrid"))
                .Option("masterGridData", new { id = new JS("data.NumOt") });
        })
        )
}
@using (Html.DevExtreme().NamedTemplate("IntervenatsDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Les intervenants")
                .Template(new TemplateName("IntervenantsGrid"))
                .Option("RapportGridData", new { id = new JS("data.NumIntervention") });

        })
        )
}
@using (Html.DevExtreme().NamedTemplate("IntervenantsGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.AssOtIntervenants>()
            .DataSource(ds => ds.Mvc()
            .Controller("AssOtIntervenants")
            .LoadAction("Get")
            .InsertAction("Post")
            .UpdateAction("Put")
            .DeleteAction("Delete")
            .Key("Id")
            .LoadParams(new
            {
                id = new JS("RapportGridData.id")
            }
            )
            )
            .RemoteOperations(true)
            .NoDataText("Aucune donnée à afficher")
            .CacheEnabled(true)
            .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
            .Columns(columns => {
                columns.AddFor(m => m.CodeIntervenant).Caption("Nom").Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("GestionPersonnelsExploitation").LoadAction("NomLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
                .AllowClearing(true)
                 );
                columns.AddFor(m => m.CodeIntervenant).Caption("Prenom").Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("GestionPersonnelsExploitation").LoadAction("PrenomLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
                .AllowClearing(true)
                 );
                columns.AddFor(m => m.CodeMachine).Caption("Machine").Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("AssOtIntervenants").LoadAction("MachinesLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
                .AllowClearing(true)
                 );
                columns.AddFor(m => m.CodeEquipement).Caption("Equipement").Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("AssOtIntervenants").LoadAction("EquipementsLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
                .AllowClearing(true)
                 );
                columns.Add()
                    .Type(GridCommandColumnType.Buttons)
                    .Width(110)
                    .Buttons(b => {
                    b.Add().Name(GridColumnButtonName.Edit);
                    b.Add().Name(GridColumnButtonName.Delete);
                });


    })

   .Editing(editing =>
   {
       editing.AllowUpdating(true);
       editing.AllowDeleting(true);
       editing.AllowAdding(true);
       editing.Mode(GridEditMode.Popup)
        .Popup(p => p.Title("Editer Intervenant")
        .ShowTitle(true)
        .Position(pos => pos.My(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).Of(new JS("window"))));
   })
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
)

}
@using (Html.DevExtreme().NamedTemplate("TachesGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.AssOtTaches>()
            .DataSource(ds => ds.Mvc()
            .Controller("AssOtTaches")
            .LoadAction("Get")
            .InsertAction("Post")
            .UpdateAction("Put")
            .DeleteAction("Delete")
            .Key("Id")
            )
            .RemoteOperations(true)
            .NoDataText("Aucune donnée à afficher")
            .CacheEnabled(true)
            .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
            .Columns(columns => {
                columns.AddFor(m => m.DescriptionTache);
    })
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(true);
       editing.AllowDeleting(true);
       editing.AllowAdding(true);
   })

)
}
@using (Html.DevExtreme().NamedTemplate("OutillageGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.AssOtOutils>()
            .DataSource(ds => ds.Mvc()
            .Controller("AssOtOutils")
            .LoadAction("Get")
            .InsertAction("Post")
            .UpdateAction("Put")
            .DeleteAction("Delete")
            .Key("Id")
            )
            .RemoteOperations(true)
            .NoDataText("Aucune donnée à afficher")
            .CacheEnabled(true)
            .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
            .Columns(columns =>
            {
                columns.AddFor(m => m.CodeOutils).Caption("PDR").Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("AssOtOutils").LoadAction("OutilsLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
                .AllowClearing(true)
                 );
            })
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(true);
       editing.AllowDeleting(true);
       editing.AllowAdding(true);
   })

)
}
<script>

        function refreshButton_click() {
         DevExpress.ui.notify("Rafraichissement en cours!");
         var demandesTravailGrid = $("#demandesTravailGrid").dxDataGrid("instance");
         var demandesTravailDS = demandesTravailGrid.getDataSource();
         demandesTravailGrid.beginCustomLoading("Chargement en cours...");
         demandesTravailDS.reload();
         demandesTravailGrid.refresh();
         demandesTravailGrid.endCustomLoading();
        }

        function addButton_click() {
            DevExpress.ui.notify("Ajouter une demande!");
            window.location.href = '@Url.Action("NewReception")';
        }

        function dateDebutBox_value() {
            var dateDebutBox = $("#FilterDateDebut").dxDateBox("instance");
            console.log(dateDebutBox.option('value'));
            return new Date(dateDebutBox.option('value')).toJSON();
        }

        function dateFinBox_value() {
            var dateFinBox = $("#FilterDateFin").dxDateBox("instance");
            console.log(dateFinBox.option('value'));
            return new Date(dateFinBox.option('value')).toJSON();
        }

        function receptionCell_prepared(e) {
            if (e.rowType === "data" && e.column.command === "edit") {
                var isEditing = e.row.isEditing, $links = e.cellElement.find(".dx-link");
                $links.text("");
                if (isEditing) {
                    $links.filter(".dx-link-save").addClass("dx-icon-save");
                    $links.filter(".dx-link-cancel").addClass("dx-icon-revert");
                } else {
                    $links.filter(".dx-link-edit").addClass("dx-icon-edit");
                    $links.filter(".dx-link-delete").addClass("dx-icon-trash");
                }
            }
        }

        var imprimerDemandeTravail = function (e) {
            var num = e.row.data.NumDt;

               window.location.href = ' @Url.Action("DemandeTravailViewer")';
         }

        var docViewer;
        function GetDocumentViewer(s, e) {
            docViewer = s;
        }

        function BuildOnClick() {
            var parameterValue = 2;
            docViewer.GetParametersModel()["NumDt"](parameterValue);
            docViewer.StartBuild();
        }

        function GoToLastPage(s, e) {
            s.GoToPage(e.PageCount - 1);
        }

        function WebDocumentViewerInit(s, e) {
            var parametersModel = s.GetParametersModel();
            if (!parametersModel) { return; }
            var serializeParametersOriginal = parametersModel.serializeParameters;
            parametersModel.serializeParameters = function () {
                var serializedParameters = serializeParametersOriginal.apply(parametersModel);
                var reportParameter = serializedParameters.filter(function (p) { return p.Key === "MyParameterName" })[0];
                if (reportParameter) {
                    reportParameter.Value = "my custom parameter value";
                }
                return serializedParameters;
            }
        }



</script>