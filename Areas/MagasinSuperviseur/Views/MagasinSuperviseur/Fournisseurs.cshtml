@using DevKbfSteel.Models
@using DevExpress.XtraReports.UI;
@using DevKbfSteel.Controllers
@using DevExpress.XtraReports.Parameters;
@using DevKbfSteel.Reports
@using DevExpress.AspNetCore
@using DevExtreme.AspNet.Mvc
@using DevKbfSteel.Helpers;
@using DevKbfSteel.Areas.MagasinManager.Models;

@{
    ViewData["Title"] = "Magasin-Liste Fournisseurs";
    Layout = "~/Views/Shared/_LayoutMagasinSuperviseur.cshtml";
}
@(Html.DevExtreme().Toolbar()
    .Items(items =>
    {
        items.Add()
           .Widget(w => w
           .Button()
           .Icon("print")
           .Hint("Suivi")
           .OnClick("imprimerSuivi")
       )
       .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
       .Location(ToolbarItemLocation.Before);
    }
    )
)
@(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.ApproFournisseurs>()
    .ID("Fournissuers")
    .DataSource(ds => ds.Mvc()
    .Controller("Fournisseurs")
    .LoadAction("GetFournisseurs")
    .InsertAction("PostFournisseurs")
    .UpdateAction("PutFournisseurs")
    .DeleteAction("DeleteFournisseurs")
    .Key("NumeroFournisseur")
    )
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
    columns.AddFor(m => m.NumeroFournisseur).Caption("Code Fournisseur").AllowEditing(false);
    columns.AddFor(m => m.SocieteFournisseur).Caption("Nom");
    columns.AddFor(m => m.Adresse);
    columns.AddFor(m => m.Fonction);
    columns.AddFor(m => m.Telephone);
    columns.AddFor(m => m.Gmail);
    columns.AddFor(m => m.Contact);
    columns.AddFor(m => m.Nrc).Visible(false);
    columns.AddFor(m => m.Mf);
    columns.AddFor(m => m.Art).Visible(false);
    columns.AddFor(m => m.CodePostal).Visible(false);
    columns.AddFor(m => m.Fax).Visible(false);
    columns.AddFor(m => m.Pays).Visible(false);
    columns.AddFor(m => m.Ville).Visible(false);
    columns.Add()
        .Type(GridCommandColumnType.Buttons)
        .Width(110)
        .Buttons(b =>
        {
        b.Add()
            .Hint("Imprimer")
            .OnClick(@<text>imprimerEtatFournisseur</text>)
                .Icon("print");
            });
        })
.Scrolling(scrolling => scrolling
.ScrollByContent(true)
.ShowScrollbar(ShowScrollbarMode.Always)
.Mode(GridScrollingMode.Infinite))
.ColumnChooser(cc => cc
.Enabled(true)
.AllowSearch(true))
.Height("95%")
.Export(e => e.Enabled(true).AllowExportSelectedData(true))
.FilterRow(f => f.Visible(true))
.HeaderFilter(headerfilter => headerfilter.Visible(true))
.GroupPanel(p => p.Visible(true))
.AllowColumnReordering(true)
.AllowColumnResizing(true)
.OnCellPrepared("receptionCell_prepared")
.Selection(s => s.Mode(SelectionMode.Multiple))
.Editing(editing =>
{
    editing.AllowUpdating(true);
    editing.AllowDeleting(true);
    editing.AllowAdding(true);
    editing.Mode(GridEditMode.Form);
})
.OnRowExpanding("CollpaseAll")
.OnRowExpanded("refreshButton_click")
.MasterDetail(md => md
.Enabled(true)
.Template(new TemplateName("FournisseurDetails")))
)
@using (Html.DevExtreme().NamedTemplate("FournisseurDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Suivi Entrées")
                .Template(new TemplateName("EntreeGrid"))
                .Option("EntreeGrid", new { id = new JS("data.NumeroFournisseur") });
            items.Add()
                .Title("Suivi Retour")
                .Template(new TemplateName("RetourGrid"))
                .Option("RetourGrid", new { id = new JS("data.NumeroFournisseur") });
        })
        )
}
@using (Html.DevExtreme().NamedTemplate("EntreeGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkBonEntree>()
            .DataSource(ds => ds.Mvc()
            .Controller("Fournisseurs")
            .LoadAction("GetEntree")
            .Key("NumBon")
            .LoadParams(new
            {
                id = new JS("EntreeGrid.id")
            }
            )
            )
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always)
    .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {

        columns.AddFor(m => m.NumBon);
        columns.AddFor(m => m.DateEntree);
        columns.AddFor(m => m.CodeIntervenant)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("Sorties").LoadAction("IntervenantLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        );
        columns.AddFor(m => m.TypeAchat)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("Entrees").LoadAction("TypeAchatLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true));
    })
   .ColumnChooser(cc => cc
   .Enabled(true)
   .AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .MasterDetail(md => md
   .Enabled(true)
   .Template(new TemplateName("BonEntreeDetails")))
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(false);
       editing.AllowDeleting(false);
       editing.AllowAdding(false);
       editing.Mode(GridEditMode.Form);
   })
)
}
@using (Html.DevExtreme().NamedTemplate("RetourGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.SrkBonRetour>()
            .DataSource(ds => ds.Mvc()
            .Controller("Fournisseurs")
            .LoadAction("GetRetour")
            .Key("NumBonRetour")
            .LoadParams(new
            {
                id = new JS("RetourGrid.id")
            }
            )
            )
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always)
    .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {

        columns.AddFor(m => m.DateRetour);
        columns.AddFor(m => m.NumBonRetour);
        columns.AddFor(m => m.NumBonEntree);
        columns.AddFor(m => m.CodeIntervenant)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("Sorties").LoadAction("IntervenantLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        );
    })
   .ColumnChooser(cc => cc
   .Enabled(true)
   .AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .MasterDetail(md => md
   .Enabled(true)
   .Template(new TemplateName("BonRetourDetails")))
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(false);
       editing.AllowDeleting(false);
       editing.AllowAdding(false);
       editing.Mode(GridEditMode.Form);
   })
)
}
@using (Html.DevExtreme().NamedTemplate("BonRetourDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Détails")
                .Template(new TemplateName("DétailsRetourGrid"))
                .Option("DétailsGrid", new { id = new JS("data.NumBonRetour") });
        })
        )
}
@using (Html.DevExtreme().NamedTemplate("DétailsRetourGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkBonRetourArticles>()
            .DataSource(ds => ds.Mvc()
            .Controller("BonRetour")
            .LoadAction("GetBonRetourDetails")
            .Key("Id")
            .LoadParams(new
            {
                id = new JS("DétailsGrid.id")
            }
            )
            )
                 .Scrolling(scrolling => scrolling
     .ScrollByContent(true)
     .ShowScrollbar(ShowScrollbarMode.Always)
     .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
        columns.AddFor(m => m.CodeArticle)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("ApproDemandesFournitures").LoadAction("DesignationArticleLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        )
        .EditCellTemplate(@<text> @Html.Partial("DxDropDownBoxArticlesBonAffectation") </text>);
        columns.AddFor(m => m.Qte);
        columns.AddFor(m => m.PrixUnitaire);
        columns.AddFor(m => m.MotifRetour);
    })
.OnRowExpanding("CollpaseAll")
.OnRowExpanded("refreshButton_click")
   .ColumnChooser(cc => cc
   .Enabled(true)
   .AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(false);
       editing.AllowDeleting(false);
       editing.AllowAdding(false);
       editing.Mode(GridEditMode.Form);
   })
)
}
@using (Html.DevExtreme().NamedTemplate("BonEntreeDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Détails")
                .Template(new TemplateName("DétailsGrid"))
                .Option("DétailsGrid", new { id = new JS("data.NumBon") });
            items.Add()
                .Title("Frais d'pproches")
                .Template(new TemplateName("FraisApprocheGrid"))
                .Option("FraisApprocheGrid", new { id = new JS("data.NumBon") });
        })
        )
}
@using (Html.DevExtreme().NamedTemplate("DétailsGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkBonEntreeArticles>()
            .DataSource(ds => ds.Mvc()
            .Controller("Entrees")
            .LoadAction("GetDetails")
            .Key("Id")
            .LoadParams(new
            {
                id = new JS("DétailsGrid.id")
            }
            )
            )
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always)
    .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
        columns.AddFor(m => m.CodePdr)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("ApproDemandesFournitures").LoadAction("DesignationArticleLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        );
        columns.AddFor(m => m.QteRecu);
        columns.AddFor(m => m.PrixUnitaire);
        columns.AddFor(m => m.Montant).AllowEditing(false);
        columns.Add()
        .Type(GridCommandColumnType.Buttons)
        .Width(110)
        .Buttons(b =>
        {
            b.Add().Name(GridColumnButtonName.Edit);
            b.Add().Name(GridColumnButtonName.Delete);
        });
    })
   .ColumnChooser(cc => cc
   .Enabled(true)
   .AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(false);
       editing.AllowDeleting(false);
       editing.AllowAdding(false);
       editing.Mode(GridEditMode.Form);
   })
)
}
@using (Html.DevExtreme().NamedTemplate("FraisApprocheGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkEntreeFraisApproches>()
            .DataSource(ds => ds.Mvc()
            .Controller("FraisApproches")
            .LoadAction("GetFraisEntree")
            .Key("Id")
            .LoadParams(new
            {
                id = new JS("FraisApprocheGrid.id")
            }
            )
            )
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always)
    .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
        columns.AddFor(m => m.CodeFrais)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("FraisApproches").LoadAction("FraisLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        );
        columns.AddFor(m => m.NumFacture);
        columns.AddFor(m => m.MontantDevise);
        columns.AddFor(m => m.ValeurFrais);
        columns.Add()
        .Type(GridCommandColumnType.Buttons)
        .Width(110)
        .Buttons(b =>
        {
            b.Add().Name(GridColumnButtonName.Edit);
            b.Add().Name(GridColumnButtonName.Delete);
        });
    })
   .ColumnChooser(cc => cc
   .Enabled(true)
   .AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
   .Editing(editing =>
   {
       editing.AllowUpdating(false);
       editing.AllowDeleting(false);
       editing.AllowAdding(false);
       editing.Mode(GridEditMode.Form);
   })
)
}
<script>
    function refreshButton_click() {
        DevExpress.ui.notify("Rafraichissement en cours!");
        var demandesTravailGrid = $("#Fournissuers").dxDataGrid("instance");
        var demandesTravailDS = demandesTravailGrid.getDataSource();
        demandesTravailGrid.beginCustomLoading("Chargement en cours...");
        demandesTravailDS.reload();
        demandesTravailGrid.refresh();
        demandesTravailGrid.endCustomLoading();
    }
    function receptionCell_prepared(e) {
        if (e.rowType === "data" && e.column.command === "edit") {
            var isEditing = e.row.isEditing, $links = e.cellElement.find(".dx-link");
            $links.text("");
            if (isEditing) {
                $links.filter(".dx-link-save").addClass("dx-icon-save");
                $links.filter(".dx-link-cancel").addClass("dx-icon-revert");
            } else {
                $links.filter(".dx-link-edit").addClass("dx-icon-edit");
                $links.filter(".dx-link-delete").addClass("dx-icon-trash");
            }
        }
    }
    function CollpaseAll(e) {
        e.component.collapseAll(-1);
    }
    var imprimerSuivi = function (e) {
        window.open(' @Url.Action("FournisseursGlobalViewer", "MagasinSuperviseur")', '_blank').focus();
        }
    var imprimerEtatFournisseur = function (e) {
        var num = e.row.data.NumeroFournisseur;
        window.open(' @Url.Action("EtatFournisseurViewer", "MagasinSuperviseur")?id='+num, '_blank').focus();
    }
</script>
