@using DevKbfSteel.Models
@using DevExpress.XtraReports.UI;
@using DevKbfSteel.Controllers
@using DevExpress.XtraReports.Parameters;
@using DevKbfSteel.Reports
@using DevExpress.AspNetCore
@using DevExtreme.AspNet.Mvc
@using DevKbfSteel.Helpers;
@using DevKbfSteel.Areas.MagasinManager.Models;

@{
    ViewData["Title"] = "Magasin-Inventaires";
    Layout = "~/Views/Shared/_LayoutMagasinSuperviseur.cshtml";
}
@(Html.DevExtreme().Toolbar()
    .Items(items =>
    {
        items.Add()
           .Widget(w => w
           .Button()
           .Icon("refresh")
           .OnClick("refreshButton_click")
       )
       .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
       .Location(ToolbarItemLocation.Before);
        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("yyyy-MM-dd").ID("FilterDateDebut"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);
        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("yyyy-MM-dd").ID("FilterDateFin"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);
    }
    )
)
@(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkInventaires>()
    .ID("InventaireGrid")
    .DataSource(ds => ds.Mvc()
    .Controller("Inventaires")
    .LoadAction("GetInventaires")
    .InsertAction("PostInventaire")
    .UpdateAction("PutInventaire")
    .DeleteAction("DeleteInventaire")
    .LoadParams(new { dateDebut = new JS("dateDebutBox_value"), dateFin = new JS("dateFinBox_value") })
    .Key("NumInventaire")
    )
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
        columns.AddFor(m => m.DateDebut)
        .Format("yyyy-MM-dd")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
        columns.AddFor(m => m.DateFin)
        .Format("yyyy-MM-dd")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
        columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Width(110)
            .Buttons(b => {
            b.Add().Name(GridColumnButtonName.Edit);
            b.Add().Name(GridColumnButtonName.Delete);
        });
        })
.OnRowExpanding("CollpaseAll")
.OnRowExpanded("refreshButton_click")
.ColumnChooser(cc => cc
.Enabled(true)
.AllowSearch(true))
.Height("95%")
.Export(e => e.Enabled(true).AllowExportSelectedData(true))
.FilterRow(f => f.Visible(true))
.HeaderFilter(headerfilter => headerfilter.Visible(true))
.GroupPanel(p => p.Visible(true))
.MasterDetail(md => md
.Enabled(true)
.Template(new TemplateName("InventaireGridDetails")))
.AllowColumnReordering(true)
.AllowColumnResizing(true)
.OnCellPrepared("receptionCell_prepared")
.Selection(s => s.Mode(SelectionMode.Multiple))
.Editing(editing =>
{
    editing.AllowUpdating(true);
    editing.AllowDeleting(true);
    editing.AllowAdding(true);
    editing.Mode(GridEditMode.Row);
})
)
@using (Html.DevExtreme().NamedTemplate("InventaireGridDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Equipes de comptage")
                .Template(new TemplateName("EquipeDetailsGrid"))
                .Option("EquipeDetailsGrid", new { id = new JS("data.NumInventaire") });
            items.Add()
                .Title("Lieux de comptage")
                .Template(new TemplateName("LieuxDetailsGrid"))
                .Option("LieuxDetailsGrid", new { id = new JS("data.NumInventaire") });
            items.Add()
                .Title("List des Articles")
                .Template(new TemplateName("ArticlesDetailsGrid"))
                .Option("ArticlesDetailsGrid", new { id = new JS("data.NumInventaire") });
            items.Add()
                .Title("Ecart Inventaire")
                .Template(new TemplateName("EcartDetailsGrid"))
                .Option("EcartDetailsGrid", new { id = new JS("data.NumInventaire") });
            items.Add()
                .Title("Etat Inventaire")
                .Template(new TemplateName("EtatInventaireGrid"))
                .Option("EtatInventaireGrid", new { id = new JS("data.NumInventaire") });
            items.Add()
                .Title("Inventaire Final")
                .Template(new TemplateName("InventaireFinalGrid"))
                .Option("InventaireFinalGrid", new { id = new JS("data.NumInventaire") });
        })
    )
}
@using (Html.DevExtreme().NamedTemplate("EquipeDetailsGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkInventairesEquipes>()
    .DataSource(ds => ds.Mvc()
        .Controller("Inventaires")
        .LoadAction("GetInventairesEquipes")
        .InsertAction("PostInventaireEquipe")
        .UpdateAction("PutInventaireEquipe")
        .DeleteAction("DeleteInventaireEquipe")
    .Key("Id")
    .LoadParams(new
    {
        id = new JS("EquipeDetailsGrid.id")
    }))
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always)
    .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
        columns.AddFor(m => m.NomEquipe)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("Inventaires").LoadAction("NomEquipeLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        );
        columns.AddFor(m => m.CodeResponsable).Caption("Résponsable")
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("RhListeDesEmployes").LoadAction("EmployeeLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        );
        columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Width(110)
            .Buttons(b => {
            b.Add()
                .Hint("Imprimer")
                .OnClick(@<text>imprimerPapillonComptage</text>)
                    .Icon("print");
            b.Add().Name(GridColumnButtonName.Edit);
            b.Add().Name(GridColumnButtonName.Delete);
        });
    })

    .MasterDetail(md => md
    .Enabled(true)
    .Template(new TemplateName("EquipesGridDetails")))
    .OnRowExpanding("CollpaseAll")
    .ColumnChooser(cc => cc
    .Enabled(true)
    .AllowSearch(true))
    .Export(e => e.Enabled(true).AllowExportSelectedData(true))
    .FilterRow(f => f.Visible(true))
    .HeaderFilter(headerfilter => headerfilter.Visible(true))
    .GroupPanel(p => p.Visible(true))
    .AllowColumnReordering(true)
    .AllowColumnResizing(true)
    .OnCellPrepared("receptionCell_prepared")
    .Selection(s => s.Mode(SelectionMode.Multiple))
    .Editing(editing =>
   {
       editing.AllowUpdating(true);
       editing.AllowDeleting(true);
       editing.AllowAdding(true);
       editing.Mode(GridEditMode.Row);
   })
)
}
@using (Html.DevExtreme().NamedTemplate("EquipesGridDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Comptage Articles")
                .Template(new TemplateName("EquipeComptageDetailsGrid"))
                .Option("EquipeComptageDetailsGrid", new { id = new JS("data.Id") });
            items.Add()
                .Title("Membres Equipe")
                .Template(new TemplateName("MembresGrid"))
                .Option("MembresGrid", new { id = new JS("data.Id") });
        })
    )
}
@using (Html.DevExtreme().NamedTemplate("MembresGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkInventairesEquipeMembres>()
    .DataSource(ds => ds.Mvc()
        .Controller("Inventaires")
        .LoadAction("GetInventairesEquipesMembres")
        .InsertAction("PostInventaireEquipeMembres")
        .UpdateAction("PutInventaireEquipeMembres")
        .DeleteAction("DeleteInventaireEquipeMembres")
    .Key("Id")
    .LoadParams(new
    {
        id = new JS("MembresGrid.id")
    }))
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always)
    .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
        columns.AddFor(m => m.CodeMembre).Caption("Membre")
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("RhListeDesEmployes").LoadAction("EmployeeLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        );
    })
    .ColumnChooser(cc => cc
    .Enabled(true)
    .AllowSearch(true))
    .Export(e => e.Enabled(true).AllowExportSelectedData(true))
    .FilterRow(f => f.Visible(true))
    .HeaderFilter(headerfilter => headerfilter.Visible(true))
    .GroupPanel(p => p.Visible(true))
    .AllowColumnReordering(true)
    .AllowColumnResizing(true)
    .OnCellPrepared("receptionCell_prepared")
    .Selection(s => s.Mode(SelectionMode.Multiple))
    .Editing(editing =>
   {
       editing.AllowUpdating(true);
       editing.AllowDeleting(true);
       editing.AllowAdding(true);
       editing.Mode(GridEditMode.Row);
   })
)
}
@using (Html.DevExtreme().NamedTemplate("EquipeComptageDetailsGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Areas.MagasinManager.Models.PapillonComptageEquipeModel>()
    .DataSource(ds => ds.Mvc()
    .Controller("Inventaires")
    .LoadAction("GetPapillonComptageEquipe")
    .Key("CodePdr")
    .LoadParams(new
    {
        id = new JS("EquipeComptageDetailsGrid.id")
    }))
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always)
    .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
        columns.AddFor(m => m.CodePdr).Caption("Code Article");
        columns.AddFor(m => m.CodePdr).Caption("Dédignation Article")
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("ApproDemandesFournitures").LoadAction("DesignationArticleLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        );
        columns.AddFor(m => m.CodeUniteMesure).Caption("U.M")
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("StkPdrs").LoadAction("UniteMesureLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        );
        columns.AddFor(m => m.CodeGisement).Caption("Gisement")
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("StkPdrs").LoadAction("CodeGisementLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        );
        columns.AddFor(m => m.Quantite);
    })
    .ColumnChooser(cc => cc
    .Enabled(true)
    .AllowSearch(true))
    .Export(e => e.Enabled(true).AllowExportSelectedData(true))
    .FilterRow(f => f.Visible(true))
    .HeaderFilter(headerfilter => headerfilter.Visible(true))
    .GroupPanel(p => p.Visible(true))
    .AllowColumnReordering(true)
    .AllowColumnResizing(true)
    .OnCellPrepared("receptionCell_prepared")
    .Selection(s => s.Mode(SelectionMode.Multiple))
    .Editing(editing =>
   {
       editing.AllowUpdating(false);
       editing.AllowDeleting(false);
       editing.AllowAdding(false);
       editing.Mode(GridEditMode.Form);
   })
)
}
@using (Html.DevExtreme().NamedTemplate("LieuxDetailsGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkInventairesLieux>()
    .DataSource(ds => ds.Mvc()
        .Controller("Inventaires")
        .LoadAction("GetInventairesLieux")
        .InsertAction("PostInventaireLieu")
        .UpdateAction("PutInventaireLieu")
        .DeleteAction("DeleteInventaireLieu")
    .Key("Id")
    .LoadParams(new
    {
        id = new JS("LieuxDetailsGrid.id")
    }))
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always)
    .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
        columns.AddFor(m => m.CodeLieu)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("LieuxStockage").LoadAction("SourceDestinationLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        );
    })
    .ColumnChooser(cc => cc
    .Enabled(true)
    .AllowSearch(true))
    .Export(e => e.Enabled(true).AllowExportSelectedData(true))
    .FilterRow(f => f.Visible(true))
    .HeaderFilter(headerfilter => headerfilter.Visible(true))
    .GroupPanel(p => p.Visible(true))
    .AllowColumnReordering(true)
    .AllowColumnResizing(true)
    .OnCellPrepared("receptionCell_prepared")
    .Selection(s => s.Mode(SelectionMode.Multiple))
    .Editing(editing =>
   {
       editing.AllowUpdating(true);
       editing.AllowDeleting(true);
       editing.AllowAdding(true);
       editing.Mode(GridEditMode.Form);
   })
)
}
@using (Html.DevExtreme().NamedTemplate("ArticlesDetailsGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkInventairesArticles>()
    .DataSource(ds => ds.Mvc()
        .Controller("Inventaires")
        .LoadAction("GetInventairesArticles")
        .InsertAction("PostInventaireArticles")
        .UpdateAction("PutInventaireArticles")
        .DeleteAction("DeleteInventaireArticles")
    .Key("Id")
    .LoadParams(new
    {
        id = new JS("ArticlesDetailsGrid.id")
    }))
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always)
    .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
        columns.AddFor(m => m.CodeArticle)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("ApproDemandesFournitures").LoadAction("DesignationArticleLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        )
        .EditCellTemplate(@<text> @Html.Partial("DxDropDownBoxArticlesBonAffectation") </text>);
        columns.AddFor(m => m.CodeEquipe)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("Inventaires").LoadAction("EquipeLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        );
        columns.AddFor(m => m.Qte);
    })
    .ColumnChooser(cc => cc
    .Enabled(true)
    .AllowSearch(true))
    .Export(e => e.Enabled(true).AllowExportSelectedData(true))
    .FilterRow(f => f.Visible(true))
    .HeaderFilter(headerfilter => headerfilter.Visible(true))
    .GroupPanel(p => p.Visible(true))
    .AllowColumnReordering(true)
    .AllowColumnResizing(true)
    .OnCellPrepared("receptionCell_prepared")
    .Selection(s => s.Mode(SelectionMode.Multiple))
    .Editing(editing =>
   {
       editing.AllowUpdating(true);
       editing.AllowDeleting(true);
       editing.AllowAdding(true);
       editing.Mode(GridEditMode.Form);
   })
)
}
@using (Html.DevExtreme().NamedTemplate("EcartDetailsGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Areas.MagasinManager.Models.EcartInventaireModel>()
    .DataSource(ds => ds.Mvc()
        .Controller("Inventaires")
        .LoadAction("GetEcartInventaire")
    .Key("CodeArticle")
    .LoadParams(new
    {
        id = new JS("EcartDetailsGrid.id")
    }))
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always)
    .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
        columns.AddFor(m => m.CodeArticle);
        columns.AddFor(m => m.CodeArticle)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("ApproDemandesFournitures").LoadAction("DesignationArticleLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        );
        columns.AddFor(m => m.Equipe1);
        columns.AddFor(m => m.Equipe2);
        columns.AddFor(m => m.Ecart).Caption("E1-E2");
        columns.AddFor(m => m.EquipeControl);
        columns.AddFor(m => m.ECE1).Caption("EC-E1");
        columns.AddFor(m => m.ECE2).Caption("EC-E2");
        columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Width(110)
            .Buttons(b => {
            b.Add()
                .Hint("Imprimer")
                .OnClick(@<text>imprimerEcartInventaire</text>)
                    .Icon("print");
        });
    })
    .ColumnChooser(cc => cc
    .Enabled(true)
    .AllowSearch(true))
    .Export(e => e.Enabled(true).AllowExportSelectedData(true))
    .FilterRow(f => f.Visible(true))
    .HeaderFilter(headerfilter => headerfilter.Visible(true))
    .GroupPanel(p => p.Visible(true))
    .AllowColumnReordering(true)
    .AllowColumnResizing(true)
    .OnCellPrepared("receptionCell_prepared")
    .Selection(s => s.Mode(SelectionMode.Multiple))
    .Editing(editing =>
   {
       editing.AllowUpdating(false);
       editing.AllowDeleting(false);
       editing.AllowAdding(false);
       editing.Mode(GridEditMode.Form);
   })
)
}
@using (Html.DevExtreme().NamedTemplate("EtatInventaireGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Areas.MagasinManager.Models.EtatInventaireModel>()
    .DataSource(ds => ds.Mvc()
        .Controller("Inventaires")
        .LoadAction("GetEtatInventaire")
    .Key("CodeArticle")
    .LoadParams(new
    {
        id = new JS("EtatInventaireGrid.id")
    }))
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always)
    .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
        columns.AddFor(m => m.CodeArticle);
        columns.AddFor(m => m.CodeArticle)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("ApproDemandesFournitures").LoadAction("DesignationArticleLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        );
        columns.AddFor(m => m.Cout);
        columns.Add()
            .Caption("Invenaire Physique")
            .Alignment(HorizontalAlignment.Center)
            .Columns(a =>
            {
                    a.AddFor(m => m.QuantitePhy);
                    a.AddFor(m => m.ValeurPhy);
            });
        columns.Add()
            .Caption("Invenaire Théorique")
            .Alignment(HorizontalAlignment.Center)
            .Columns(a =>
            {
                    a.AddFor(m => m.QuantiteThe);
                    a.AddFor(m => m.ValeurThe);
            });
        columns.Add()
            .Caption("Ecart Inventaire")
            .Alignment(HorizontalAlignment.Center)
            .Columns(a =>
            {
                    a.AddFor(m => m.QuantiteEcart);
                    a.AddFor(m => m.ValeurEcart);
            });
    })
    .ColumnChooser(cc => cc
    .Enabled(true)
    .AllowSearch(true))
    .Export(e => e.Enabled(true).AllowExportSelectedData(true))
    .FilterRow(f => f.Visible(true))
    .HeaderFilter(headerfilter => headerfilter.Visible(true))
    .GroupPanel(p => p.Visible(true))
    .AllowColumnReordering(true)
    .AllowColumnResizing(true)
    .OnCellPrepared("receptionCell_prepared")
    .Selection(s => s.Mode(SelectionMode.Multiple))
    .Editing(editing =>
   {
       editing.AllowUpdating(false);
       editing.AllowDeleting(false);
       editing.AllowAdding(false);
       editing.Mode(GridEditMode.Form);
   })
)
}
@using (Html.DevExtreme().NamedTemplate("InventaireFinalGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Areas.MagasinManager.Models.InventaireFinalModel>()
    .DataSource(ds => ds.Mvc()
        .Controller("Inventaires")
        .LoadAction("GetInventaireFinal")
    .Key("CodeArticle")
    .LoadParams(new
    {
        id = new JS("InventaireFinalGrid.id")
    }))
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always)
    .Mode(GridScrollingMode.Virtual))
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
        columns.AddFor(m => m.CodeArticle);
        columns.AddFor(m => m.CodeArticle)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("ApproDemandesFournitures").LoadAction("DesignationArticleLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        );
        columns.AddFor(m => m.Cout);
        columns.AddFor(m => m.Quantite);
        columns.AddFor(m => m.Valeur);
    })
    .ColumnChooser(cc => cc
    .Enabled(true)
    .AllowSearch(true))
    .Export(e => e.Enabled(true).AllowExportSelectedData(true))
    .FilterRow(f => f.Visible(true))
    .HeaderFilter(headerfilter => headerfilter.Visible(true))
    .GroupPanel(p => p.Visible(true))
    .AllowColumnReordering(true)
    .AllowColumnResizing(true)
    .OnCellPrepared("receptionCell_prepared")
    .Selection(s => s.Mode(SelectionMode.Multiple))
    .Editing(editing =>
   {
       editing.AllowUpdating(false);
       editing.AllowDeleting(false);
       editing.AllowAdding(false);
       editing.Mode(GridEditMode.Form);
   })
)
}
<script>
    function gridBoxIdEmployee_valueChanged(e) {
        var $dataGrid = $("#embedded-datagridMultipleIdEmployee");
        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(e.value, false);
        }
    }
    function gridBox_valueChanged(args, setValueMethod) {
        var $dataGrid = $("#embedded-datagridMultipleIdEmployee");

        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(args.value, false);
        }
        setValueMethod(args.value);
    }
    function CollpaseAll(e) {
        e.component.collapseAll(-1);
    }

    function onSelectionChanged(e, dropDownBoxInstance) {
        var keys = e.selectedRowKeys;
        dropDownBoxInstance.option("value", keys);
        console.log(dropDownBoxInstance);
    }
    function refreshButton_click() {
        DevExpress.ui.notify("Rafraichissement en cours!");
        var demandesTravailGrid = $("#InventaireGrid").dxDataGrid("instance");
        var demandesTravailDS = demandesTravailGrid.getDataSource();
        demandesTravailGrid.beginCustomLoading("Chargement en cours...");
        demandesTravailDS.reload();
        demandesTravailGrid.refresh();
        demandesTravailGrid.endCustomLoading();
    }
    function CollpaseAll(e) {
        e.component.collapseAll(-1);
    }
    function dateDebutBox_value() {
        var dateDebutBox = $("#FilterDateDebut").dxDateBox("instance");
        console.log(dateDebutBox.option('value'));
        return new Date(dateDebutBox.option('value')).toJSON();
    }
    function dateFinBox_value() {
        var dateFinBox = $("#FilterDateFin").dxDateBox("instance");
        console.log(dateFinBox.option('value'));
        return new Date(dateFinBox.option('value')).toJSON();
    }
    function receptionCell_prepared(e) {
        if (e.rowType === "data" && e.column.command === "edit") {
            var isEditing = e.row.isEditing, $links = e.cellElement.find(".dx-link");
            $links.text("");
            if (isEditing) {
                $links.filter(".dx-link-save").addClass("dx-icon-save");
                $links.filter(".dx-link-cancel").addClass("dx-icon-revert");
            } else {
                $links.filter(".dx-link-edit").addClass("dx-icon-edit");
                $links.filter(".dx-link-delete").addClass("dx-icon-trash");
            }
        }
    }
    function gridBox_valueChanged(args, setValueMethod) {
        var $dataGrid = $("#embedded-datagridMultipleIdEmployee");
        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(args.value, false);
        }
        setValueMethod(args.value);
    }
    var imprimerEcartInventaire = function (e) {
        window.open(' @Url.Action("EcartInventaireViewer", "MagasinManager")', '_blank').focus();
    }
    var imprimerPapillonComptage = function (e) {
        var num = e.row.data.Id;
        window.open(' @Url.Action("PapillonCmptageViewer", "MagasinManager")?id='+num, '_blank').focus();
    }
    function onSelectionChanged(e, dropDownBoxInstance) {
        var keys = e.selectedRowKeys;
        dropDownBoxInstance.option("value", keys);
    }
    function onCloseBtnClick(args, dropDownBoxInstance) {
        dropDownBoxInstance.close();
    }
</script>