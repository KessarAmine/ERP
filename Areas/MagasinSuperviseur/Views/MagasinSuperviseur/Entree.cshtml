@using DevKbfSteel.Models
@using DevExpress.XtraReports.UI;
@using DevKbfSteel.Controllers
@using DevExpress.XtraReports.Parameters;
@using DevKbfSteel.Reports
@using DevExpress.AspNetCore
@using DevExtreme.AspNet.Mvc
@using DevKbfSteel.Helpers;
@using DevKbfSteel.Areas.MagasinManager.Models;
<html>
<head>
    @{
        ViewData["Title"] = "Entrées";
        Layout = "~/Views/Shared/_LayoutMagasinSuperviseur.cshtml";
    }
</head>
<body>
    @(Html.DevExtreme().Toolbar()
    .Items(items =>
    {
        items.Add()
           .Widget(w => w
           .Button()
           .Icon("refresh")
           .OnClick("refreshButton_click"))
       .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
       .Location(ToolbarItemLocation.Before);

        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("dd-MM-yyyy").ID("FilterDateDebut"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);

        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("dd-MM-yyyy").ID("FilterDateFin"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);
        items.Add()
           .Widget(w => w
           .Button()
           .Hint("Fournisseurs")
           .Icon("group")
           .OnClick("addFournisseur"))
           .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
           .Location(ToolbarItemLocation.Before);
    }
    )
)
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkBonEntree>()
    .ID("BonEntree")
    .DataSource(ds => ds.Mvc()
    .Controller("Entrees")
    .LoadAction("Get")
    .InsertAction("Post")
    .UpdateAction("Put")
    .DeleteAction("Delete")
    .LoadParams(new { dateDebut = new JS("dateDebutBox_value"), dateFin = new JS("dateFinBox_value") })
    .Key("NumBon")
    )
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
        columns.AddFor(m => m.NumBon).Caption("N° BE").AllowEditing(false);
        columns.AddFor(m => m.DateEntree)
            .Format("dd-MM-yyyy")
            .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month))
            .DataType(GridColumnDataType.DateTime);

        columns.AddFor(m => m.CodeIntervenant)
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("Sorties").LoadAction("IntervenantLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
            .AllowClearing(true));
        columns.AddFor(m => m.CodeFournisseur).Caption("Frounisseur")
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("Fournisseurs").LoadAction("FournisseurLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text"));
        columns.AddFor(m => m.TypeAchat)
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("Entrees").LoadAction("TypeAchatLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
            .AllowClearing(true)).Visible(false);
        columns.AddFor(m => m.TypeDevise)
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("Entrees").LoadAction("TypeDeviseLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
            .AllowClearing(true)).Visible(false);
        columns.AddFor(m => m.TauxChange).Visible(false);

        columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Width(110)
            .Buttons(b =>
            {
                b.Add().Name(GridColumnButtonName.Edit);
                b.Add().Name(GridColumnButtonName.Delete);
                b.Add()
                .Hint("Imprimer")
                .OnClick(@<text>imprimerBoneEntree</text>)
                .Icon("print");
            });
        })
.OnRowExpanding("CollpaseAll")
.OnRowExpanded("refreshButton_click")
.Scrolling(scrolling => scrolling
.ScrollByContent(true)
.ShowScrollbar(ShowScrollbarMode.Always)
.Mode(GridScrollingMode.Infinite))
.ColumnChooser(cc => cc
.Enabled(true)
.AllowSearch(true))
.Height("95%")
.Export(e => e.Enabled(true).AllowExportSelectedData(true))
.FilterRow(f => f.Visible(true))
.HeaderFilter(headerfilter => headerfilter.Visible(true))
.GroupPanel(p => p.Visible(true))
.MasterDetail(md => md
.Enabled(true)
.Template(new TemplateName("BonEntreeDetails")))
.AllowColumnReordering(true)
.AllowColumnResizing(true)
.OnCellPrepared("receptionCell_prepared")
.Selection(s => s.Mode(SelectionMode.Multiple))
.Editing(editing =>
{
    editing.AllowUpdating(true);
    editing.AllowDeleting(true);
    editing.AllowAdding(true);
    editing.Mode(GridEditMode.Form);
})
)
@using (Html.DevExtreme().NamedTemplate("BonEntreeDetails"))
{
    @(Html.DevExtreme().TabPanel()
.Items(items =>
{
    items.Add()
        .Title("Détails")
        .Template(new TemplateName("DétailsGrid"))
        .Option("DétailsGrid", new { id = new JS("data.NumBon") });
    items.Add()
        .Title("Frais d'pproches")
        .Template(new TemplateName("FraisApprocheGrid"))
        .Option("FraisApprocheGrid", new { id = new JS("data.NumBon") });
})
)
}
@using (Html.DevExtreme().NamedTemplate("DétailsGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkBonEntreeArticles>()
    .DataSource(ds => ds.Mvc()
    .Controller("Entrees")
    .LoadAction("GetDetails")
    .InsertAction("PostDetail")
    .UpdateAction("PutDetail")
    .DeleteAction("DeleteDetail")
    .Key("Id")
    .LoadParams(new
    {
        id = new JS("DétailsGrid.id")
    }
    )
    )
.Scrolling(scrolling => scrolling
.ScrollByContent(true)
.ShowScrollbar(ShowScrollbarMode.Always)
.Mode(GridScrollingMode.Infinite))
.RemoteOperations(true)
.NoDataText("Aucune donnée à afficher")
.CacheEnabled(true)
.WordWrapEnabled(true)
.SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
.Columns(columns => {
columns.AddFor(m => m.CodePdr).Caption("Code Article").AllowEditing(false);
columns.AddFor(m => m.CodePdr).Caption("Article")
.Lookup(lookup => lookup
.DataSource(ds => ds.WebApi().Controller("ApproDemandesFournitures").LoadAction("DesignationArticleLookup").Key("Value"))
.ValueExpr("Value")
.DisplayExpr("Text")
.AllowClearing(true)
)
.EditCellTemplate(@<text> @Html.Partial("DxDropDownPdrEntree") </text>);
columns.AddFor(m => m.QteRecu);
columns.AddFor(m => m.PrixUnitaire);
columns.AddFor(m => m.CoutUnitaire).AllowEditing(false);
columns.AddFor(m => m.Montant).AllowEditing(false);
columns.AddFor(m => m.ArticleNonGere).AllowEditing(false);
columns.AddFor(m => m.CodeInvesstisment).Caption("Invest?").Visible(false);
columns.AddFor(m => m.CodeFrais).Visible(false)
.Lookup(lookup => lookup
.DataSource(ds => ds.WebApi().Controller("FraisApproches").LoadAction("FraisLookup").Key("Value"))
.ValueExpr("Value")
.DisplayExpr("Text")
.AllowClearing(true)
)
.EditCellTemplate(@<text> @Html.Partial("DxDropDownBoxFraisApproches") </text>);
columns.AddFor(m => m.ValeurFrais).Visible(false);
columns.AddFor(m => m.MontantDevise).Caption("% Devise Frais").Visible(false);
columns.AddFor(m => m.NumFacture).Visible(false);
columns.Add()
.Type(GridCommandColumnType.Buttons)
.Width(110)
.Buttons(b =>
{
    b.Add().Name(GridColumnButtonName.Edit);
    b.Add().Name(GridColumnButtonName.Delete);
});
})
.Summary(s => s.TotalItems(items =>
{
items.Add()
    .SummaryType(SummaryType.Count)
    .Column("Code Article")
    .ShowInColumn("Code Article")
    .DisplayFormat("Count : {0}");
items.Add()
    .SummaryType(SummaryType.Sum)
    .Column("QteRecu")
    .ShowInColumn("QteRecu")
    .DisplayFormat("Total : {0} Dzd");
items.Add()
    .SummaryType(SummaryType.Sum)
    .Column("PrixUnitaire")
    .ShowInColumn("PrixUnitaire")
    .DisplayFormat("Total : {0} Dzd");
items.Add()
    .SummaryType(SummaryType.Sum)
    .Column("CoutUnitaire")
    .ShowInColumn("CoutUnitaire")
    .DisplayFormat("Total : {0} Dzd");
items.Add()
    .SummaryType(SummaryType.Sum)
    .Column("Montant")
    .ShowInColumn("Montant")
    .DisplayFormat("Total : {0} Dzd");
}))
.ColumnChooser(cc => cc
.Enabled(true)
.AllowSearch(true))
.Export(e => e.Enabled(true).AllowExportSelectedData(true))
.FilterRow(f => f.Visible(true))
.HeaderFilter(headerfilter => headerfilter.Visible(true))
.GroupPanel(p => p.Visible(true))
.AllowColumnReordering(true)
.AllowColumnResizing(true)
.OnCellPrepared("receptionCell_prepared")
.Selection(s => s.Mode(SelectionMode.Multiple))
.Editing(editing =>
{
editing.AllowUpdating(true);
editing.AllowDeleting(true);
editing.AllowAdding(true);
editing.Mode(GridEditMode.Form);
})
)
}
@using (Html.DevExtreme().NamedTemplate("FraisApprocheGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkEntreeFraisApproches>()
    .DataSource(ds => ds.Mvc()
    .Controller("FraisApproches")
    .LoadAction("GetFraisEntree")
    .InsertAction("PostFraisEntree")
    .UpdateAction("PutFraisEentree")
    .DeleteAction("DeleteFraisEntree")
    .Key("Id")
    .LoadParams(new
    {
        id = new JS("FraisApprocheGrid.id")
    }
    )
    )
.Scrolling(scrolling => scrolling
.ScrollByContent(true)
.ShowScrollbar(ShowScrollbarMode.Always)
.Mode(GridScrollingMode.Virtual))
.RemoteOperations(true)
.NoDataText("Aucune donnée à afficher")
.CacheEnabled(true)
.SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
.Columns(columns => {
    columns.AddFor(m => m.CodeFrais)
    .Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("FraisApproches").LoadAction("FraisLookup").Key("Value"))
    .ValueExpr("Value")
    .DisplayExpr("Text")
    .AllowClearing(true)
    )
    .EditCellTemplate(@<text> @Html.Partial("DxDropDownBoxFraisApproches") </text>);
    columns.AddFor(m => m.NumFacture);
    columns.AddFor(m => m.MontantDevise);
    columns.AddFor(m => m.ValeurFrais);
    columns.Add()
    .Type(GridCommandColumnType.Buttons)
    .Width(110)
    .Buttons(b =>
    {
        b.Add().Name(GridColumnButtonName.Edit);
        b.Add().Name(GridColumnButtonName.Delete);
    });
})
.Summary(s => s.TotalItems(items =>
{
    items.Add()
        .SummaryType(SummaryType.Count)
        .Column("CodeFrais")
        .ShowInColumn("CodeFrais")
        .DisplayFormat("Count : {0}");
    items.Add()
        .SummaryType(SummaryType.Sum)
        .Column("ValeurFrais")
        .ShowInColumn("ValeurFrais")
        .DisplayFormat("Total : {0} Dzd");
}))

.Scrolling(scrolling => scrolling
.ScrollByContent(true)
.ShowScrollbar(ShowScrollbarMode.Always)
.Mode(GridScrollingMode.Infinite))
.ColumnChooser(cc => cc
.Enabled(true)
.AllowSearch(true))
.Export(e => e.Enabled(true).AllowExportSelectedData(true))
.FilterRow(f => f.Visible(true))
.HeaderFilter(headerfilter => headerfilter.Visible(true))
.GroupPanel(p => p.Visible(true))
.AllowColumnReordering(true)
.AllowColumnResizing(true)
.OnCellPrepared("receptionCell_prepared")
.Selection(s => s.Mode(SelectionMode.Multiple))
.Editing(editing =>
{
    editing.AllowUpdating(true);
    editing.AllowDeleting(true);
    editing.AllowAdding(true);
    editing.Mode(GridEditMode.Form);
})
)
    }
@using (Html.DevExtreme().NamedTemplate("BonAffectationGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkAffectations>()
    .DataSource(ds => ds.Mvc()
    .Controller("StkAffectations")
    .LoadAction("GetBonAffectationBonEntree")
    .InsertAction("PostBonAffectation")
    .UpdateAction("PutBonAffectation")
    .DeleteAction("DeleteBonAffectation")
    .LoadParams(new
    {
        NumBonEntree = new JS("BonAffectationGrid.id")
    }
    )
    .Key("NumBonAffectation")
    )
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
        columns.AddFor(m => m.DateAffectation).Caption("Date Affectation")
        .Format("dd-MM-yyyy")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
        columns.AddFor(m => m.DateEntree).Caption("Date Entrée")
        .Format("dd-MM-yyyy")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
        columns.AddFor(m => m.CodeIntervenant)
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("Sorties").LoadAction("IntervenantLookup").Key("Value"))
            .ValueExpr("Value")
            .DisplayExpr("Text")
            .AllowClearing(true));
        columns.AddFor(m => m.ServiceReceveur)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("Sorties").LoadAction("CentreFraisLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true));
        columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Width(110)
            .Buttons(b => {
            b.Add().Name(GridColumnButtonName.Edit);
            b.Add().Name(GridColumnButtonName.Delete);
            b.Add()
                    .Hint("Imprimer")
                    .OnClick(@<text>imprimerBonAffectation</text>)
                    .Icon("print");
            });
    })
.ColumnChooser(cc => cc
.Enabled(true)
.AllowSearch(true))
.Export(e => e.Enabled(true).AllowExportSelectedData(true))
.FilterRow(f => f.Visible(true))
.HeaderFilter(headerfilter => headerfilter.Visible(true))
.GroupPanel(p => p.Visible(true))
.MasterDetail(md => md
.Enabled(true)
.Template(new TemplateName("BonAffectationDetails")))
.AllowColumnReordering(true)
.AllowColumnResizing(true)
.OnCellPrepared("receptionCell_prepared")
.Selection(s => s.Mode(SelectionMode.Multiple))
.Editing(editing =>
{
editing.AllowUpdating(true);
editing.AllowDeleting(true);
editing.AllowAdding(true);
editing.Mode(GridEditMode.Form);
})
)
}
@using (Html.DevExtreme().NamedTemplate("BonAffectationDetails"))
{
    @(Html.DevExtreme().TabPanel()
.Items(items =>
{
    items.Add()
        .Title("Détails bon d'affectation")
        .Template(new TemplateName("ArticlesBonAffectationGrid"))
        .Option("BonAffectationDetailsGrid", new { id = new JS("data.NumBonAffectation") });
})
)
}
@using (Html.DevExtreme().NamedTemplate("ArticlesBonAffectationGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkAffectationsArticles>()
    .DataSource(ds => ds.Mvc()
    .Controller("StkAffectations")
    .InsertAction("PostBonAffectationArticles")
    .UpdateAction("PutBonAffectationArticles")
    .DeleteAction("DeleteBonAffectationArticles")
    .LoadAction("GetBonAffectationArticles")
    .Key("Id")
    .LoadParams(new
    {
        numBonAffectation = new JS("BonAffectationDetailsGrid.id")
    }
    )
    )
    .RemoteOperations(true)
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {
        columns.AddFor(m => m.CodePdr).Caption("Code Article").AllowEditing(false);
        columns.AddFor(m => m.CodePdr).Caption("Article")
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("ApproDemandesFournitures").LoadAction("DesignationArticleLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        .AllowClearing(true)
        )
        .EditCellTemplate(@<text> @Html.Partial("DxDropDownBoxArticlesBonAffectation") </text>);
        columns.AddFor(m => m.Qte);
        columns.Add()
        .Type(GridCommandColumnType.Buttons)
        .Width(110)
        .Buttons(b =>
        {
            b.Add().Name(GridColumnButtonName.Edit);
            b.Add().Name(GridColumnButtonName.Delete);
        });
    })
.ColumnChooser(cc => cc
.Enabled(true)
.AllowSearch(true))
.Export(e => e.Enabled(true).AllowExportSelectedData(true))
.FilterRow(f => f.Visible(true))
.HeaderFilter(headerfilter => headerfilter.Visible(true))
.GroupPanel(p => p.Visible(true))
.AllowColumnReordering(true)
.AllowColumnResizing(true)
.OnCellPrepared("receptionCell_prepared")
.Selection(s => s.Mode(SelectionMode.Multiple))
.Editing(editing =>
{
editing.AllowUpdating(true);
editing.AllowDeleting(true);
editing.AllowAdding(true);
editing.Mode(GridEditMode.Form);
})
)
}
@using (Html.DevExtreme().NamedTemplate("FournisseursGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.ApproFournisseurs>()
        .Width("100%")
        .Height("100%")
        .DataSource(ds => ds.Mvc()
        .Controller("Fournisseurs")
        .LoadAction("GetFournisseurs")
        .InsertAction("PostFournisseurs")
        .UpdateAction("PutFournisseurs")
        .DeleteAction("DeleteFournisseurs")
        .Key("NumeroFournisseur"))
        .RemoteOperations(true)
        .NoDataText("Aucune donnée à afficher")
        .CacheEnabled(true)
        .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
        .Scrolling(scrolling => scrolling
        .ScrollByContent(true)
        .ShowScrollbar(ShowScrollbarMode.Always)
        .Mode(GridScrollingMode.Infinite))
        .Columns(columns => {
        columns.AddFor(m => m.NumeroFournisseur).AllowEditing(false);
        columns.AddFor(m => m.SocieteFournisseur);
        columns.AddFor(m => m.Adresse);
        columns.AddFor(m => m.Fonction);
        })
        .Export(e => e.Enabled(true).AllowExportSelectedData(true))
        .FilterRow(f => f.Visible(true))
        .HeaderFilter(headerfilter => headerfilter.Visible(true))
        .GroupPanel(p => p.Visible(true))
        .AllowColumnReordering(true)
        .AllowColumnResizing(true)
        .OnCellPrepared("receptionCell_prepared")
        .Selection(s => s.Mode(SelectionMode.Multiple))
        .Editing(editing =>
        {
            editing.AllowUpdating(true);
            editing.AllowDeleting(false);
            editing.AllowAdding(true);
            editing.Mode(GridEditMode.Row);
        })
        )

}

@(Html.DevExtreme().Popup()
.FullScreen(true)
.ID("AddFournisseur-popup")
.ShowTitle(true)
.Title("Liste Frounisseurs")
.Visible(false)
.DragEnabled(false)
.CloseOnOutsideClick(true)
)
<script>
function gridBoxIdEmployee_valueChanged(e) {
    var $dataGrid = $("#embedded-datagridMultipleIdEmployee");
    if ($dataGrid.length) {
        var dataGrid = $dataGrid.dxDataGrid("instance");
        dataGrid.selectRows(e.value, false);
    }
}
function gridBox_valueChanged(args, setValueMethod) {
    var $dataGrid = $("#embedded-datagridMultipleIdEmployee");

    if ($dataGrid.length) {
        var dataGrid = $dataGrid.dxDataGrid("instance");
        dataGrid.selectRows(args.value, false);
    }
    setValueMethod(args.value);
}
function onSelectionChanged(e, dropDownBoxInstance) {
    var keys = e.selectedRowKeys;
    dropDownBoxInstance.option("value", keys);
    console.log(dropDownBoxInstance);
}
function refreshButton_click() {
    DevExpress.ui.notify("Rafraichissement en cours!");
    var demandesTravailGrid = $("#BonEntree").dxDataGrid("instance");
    var demandesTravailDS = demandesTravailGrid.getDataSource();
    demandesTravailGrid.beginCustomLoading("Chargement en cours...");
    demandesTravailDS.reload();
    demandesTravailGrid.refresh();
    demandesTravailGrid.endCustomLoading();
}
function dateDebutBox_value() {
    var dateDebutBox = $("#FilterDateDebut").dxDateBox("instance");
    console.log(dateDebutBox.option('value'));
    return new Date(dateDebutBox.option('value')).toJSON();
}
function dateFinBox_value() {
    var dateFinBox = $("#FilterDateFin").dxDateBox("instance");
    console.log(dateFinBox.option('value'));
    return new Date(dateFinBox.option('value')).toJSON();
}
function receptionCell_prepared(e) {
    if (e.rowType === "data" && e.column.command === "edit") {
        var isEditing = e.row.isEditing, $links = e.cellElement.find(".dx-link");
        $links.text("");
        if (isEditing) {
            $links.filter(".dx-link-save").addClass("dx-icon-save");
            $links.filter(".dx-link-cancel").addClass("dx-icon-revert");
        } else {
            $links.filter(".dx-link-edit").addClass("dx-icon-edit");
            $links.filter(".dx-link-delete").addClass("dx-icon-trash");
        }
    }
}
function CollpaseAll(e) {
    e.component.collapseAll(-1);
}
var imprimerBoneEntree = function (e) {
    var num = e.row.data.NumBon;
    window.open(' @Url.Action("BonEntreeViewer", "MagasinSuperviseur")?id='+num, '_blank').focus();
    }
function gridBox_valueChanged(args, setValueMethod) {
    var $dataGrid = $("#embedded-datagridMultipleIdEmployee");
    if ($dataGrid.length) {
        var dataGrid = $dataGrid.dxDataGrid("instance");
        dataGrid.selectRows(args.value, false);
    }
    setValueMethod(args.value);
        }
function addFournisseur(e) {
    var popup = $("#AddFournisseur-popup").dxPopup("instance");
    popup.option("contentTemplate", $("#FournisseursGrid"));
        popup.show();
    }
function onSelectionChanged(e, dropDownBoxInstance) {
    var keys = e.selectedRowKeys;
    dropDownBoxInstance.option("value", keys);
}
function onCloseBtnClick(args, dropDownBoxInstance) {
    dropDownBoxInstance.close();
}
var imprimerBonAffectation = function (e) {
    var num = e.row.data.NumBonAffectation;
    window.open(' @Url.Action("BonAffectationViewer", "MagasinSuperviseur")?id='+num, '_blank').focus();
}
    </script>
</body>

</html>
