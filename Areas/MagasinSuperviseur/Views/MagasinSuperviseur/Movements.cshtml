@using DevKbfSteel.Models
@using DevExpress.XtraReports.UI;
@using DevKbfSteel.Controllers
@using DevExpress.XtraReports.Parameters;
@using DevKbfSteel.Reports
@using DevExpress.AspNetCore
@using DevExtreme.AspNet.Mvc
@using DevKbfSteel.Helpers;
@using DevKbfSteel.Areas.MagasinManager.Models;
@using DevKbfSteel.Areas.MagasinSuperviseur.Models;

@{
    ViewData["Title"] = "Magasin-Movements";
    Layout = "~/Views/Shared/_LayoutMagasinSuperviseur.cshtml";
}
@(Html.DevExtreme().Toolbar()
    .Items(items =>
    {
        items.Add()
           .Widget(w => w
           .Button()
           .Icon("refresh")
           .OnClick("refreshButton_click"))
       .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
       .Location(ToolbarItemLocation.Before);
        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("dd-MM-yyyy").ID("FilterDateDebut"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);
        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("dd-MM-yyyy").ID("FilterDateFin"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);
        items.Add()
           .Widget(w => w
           .Button()
           .Hint("Suivi E/S")
           .Icon("print")
           .OnClick("imprimerSuivi"))
           .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
           .Location(ToolbarItemLocation.Before);
        items.Add()
           .Widget(w => w
           .Button()
           .Hint("Suivi Movements")
           .Icon("print")
           .OnClick("imprimerSuiviMovements"))
           .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
           .Location(ToolbarItemLocation.Before);
    }
    )
)
@(Html.DevExtreme().DataGrid<SuiviMovementsModel>()
.ID("IdMovement")
.DataSource(ds => ds.Mvc()
.Controller("Movements")
.LoadAction("GetSuiviMovements")
.LoadParams(new { dateDebut = new JS("dateDebutBox_value"), dateFin = new JS("dateFinBox_value") })
.Key("IdMovement"))
.RemoteOperations(true)
.NoDataText("Aucune donnée à afficher")
.CacheEnabled(true)
.SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
.Columns(columns => {
    columns.AddFor(m => m.NumBon);
    columns.AddFor(m => m.DateMovment)
    .Format("dd-MM-yyyy")
    .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
    columns.AddFor(m => m.TypeMovement)
    .Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("Movements").LoadAction("TypeMovementLookup").Key("Value"))
    .ValueExpr("Value")
    .DisplayExpr("Text")
    .AllowClearing(true));
    columns.AddFor(m => m.CodePdr);
    columns.AddFor(m => m.CodePdr).Caption("Article")
    .Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("Movements").LoadAction("DesignationPdrLookup").Key("Value"))
    .ValueExpr("Value")
    .DisplayExpr("Text")
    .AllowClearing(true));
    columns.AddFor(m => m.Gisement);
    columns.AddFor(m => m.ArticleNonGere);
    columns.AddFor(m => m.UniteMesure);
    columns.AddFor(m => m.Qte);
    columns.AddFor(m => m.PrixUnitaire);
    columns.AddFor(m => m.Montant);
    columns.AddFor(m => m.StockTotalSythese);
    columns.AddFor(m => m.ValeurStockTotal);
    columns.AddFor(m => m.ValeurValorisation);
    columns.AddFor(m => m.TypeValorisation)
    .Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("Movements").LoadAction("TypeValorisationLookup").Key("Value"))
    .ValueExpr("Value")
    .DisplayExpr("Text")
    .AllowClearing(true));
})
.OnRowExpanding("CollpaseAll")
.OnRowExpanded("refreshButton_click")
.Scrolling(s => s.Mode(GridScrollingMode.Infinite))
.ColumnChooser(cc => cc
.Enabled(true)
.AllowSearch(true))
.Height("95%")
.Export(e => e.Enabled(true).AllowExportSelectedData(true))
.FilterRow(f => f.Visible(true))
.HeaderFilter(headerfilter => headerfilter.Visible(true))
.GroupPanel(p => p.Visible(true))
.AllowColumnReordering(true)
.AllowColumnResizing(true)
.OnCellPrepared("receptionCell_prepared")
.Selection(s => s.Mode(SelectionMode.Multiple))
.Editing(editing =>
{
    editing.AllowUpdating(false);
    editing.AllowDeleting(false);
    editing.AllowAdding(false);
    editing.Mode(GridEditMode.Form);
})
)
<script>
    function gridBoxIdEmployee_valueChanged(e) {
        var $dataGrid = $("#embedded-datagridMultipleIdEmployee");
        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(e.value, false);
        }
    }
    function gridBox_valueChanged(args, setValueMethod) {
        var $dataGrid = $("#embedded-datagridMultipleIdEmployee");

        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(args.value, false);
        }
        setValueMethod(args.value);
    }
    function onSelectionChanged(e, dropDownBoxInstance) {
        var keys = e.selectedRowKeys;
        dropDownBoxInstance.option("value", keys);
        console.log(dropDownBoxInstance);
    }
    function refreshButton_click() {
        DevExpress.ui.notify("Rafraichissement en cours!");
        var demandesTravailGrid = $("#IdMovement").dxDataGrid("instance");
        var demandesTravailDS = demandesTravailGrid.getDataSource();
        demandesTravailGrid.beginCustomLoading("Chargement en cours...");
        demandesTravailDS.reload();
        demandesTravailGrid.refresh();
        demandesTravailGrid.endCustomLoading();
    }
    function dateDebutBox_value() {
        var dateDebutBox = $("#FilterDateDebut").dxDateBox("instance");
        console.log(dateDebutBox.option('value'));
        return new Date(dateDebutBox.option('value')).toJSON();
    }
    function CollpaseAll(e) {
        e.component.collapseAll(-1);
    }

    function dateFinBox_value() {
        var dateFinBox = $("#FilterDateFin").dxDateBox("instance");
        console.log(dateFinBox.option('value'));
        return new Date(dateFinBox.option('value')).toJSON();
    }
    function receptionCell_prepared(e) {
        if (e.rowType === "data" && e.column.command === "edit") {
            var isEditing = e.row.isEditing, $links = e.cellElement.find(".dx-link");
            $links.text("");
            if (isEditing) {
                $links.filter(".dx-link-save").addClass("dx-icon-save");
                $links.filter(".dx-link-cancel").addClass("dx-icon-revert");
            } else {
                $links.filter(".dx-link-edit").addClass("dx-icon-edit");
                $links.filter(".dx-link-delete").addClass("dx-icon-trash");
            }
        }
    }
    var imprimerBoneSortie = function (e) {
        var num = e.row.data.NumBonSortie;
        window.open(' @Url.Action("BonSortieViewer", "MagasinManager")?id='+num, '_blank').focus();
        }
    function gridBox_valueChanged(args, setValueMethod) {
        var $dataGrid = $("#embedded-datagridMultipleIdEmployee");
        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(args.value, false);
        }
        setValueMethod(args.value);
    }
    function onSelectionChanged(e, dropDownBoxInstance) {
        var keys = e.selectedRowKeys;
        dropDownBoxInstance.option("value", keys);
    }
    var imprimerSuivi = function (e) {
        window.open(' @Url.Action("SuiviESViewer", "MagasinSuperviseur")', '_blank').focus();
    }
    var imprimerSuiviMovements = function (e) {
        window.open(' @Url.Action("SuiviMovementViewer", "MagasinSuperviseur")', '_blank').focus();
    }
    function onCloseBtnClick(args, dropDownBoxInstance) {
        dropDownBoxInstance.close();
    }
</script>