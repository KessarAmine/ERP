@using DevKbfSteel.Models
@using DevExpress.XtraReports.UI;
@using DevKbfSteel.Controllers
@using DevExpress.XtraReports.Parameters;
@using DevKbfSteel.Reports
@using DevExpress.AspNetCore
@using DevExtreme.AspNet.Mvc
@{
    ViewData["Title"] = "Magasin-Suivi Billettes";
    Layout = "~/Views/Shared/_LayoutMagasinSuperviseur.cshtml";
}

@(Html.DevExtreme().Toolbar()
    .Items(items =>
    {
        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("yyyy-MM-dd").ID("FilterDateDebut"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);

        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("yyyy-MM-dd").ID("FilterDateFin"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);

    }
    )
)
@(Html.DevExtreme().TabPanel()
        .Height("100%")
        .Items(items =>
        {
            items.Add()
                .Title("Reception")
                .Template(new TemplateName("ReceptionGrid"));
            items.Add()
                .Title("Transfert")
                .Template(new TemplateName("TransfertGrid"));
            items.Add()
                .Title("Récap")
                .Template(new TemplateName("RécapGrid"));
        })
        )

@using (Html.DevExtreme().NamedTemplate("ReceptionGrid"))
{

    @(Html.DevExtreme().Toolbar()
    .Items(items =>
    {
        items.Add()
           .Widget(w => w
           .Button()
           .Icon("refresh")
           .OnClick("refreshButton_click")
       )
       .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
       .Location(ToolbarItemLocation.Before);

    }
    )
)
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkReceptionBillette>()
    .ID("ReceptionGrid")
    .DataSource(ds => ds.Mvc()
        .Controller("Bilettes")
        .LoadAction("GetReceptionBillettes")
        .InsertAction("PostReceptionBillette")
        .UpdateAction("PutReceptionBillette")
        .DeleteAction("DeleteReceptionBillette")
        .Key("NumReception")
        .LoadParams(new { dateDebut = new JS("dateDebutBox_value"), dateFin = new JS("dateFinBox_value") })
    )
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always))
    .Height("90%")
    .OnRowExpanding("CollpaseAll")
    .OnRowExpanded("refreshButton_click")
    .RemoteOperations(true)
    .Columns(columns => {

        columns.AddFor(m => m.DateReception).Format("yyyy-MM-dd")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
        columns.AddFor(m => m.BilleteRecue);
        columns.AddFor(m => m.Navire);
        columns.Add()
        .Type(GridCommandColumnType.Buttons)
        .Width(110)
        .Buttons(b =>
        {
            b.Add().Name(GridColumnButtonName.Edit);
            b.Add().Name(GridColumnButtonName.Delete);
            b.Add()
            .Hint("Imprimer")
            .OnClick(@<text>imprimerReceptionBillette</text>)
            .Icon("print");
        });
    })
    .Editing(editing =>
    {
        editing.AllowUpdating(true);
        editing.AllowDeleting(true);
        editing.AllowAdding(true);
        editing.Mode(GridEditMode.Form);
    })
    .MasterDetail(md => md
    .Enabled(true)
    .Template(new TemplateName("ReceptionGridDetails"))
    )
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
)
}
@using (Html.DevExtreme().NamedTemplate("ReceptionGridDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Détails")
                .Template(new TemplateName("ReceptionGridDetailsGrid"))
                .Option("ReceptionGridDetailsGrid", new { id = new JS("data.NumReception") });
        })
        )
}
@using (Html.DevExtreme().NamedTemplate("ReceptionGridDetailsGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkReceptionBilletteDetails>()
    .DataSource(ds => ds.Mvc()
        .Controller("Bilettes")
        .LoadAction("GetReceptionBillettesDetails")
        .InsertAction("PostReceptionBilletteDetails")
        .UpdateAction("PutReceptionBilletteDetails")
        .DeleteAction("DeleteReceptionBilletteDetails")
        .Key("Id")
        .LoadParams(new
        {
            id = new JS("ReceptionGridDetailsGrid.id")
        })
    )
    .Columns(columns => {

        columns.AddFor(m => m.NumBon);
        columns.AddFor(m => m.NumImRemorque);
        columns.AddFor(m => m.NumImTracteur);
        columns.AddFor(m => m.NbrFdx);
        columns.AddFor(m => m.NbrPieces);
        columns.AddFor(m => m.NetPoidTh);

        columns.Add()
        .Type(GridCommandColumnType.Buttons)
        .Width(110)
        .Buttons(b =>
        {
            b.Add().Name(GridColumnButtonName.Edit).Icon("edit");
            b.Add().Name(GridColumnButtonName.Delete).Icon("trash");
        });
    })
    .Editing(editing =>
    {
        editing.AllowUpdating(true);
        editing.AllowDeleting(true);
        editing.AllowAdding(true);
        editing.Mode(GridEditMode.Form);
    })
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .Selection(s => s.Mode(SelectionMode.Multiple))
)
}

@using (Html.DevExtreme().NamedTemplate("TransfertGrid"))
{@(Html.DevExtreme().Toolbar()
    .Items(items =>
    {
        items.Add()
           .Widget(w => w
           .Button()
           .Icon("refresh")
           .OnClick("refreshButton_click2")
       )
       .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
       .Location(ToolbarItemLocation.Before);

    }
    )
)
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkRapportTransfertBillette>()
        .ID("TransfertGrid")
    .DataSource(ds => ds.Mvc()
        .Controller("Bilettes")
        .LoadAction("GetTransfertBillettes")
        .InsertAction("PostTransfertBillette")
        .UpdateAction("PutTransfertBillette")
        .DeleteAction("DeleteTransfertBillette")
        .Key("NumRapportTransfert")
        .LoadParams(new { dateDebut = new JS("dateDebutBox_value"), dateFin = new JS("dateFinBox_value") })
    )
.OnRowExpanding("CollpaseAll")
.OnRowExpanded("refreshButton_click")
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always))
    .Height("90%")
    .RemoteOperations(true)
    .Columns(columns => {

        columns.AddFor(m => m.DateTransfert).Format("d/M/yyyy")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
        columns.Add()
        .Type(GridCommandColumnType.Buttons)
        .Width(110)
        .Buttons(b =>
        {
            b.Add().Name(GridColumnButtonName.Edit);
            b.Add().Name(GridColumnButtonName.Delete);
            b.Add()
            .Hint("Imprimer")
            .OnClick(@<text>imprimerTransfertBillette</text>)
            .Icon("print");
        });

    })
   .ColumnChooser(cc => cc.Enabled(true).AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
    .Editing(editing =>
    {
        editing.AllowUpdating(true);
        editing.AllowDeleting(true);
        editing.AllowAdding(true);
        editing.Mode(GridEditMode.Form);
    })
    .MasterDetail(md => md
    .Enabled(true)
    .Template(new TemplateName("TransfertGridDetails"))
    )
)
}
@using (Html.DevExtreme().NamedTemplate("TransfertGridDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Détails")
                .Template(new TemplateName("TransfertGridDetailsGrid"))
                .Option("TransfertGridDetailsGrid", new { id = new JS("data.NumRapportTransfert") });
        })
        )
}
@using (Html.DevExtreme().NamedTemplate("TransfertGridDetailsGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.StkRapportTransfertBillettesDetails>()
    .DataSource(ds => ds.Mvc()
        .Controller("Bilettes")
        .LoadAction("GetTransfertBillettesDetails")
        .InsertAction("PostTransfertBilletteDetails")
        .UpdateAction("PutTransfertBilletteDetails")
        .DeleteAction("DeleteTransfertBilletteDetails")
        .Key("Id")
        .LoadParams(new
        {
            id = new JS("TransfertGridDetailsGrid.id")
        })
    )
    .Columns(columns => {
        columns.AddFor(m => m.HeureTransfert).Format("yyyy-MM-dd HH:mm")
        .DataType(GridColumnDataType.DateTime)
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
        columns.AddFor(m => m.Billette);
        columns.AddFor(m => m.NbrFdx);
        columns.AddFor(m => m.NbrPieces);
        columns.AddFor(m => m.Observation);
        columns.Add()
        .Type(GridCommandColumnType.Buttons)
        .Width(110)
        .Buttons(b =>
        {
            b.Add().Name(GridColumnButtonName.Edit);
            b.Add().Name(GridColumnButtonName.Delete);
        });
    })
    .Editing(editing =>
    {
        editing.AllowUpdating(true);
        editing.AllowDeleting(true);
        editing.AllowAdding(true);
        editing.Mode(GridEditMode.Form);
    })
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .Selection(s => s.Mode(SelectionMode.Multiple))
)
}

@using (Html.DevExtreme().NamedTemplate("RécapGrid"))
{

    @(Html.DevExtreme().Toolbar()
    .Items(items =>
    {
        items.Add()
           .Widget(w => w
           .Button()
           .Icon("refresh")
           .OnClick("refreshButton_click3")
       )
       .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
       .Location(ToolbarItemLocation.Before);
        items.Add()
        .Widget(w => w.Button()
            .Icon("fas fa-clipboard-list")
            .OnClick("imprimerRecapeBillette")
            .Hint("Imprimier Récape"))

        .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
        .Location(ToolbarItemLocation.Before);
    }
    )
)
    @(Html.DevExtreme().DataGrid < DevKbfSteel.Areas.MagasinManager.Models.RecapBillettesModel>()
    .ID("RécapGrid")
    .DataSource(ds => ds.Mvc()
        .Controller("Bilettes")
        .LoadAction("GetRecapBillettes")
        .Key("Date")
        .LoadParams(new { dateDebut = new JS("dateDebutBox_value"), dateFin = new JS("dateFinBox_value") })
    )
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always))
    .Height("90%")
    .RemoteOperations(true)
    .Columns(columns => {

        columns.AddFor(m => m.Date).Format("yyyy-MM-dd")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
        columns.AddFor(m => m.Navire);
        columns.AddFor(m => m.NbrFdx);
        columns.AddFor(m => m.NbrPieces);
        columns.AddFor(m => m.NbrRotations);
        columns.AddFor(m => m.Tonnage);
        columns.Add()
        .Type(GridCommandColumnType.Buttons)
        .Width(110)
        .Buttons(b =>
        {
            b.Add()
            .Hint("Imprimer")
            .OnClick(@<text>imprimerRecapeBillette</text>)
            .Icon("print");
        });
    })
    .Editing(editing =>
    {
        editing.AllowUpdating(false);
        editing.AllowDeleting(false);
        editing.AllowAdding(false);
        editing.Mode(GridEditMode.Form);
    })
    .Summary(s => s.TotalItems(items =>
    {
        items.AddFor(m => m.NbrFdx)
            .SummaryType(SummaryType.Sum)
            .ShowInColumn("NbrFdx")
            .DisplayFormat("Total : {0}");
        items.AddFor(m => m.Tonnage)
            .SummaryType(SummaryType.Sum)
            .ShowInColumn("Tonnage")
            .DisplayFormat("Total : {0}");
        items.AddFor(m => m.NbrRotations)
            .SummaryType(SummaryType.Sum)
            .ShowInColumn("NbrRotations")
            .DisplayFormat("Total : {0}");
        items.AddFor(m => m.NbrPieces)
            .SummaryType(SummaryType.Sum)
            .ShowInColumn("NbrPieces")
            .DisplayFormat("Total : {0}");
    }))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
)
}

<script>

    function refreshButton_click() {
        DevExpress.ui.notify("Rafraichissement en cours!");
        var demandesTravailGrid = $("#ReceptionGrid").dxDataGrid("instance");
        var demandesTravailDS = demandesTravailGrid.getDataSource();
        demandesTravailGrid.beginCustomLoading("Chargement en cours...");
        demandesTravailDS.reload();
        demandesTravailGrid.refresh();
        demandesTravailGrid.endCustomLoading();
    }
    function refreshButton_click2() {
        DevExpress.ui.notify("Rafraichissement en cours!");
        var demandesTravailGrid = $("#TransfertGrid").dxDataGrid("instance");
        var demandesTravailDS = demandesTravailGrid.getDataSource();
        demandesTravailGrid.beginCustomLoading("Chargement en cours...");
        demandesTravailDS.reload();
        demandesTravailGrid.refresh();
        demandesTravailGrid.endCustomLoading();
    }
    function CollpaseAll(e) {
        e.component.collapseAll(-1);
    }

    function refreshButton_click3() {
        DevExpress.ui.notify("Rafraichissement en cours!");
        var demandesTravailGrid = $("#RécapGrid").dxDataGrid("instance");
        var demandesTravailDS = demandesTravailGrid.getDataSource();
        demandesTravailGrid.beginCustomLoading("Chargement en cours...");
        demandesTravailDS.reload();
        demandesTravailGrid.refresh();
        demandesTravailGrid.endCustomLoading();
    }
    function addButton_click() {
        DevExpress.ui.notify("Ajouter une demande!");
        window.location.href = '@Url.Action("NewReception")';
    }

    function dateDebutBox_value() {
        var dateDebutBox = $("#FilterDateDebut").dxDateBox("instance");
        console.log(dateDebutBox.option('value'));
        return new Date(dateDebutBox.option('value')).toJSON();
    }

    function dateFinBox_value() {
        var dateFinBox = $("#FilterDateFin").dxDateBox("instance");
        console.log(dateFinBox.option('value'));
        return new Date(dateFinBox.option('value')).toJSON();
    }

    function receptionCell_prepared(e) {
    console.log(e.rowType.data)
    if (e.rowType === "data" && e.column.command === "edit") {
        var isEditing = e.row.isEditing, $links = e.cellElement.find(".dx-link");
        $links.text("");
        if (isEditing) {
            $links.filter(".dx-link-save").addClass("dx-icon-save");
            $links.filter(".dx-link-cancel").addClass("dx-icon-revert");
        } else {
            $links.filter(".dx-link-edit").addClass("dx-icon-edit");
            $links.filter(".dx-link-delete").addClass("dx-icon-trash");
        }
    }
    }
    var imprimerReceptionBillette = function (e) {
        var num = e.row.data.NumReception;
        window.open(' @Url.Action("ReceptionBilletteViewer", "MagasinSuperviseur")?id='+num, '_blank').focus();
        }
    var imprimerTransfertBillette = function (e) {
        var num = e.row.data.NumRapportTransfert;
        window.open(' @Url.Action("TransfertBilletteViewer", "MagasinSuperviseur")?id='+num, '_blank').focus();
        }
    var imprimerRecapeBillette = function (e) {
    var Datedebut = $("#FilterDateDebut").dxDateBox("instance").option("text");
    var Datefin = $("#FilterDateFin").dxDateBox("instance").option("text");
    window.open(' @Url.Action("RecapeBilletteViewer", "MagasinSuperviseur")?Datedebut=' + Datedebut + '&Datefin=' + Datefin,'_blank').focus();
    }
</script>
