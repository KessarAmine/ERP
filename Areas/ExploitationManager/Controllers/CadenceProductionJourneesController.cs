using DevExtreme.AspNet.Data;
using DevExtreme.AspNet.Mvc;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;
using DevKbfSteel.Entities;
using Microsoft.AspNetCore.Authorization;

namespace DevKbfSteel.Controllers
{
    [Route("api/[controller]/[action]")]
    [Authorize(Roles = "ExploitationManager")]

    public class CadenceProductionJourneesController : Controller
    {
        private KBFsteelContext _context;

        public CadenceProductionJourneesController(KBFsteelContext context) {
            _context = context;
        }

        [HttpGet]
        public async Task<IActionResult> Get(int id, DataSourceLoadOptions loadOptions) {
            var cadenceproductionjournee = _context.CadenceProductionJournee.Where(i => i.NumRapport == id)
                .Select(i => new {
                i.Id,
                i.NumRapport,
                i.H1,
                i.H2,
                i.H3,
                i.H4,
                i.H5,
                i.H6,
                i.H7,
                i.H8,
                i.H9,
                i.H10,
                i.H11,
                i.H12
            });;

            // If you work with a large amount of data, consider specifying the PaginateViaPrimaryKey and PrimaryKey properties.
            // In this case, keys and data are loaded in separate queries. This can make the SQL execution plan more efficient.
            // Refer to the topic https://github.com/DevExpress/DevExtreme.AspNet.Data/issues/336.
            // loadOptions.PrimaryKey = new[] { "Id" };
            // loadOptions.PaginateViaPrimaryKey = true;

            return Json(await DataSourceLoader.LoadAsync(cadenceproductionjournee, loadOptions));
        }

        [HttpGet]
        public async Task<IActionResult> GetRapport(int id, DataSourceLoadOptions loadOptions)
        {
            var journeeProduction = _context.JourneeProduction.Where(c => c.NumBon == id)
                .Select(i => new {
                    i.NumRapport
                }).ToList();
            if (journeeProduction.Count > 0)
            {
                var m = journeeProduction.Last();
                 var cadenceproductionjournee = _context.CadenceProductionJournee.Where(i => i.NumRapport == m.NumRapport)
                .Select(i => new {
                    i.Id,
                    i.NumRapport,
                    i.H1,
                    i.H2,
                    i.H3,
                    i.H4,
                    i.H5,
                    i.H6,
                    i.H7,
                    i.H8,
                    i.H9,
                    i.H10,
                    i.H11
                });
                return Json(await DataSourceLoader.LoadAsync(cadenceproductionjournee, loadOptions));

            }
            else
            {
                 var cadenceproductionjournee = _context.CadenceProductionJournee.Where(i => i.NumRapport == 0)
                .Select(i => new {
                    i.Id,
                    i.NumRapport,
                    i.H1,
                    i.H2,
                    i.H3,
                    i.H4,
                    i.H5,
                    i.H6,
                    i.H7,
                    i.H8,
                    i.H9,
                    i.H10,
                    i.H11
                });
                return Json(await DataSourceLoader.LoadAsync(cadenceproductionjournee, loadOptions));

            }

            // If you work with a large amount of data, consider specifying the PaginateViaPrimaryKey and PrimaryKey properties.
            // In this case, keys and data are loaded in separate queries. This can make the SQL execution plan more efficient.
            // Refer to the topic https://github.com/DevExpress/DevExtreme.AspNet.Data/issues/336.
            // loadOptions.PrimaryKey = new[] { "Id" };
            // loadOptions.PaginateViaPrimaryKey = true;

        }

        [HttpPost]
        public async Task<IActionResult> Post(string values) {
            var model = new CadenceProductionJournee();
            var valuesDict = JsonConvert.DeserializeObject<IDictionary>(values);
            PopulateModel(model, valuesDict);

            if(!TryValidateModel(model))
                return BadRequest(GetFullErrorMessage(ModelState));
            var cadenceProductionJournee = _context.CadenceProductionJournee
                .OrderBy(o => o.Id)
                .Select(i => new
                {
                    i.Id
                }).ToList();
            if (cadenceProductionJournee.Count == 0)
                model.Id = 1;
            else
            {
                var m = cadenceProductionJournee.Last();
                model.Id = Convert.ToInt32(m.Id) + 1;
            }
            var result = _context.CadenceProductionJournee.Add(model);
            await _context.SaveChangesAsync();

            return Json(result.Entity.Id);
        }

        [HttpPut]
        public async Task<IActionResult> Put(int key, string values) {
                var model = await _context.CadenceProductionJournee.FirstOrDefaultAsync(item => item.Id == key);
            if(model == null)
                return StatusCode(409, "Object not found");

            var valuesDict = JsonConvert.DeserializeObject<IDictionary>(values);
            PopulateModel(model, valuesDict);

            if(!TryValidateModel(model))
                return BadRequest(GetFullErrorMessage(ModelState));

            await _context.SaveChangesAsync();
            return Ok();
        }

        [HttpDelete]
        public async Task Delete(int key) {
            var model = await _context.CadenceProductionJournee.FirstOrDefaultAsync(item => item.Id == key);

            _context.CadenceProductionJournee.Remove(model);
            await _context.SaveChangesAsync();
        }


        [HttpGet]
        public async Task<IActionResult> JourneeProductionLookup(DataSourceLoadOptions loadOptions) {
            var lookup = from i in _context.JourneeProduction
                         orderby i.DimProduitFini
                         select new {
                             Value = i.NumRapport,
                             Text = i.DimProduitFini
                         };
            return Json(await DataSourceLoader.LoadAsync(lookup, loadOptions));
        }

        private void PopulateModel(CadenceProductionJournee model, IDictionary values) {
            string ID = nameof(CadenceProductionJournee.Id);
            string NUM_RAPPORT = nameof(CadenceProductionJournee.NumRapport);
            string H1 = nameof(CadenceProductionJournee.H1);
            string H2 = nameof(CadenceProductionJournee.H2);
            string H3 = nameof(CadenceProductionJournee.H3);
            string H4 = nameof(CadenceProductionJournee.H4);
            string H5 = nameof(CadenceProductionJournee.H5);
            string H6 = nameof(CadenceProductionJournee.H6);
            string H7 = nameof(CadenceProductionJournee.H7);
            string H8 = nameof(CadenceProductionJournee.H8);
            string H9 = nameof(CadenceProductionJournee.H9);
            string H10 = nameof(CadenceProductionJournee.H10);
            string H11 = nameof(CadenceProductionJournee.H11);
            string H12 = nameof(CadenceProductionJournee.H12);

            if (values.Contains(ID)) {
                model.Id = Convert.ToInt32(values[ID]);
            }

            if(values.Contains(NUM_RAPPORT)) {
                model.NumRapport = Convert.ToInt32(values[NUM_RAPPORT]);
            }
            if (values.Contains(H12))
            {
                model.H12 = Convert.ToInt32(values[H12]);
            }
            if (values.Contains(H1)) {
                model.H1 = Convert.ToInt32(values[H1]);
            }

            if(values.Contains(H2)) {
                model.H2 = Convert.ToInt32(values[H2]);
            }

            if(values.Contains(H3)) {
                model.H3 = Convert.ToInt32(values[H3]);
            }

            if(values.Contains(H4)) {
                model.H4 = Convert.ToInt32(values[H4]);
            }

            if(values.Contains(H5)) {
                model.H5 = Convert.ToInt32(values[H5]);
            }

            if(values.Contains(H6)) {
                model.H6 = Convert.ToInt32(values[H6]);
            }

            if(values.Contains(H7)) {
                model.H7 = Convert.ToInt32(values[H7]);
            }

            if(values.Contains(H8)) {
                model.H8 = Convert.ToInt32(values[H8]);
            }

            if(values.Contains(H9)) {
                model.H9 = Convert.ToInt32(values[H9]);
            }

            if(values.Contains(H10)) {
                model.H10 = Convert.ToInt32(values[H10]);
            }

            if(values.Contains(H11)) {
                model.H11 = Convert.ToInt32(values[H11]);
            }
        }

        private string GetFullErrorMessage(ModelStateDictionary modelState) {
            var messages = new List<string>();

            foreach(var entry in modelState) {
                foreach(var error in entry.Value.Errors)
                    messages.Add(error.ErrorMessage);
            }

            return String.Join(" ", messages);
        }
    }
}