using DevExtreme.AspNet.Data;
using DevExtreme.AspNet.Mvc;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;
using DevKbfSteel.Entities;
using Microsoft.AspNetCore.Authorization;

namespace DevKbfSteel.Controllers
{
    [Route("api/[controller]/[action]")]
    [Authorize(Roles = "ExploitationManager")]

    public class OrdreProductionsController : Controller
    {
        private KBFsteelContext _context;

        public OrdreProductionsController(KBFsteelContext context) {
            _context = context;
        }

        [HttpGet]
        public async Task<IActionResult> Get(DateTime dateDebut, DateTime dateFin, DataSourceLoadOptions loadOptions) {
            var ordreproduction = _context.OrdreProduction.Where(c => c.Date >= dateDebut && c.Date <= dateFin)
                .Select(i => new {
                i.NumOrdre,
                i.NumBon,
                i.Date,
                i.DateDebut,
                i.DateFin,
                i.Periode,
                i.CodeDemandeur
            });

            // If you work with a large amount of data, consider specifying the PaginateViaPrimaryKey and PrimaryKey properties.
            // In this case, keys and data are loaded in separate queries. This can make the SQL execution plan more efficient.
            // Refer to the topic https://github.com/DevExpress/DevExtreme.AspNet.Data/issues/336.
            // loadOptions.PrimaryKey = new[] { "NumOrdre" };
            // loadOptions.PaginateViaPrimaryKey = true;

            return Json(await DataSourceLoader.LoadAsync(ordreproduction, loadOptions));
        }

        [HttpPost]
        public async Task<IActionResult> Post(string values) {
            var model = new OrdreProduction();
            var valuesDict = JsonConvert.DeserializeObject<IDictionary>(values);
            PopulateModel(model, valuesDict);

            if(!TryValidateModel(model))
                return BadRequest(GetFullErrorMessage(ModelState));

            var ordreProduction = _context.OrdreProduction
            .OrderBy(o => o.NumOrdre)
            .Select(i => new
            {
                i.NumOrdre
            }).ToList();
            if (ordreProduction.Count == 0)
                model.NumOrdre = 1;
            else {
                var m = ordreProduction.Last();
                model.NumOrdre = Convert.ToInt32(m.NumOrdre) + 1;
            }

            var result = _context.OrdreProduction.Add(model);
            await _context.SaveChangesAsync();

            return Json(result.Entity.NumOrdre);
        }

        [HttpPut]
        public async Task<IActionResult> Put(int key, string values) {
            var model = await _context.OrdreProduction.FirstOrDefaultAsync(item => item.NumOrdre == key);
            if(model == null)
                return StatusCode(409, "Object not found");

            var valuesDict = JsonConvert.DeserializeObject<IDictionary>(values);
            PopulateModel(model, valuesDict);

            if(!TryValidateModel(model))
                return BadRequest(GetFullErrorMessage(ModelState));

            await _context.SaveChangesAsync();
            return Ok();
        }

        [HttpDelete]
        public async Task Delete(int key) {
            var model = await _context.OrdreProduction.FirstOrDefaultAsync(item => item.NumOrdre == key);

            _context.OrdreProduction.Remove(model);
            await _context.SaveChangesAsync();
        }


        [HttpGet]
        public async Task<IActionResult> BonProductionLookup(DataSourceLoadOptions loadOptions) {
            var lookup = from i in _context.BonProduction
                         orderby i.NumBon
                         select new {
                             Value = i.NumBon,
                             Text = i.NumBon
                         };
            return Json(await DataSourceLoader.LoadAsync(lookup, loadOptions));
        }

        [HttpGet]
        public async Task<IActionResult> PeriodeProductionLookup(DataSourceLoadOptions loadOptions) {
            var lookup = from i in _context.PeriodeProduction
                         orderby i.DesignationPeriode
                         select new {
                             Value = i.DesignationPeriode,
                             Text = i.DesignationPeriode
                         };
            return Json(await DataSourceLoader.LoadAsync(lookup, loadOptions));
        }

        private void PopulateModel(OrdreProduction model, IDictionary values) {
            string NUM_ORDRE = nameof(OrdreProduction.NumOrdre);
            string NUM_BON = nameof(OrdreProduction.NumBon);
            string DATE = nameof(OrdreProduction.Date);
            string DATE_DEBUT = nameof(OrdreProduction.DateDebut);
            string DATE_FIN = nameof(OrdreProduction.DateFin);
            string PERIODE = nameof(OrdreProduction.Periode);
            string CODE_DEMANDEUR = nameof(OrdreProduction.CodeDemandeur);

            if(values.Contains(NUM_ORDRE)) {
                model.NumOrdre = Convert.ToInt32(values[NUM_ORDRE]);
            }

            if(values.Contains(NUM_BON)) {
                model.NumBon = Convert.ToInt32(values[NUM_BON]);
            }

            if(values.Contains(DATE)) {
                model.Date = Convert.ToDateTime(values[DATE]);
            }

            if(values.Contains(DATE_DEBUT)) {
                model.DateDebut = Convert.ToDateTime(values[DATE_DEBUT]);
            }

            if(values.Contains(DATE_FIN)) {
                model.DateFin = Convert.ToDateTime(values[DATE_FIN]);
            }

            if(values.Contains(PERIODE)) {
                model.Periode = Convert.ToString(values[PERIODE]);
            }

            if(values.Contains(CODE_DEMANDEUR)) {
                model.CodeDemandeur = Convert.ToInt32(values[CODE_DEMANDEUR]);
            }
        }

        private string GetFullErrorMessage(ModelStateDictionary modelState) {
            var messages = new List<string>();

            foreach(var entry in modelState) {
                foreach(var error in entry.Value.Errors)
                    messages.Add(error.ErrorMessage);
            }

            return String.Join(" ", messages);
        }
    }
}