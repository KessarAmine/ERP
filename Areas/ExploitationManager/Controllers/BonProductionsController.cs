using DevExtreme.AspNet.Data;
using DevExtreme.AspNet.Mvc;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;
using DevKbfSteel.Entities;
using Microsoft.AspNetCore.Authorization;

namespace DevKbfSteel.Controllers
{
    [Route("api/[controller]/[action]")]
    [Authorize(Roles = "ExploitationManager")]

    public class BonProductionsController : Controller
    {
        private KBFsteelContext _context;

        public BonProductionsController(KBFsteelContext context) {
            _context = context;
        }

        [HttpGet]
        public async Task<IActionResult> Get(DateTime dateDebut, DateTime dateFin, DataSourceLoadOptions loadOptions) {
            var bonproduction = _context.BonProduction.Where(c => c.Date >= dateDebut && c.Date <= dateFin)
                .Select(i => new {
                i.NumBon,
                i.CodeProduit,
                i.UniteMesure,
                i.Qte,
                i.Nb,
                i.CodeReceveur
            });

            // If you work with a large amount of data, consider specifying the PaginateViaPrimaryKey and PrimaryKey properties.
            // In this case, keys and data are loaded in separate queries. This can make the SQL execution plan more efficient.
            // Refer to the topic https://github.com/DevExpress/DevExtreme.AspNet.Data/issues/336.
            // loadOptions.PrimaryKey = new[] { "NumBon" };
            // loadOptions.PaginateViaPrimaryKey = true;

            return Json(await DataSourceLoader.LoadAsync(bonproduction, loadOptions));
        }
        [HttpGet]
        public async Task<IActionResult> GetRapport(int id, DataSourceLoadOptions loadOptions)
        {
            var bonproduction = _context.JourneeProduction.Where(c => c.NumBon == id)
                .Select(i => new {
                    i.NumRapport,
                    i.Date,
                    i.Poste,
                    i.NumBon,
                    i.OperateurPcp,
                    i.ChefPoste,
                    i.IngProcess,
                    i.DimProduitFini,
                    i.DimProduitConforme,
                    i.DimBillete,
                    i.LongBillete,
                    i.NbrRealisee,
                    i.NbrExpulsee,
                    i.NbrDefourne,
                    i.NbrCisaille
                });

            // If you work with a large amount of data, consider specifying the PaginateViaPrimaryKey and PrimaryKey properties.
            // In this case, keys and data are loaded in separate queries. This can make the SQL execution plan more efficient.
            // Refer to the topic https://github.com/DevExpress/DevExtreme.AspNet.Data/issues/336.
            // loadOptions.PrimaryKey = new[] { "NumBon" };
            // loadOptions.PaginateViaPrimaryKey = true;

            return Json(await DataSourceLoader.LoadAsync(bonproduction, loadOptions));
        }

        [HttpPost]
        public async Task<IActionResult> Post(string values) {
            var model = new BonProduction();
            var valuesDict = JsonConvert.DeserializeObject<IDictionary>(values);
            PopulateModel(model, valuesDict);

            if(!TryValidateModel(model))
                return BadRequest(GetFullErrorMessage(ModelState));

            var result = _context.BonProduction.Add(model);
            await _context.SaveChangesAsync();

            return Json(result.Entity.NumBon);
        }

        [HttpPut]
        public async Task<IActionResult> Put(int key, string values) {
            var model = await _context.BonProduction.FirstOrDefaultAsync(item => item.NumBon == key);
            if(model == null)
                return StatusCode(409, "Object not found");

            var valuesDict = JsonConvert.DeserializeObject<IDictionary>(values);
            PopulateModel(model, valuesDict);

            if(!TryValidateModel(model))
                return BadRequest(GetFullErrorMessage(ModelState));

            await _context.SaveChangesAsync();
            return Ok();
        }

        [HttpDelete]
        public async Task Delete(int key) {
            var model = await _context.BonProduction.FirstOrDefaultAsync(item => item.NumBon == key);

            _context.BonProduction.Remove(model);
            await _context.SaveChangesAsync();
        }


        [HttpGet]
        public async Task<IActionResult> ProduitsLookup(DataSourceLoadOptions loadOptions) {
            var lookup = from i in _context.Produits
                         orderby i.Designation
                         select new {
                             Value = i.CodeProduit,
                             Text = i.Designation
                         };
            return Json(await DataSourceLoader.LoadAsync(lookup, loadOptions));
        }

        [HttpGet]
        public async Task<IActionResult> IntervenantLookup(DataSourceLoadOptions loadOptions)
        {
            var lookup = from i in _context.Intervenant
                         orderby i.NmPr
                         where i.CodeStructure.Equals("3")
                         select new
                         {
                             Value = i.CodeIntervenant,
                             Text = i.NmPr
                         };
            return Json(await DataSourceLoader.LoadAsync(lookup, loadOptions));
        }

        private void PopulateModel(BonProduction model, IDictionary values) {
            string NUM_BON = nameof(BonProduction.NumBon);
            string CODE_PRODUIT = nameof(BonProduction.CodeProduit);
            string UNITE_MESURE = nameof(BonProduction.UniteMesure);
            string QTE = nameof(BonProduction.Qte);
            string NB = nameof(BonProduction.Nb);
            string CODE_RECEVEUR = nameof(BonProduction.CodeReceveur);

            if(values.Contains(NUM_BON)) {
                model.NumBon = Convert.ToInt32(values[NUM_BON]);
            }

            if(values.Contains(CODE_PRODUIT)) {
                model.CodeProduit = Convert.ToInt32(values[CODE_PRODUIT]);
            }

            if(values.Contains(UNITE_MESURE)) {
                model.UniteMesure = Convert.ToString(values[UNITE_MESURE]);
            }

            if(values.Contains(QTE)) {
                model.Qte = Convert.ToString(values[QTE]);
            }

            if(values.Contains(NB)) {
                model.Nb = Convert.ToString(values[NB]);
            }

            if(values.Contains(CODE_RECEVEUR)) {
                model.CodeReceveur = Convert.ToInt32(values[CODE_RECEVEUR]);
            }
        }

        private string GetFullErrorMessage(ModelStateDictionary modelState) {
            var messages = new List<string>();

            foreach(var entry in modelState) {
                foreach(var error in entry.Value.Errors)
                    messages.Add(error.ErrorMessage);
            }

            return String.Join(" ", messages);
        }
    }
}