using DevExtreme.AspNet.Data;
using DevExtreme.AspNet.Mvc;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;
using DevKbfSteel.Entities;
using Microsoft.AspNetCore.Authorization;

namespace DevKbfSteel.Controllers
{
    [Route("api/[controller]/[action]")]
    [Authorize(Roles = "ExploitationManager")]

    public class ProdArretsProgrammesController : Controller
    {
        private KBFsteelContext _context;
        public ProdArretsProgrammesController(KBFsteelContext context) {
            _context = context;
        }
        [HttpGet]
        public async Task<IActionResult> Get(DateTime dateDebut, DateTime dateFin, DataSourceLoadOptions loadOptions) {
            var prodarretsprogramme = _context.ProdArretsProgramme.Where(c => c.DateArret >= dateDebut && c.DateArret <= dateFin)
                .Select(i => new {
                i.DateArret,
                i.DateDebut,
                i.DateFin
            });

            // If you work with a large amount of data, consider specifying the PaginateViaPrimaryKey and PrimaryKey properties.
            // In this case, keys and data are loaded in separate queries. This can make the SQL execution plan more efficient.
            // Refer to the topic https://github.com/DevExpress/DevExtreme.AspNet.Data/issues/336.
            // loadOptions.PrimaryKey = new[] { "DateArret" };
            // loadOptions.PaginateViaPrimaryKey = true;

            return Json(await DataSourceLoader.LoadAsync(prodarretsprogramme, loadOptions));
        }
        [HttpGet]
        public async Task<IActionResult> GetPsSonalgaz(DateTime dateDebut, DateTime dateFin, DataSourceLoadOptions loadOptions)
        {
            var prodarretsprogramme = _context.ProdArretsPsSonalgaz.Where(c => c.DateArret >= dateDebut && c.DateArret <= dateFin)
                .Select(i => new {
                    i.DateArret,
                    i.DateDebut,
                    i.DateFin,
                    i.Duree,
                    i.Cause,
                    i.NbrCisaillees
                });

            // If you work with a large amount of data, consider specifying the PaginateViaPrimaryKey and PrimaryKey properties.
            // In this case, keys and data are loaded in separate queries. This can make the SQL execution plan more efficient.
            // Refer to the topic https://github.com/DevExpress/DevExtreme.AspNet.Data/issues/336.
            // loadOptions.PrimaryKey = new[] { "DateArret" };
            // loadOptions.PaginateViaPrimaryKey = true;

            return Json(await DataSourceLoader.LoadAsync(prodarretsprogramme, loadOptions));
        }
        [HttpGet]
        public async Task<IActionResult> GetInteruptions(DateTime dateDebut, DateTime dateFin, DataSourceLoadOptions loadOptions)
        {
            var prodarretsprogramme = _context.ProdArretsPsSonalgaz.Where(c => c.DateArret >= dateDebut && c.DateArret <= dateFin)
                .Select(i => new {
                    i.Id,
                    i.DateArret,
                    i.DateDebut,
                    i.DateFin
                });

            // If you work with a large amount of data, consider specifying the PaginateViaPrimaryKey and PrimaryKey properties.
            // In this case, keys and data are loaded in separate queries. This can make the SQL execution plan more efficient.
            // Refer to the topic https://github.com/DevExpress/DevExtreme.AspNet.Data/issues/336.
            // loadOptions.PrimaryKey = new[] { "DateArret" };
            // loadOptions.PaginateViaPrimaryKey = true;

            return Json(await DataSourceLoader.LoadAsync(prodarretsprogramme, loadOptions));
        }
        [HttpGet]
        public async Task<IActionResult> GetTaches(DateTime id, DataSourceLoadOptions loadOptions)
        {
            var prodtachesarretsprogramme = _context.ProdTachesArretsProgrammes.Where(c => c.DateArret == id)
                .Select(i => new {
                    i.Id,
                    i.DateArret,
                    i.Description,
                    i.Etat
                });

            // If you work with a large amount of data, consider specifying the PaginateViaPrimaryKey and PrimaryKey properties.
            // In this case, keys and data are loaded in separate queries. This can make the SQL execution plan more efficient.
            // Refer to the topic https://github.com/DevExpress/DevExtreme.AspNet.Data/issues/336.
            // loadOptions.PrimaryKey = new[] { "DateArret" };
            // loadOptions.PaginateViaPrimaryKey = true;

            return Json(await DataSourceLoader.LoadAsync(prodtachesarretsprogramme, loadOptions));
        }
        [HttpGet]
        public async Task<IActionResult> GetPersonnels(DateTime id, DataSourceLoadOptions loadOptions)
        {
            var prodtachesarretsprogramme = _context.ProdPersonnelsArretsProgrammes.Where(c => c.DateArret == id)
                .Select(i => new {
                    i.Id,
                    i.DateArret,
                    i.CodeIntervenant
                });

            // If you work with a large amount of data, consider specifying the PaginateViaPrimaryKey and PrimaryKey properties.
            // In this case, keys and data are loaded in separate queries. This can make the SQL execution plan more efficient.
            // Refer to the topic https://github.com/DevExpress/DevExtreme.AspNet.Data/issues/336.
            // loadOptions.PrimaryKey = new[] { "DateArret" };
            // loadOptions.PaginateViaPrimaryKey = true;

            return Json(await DataSourceLoader.LoadAsync(prodtachesarretsprogramme, loadOptions));
        }
        [HttpGet]
        public async Task<IActionResult> GetArrets(DateTime id, DataSourceLoadOptions loadOptions)
        {
            var prodarretsprogrammeArrets = _context.ProdArretsProgrammeArrets.Where(c => c.DateArret == id)
                .Select(i => new {
                    i.Id,
                    i.DateArret,
                    i.HeureDebut,
                    i.HeureFin,
                    i.Description
                });

            // If you work with a large amount of data, consider specifying the PaginateViaPrimaryKey and PrimaryKey properties.
            // In this case, keys and data are loaded in separate queries. This can make the SQL execution plan more efficient.
            // Refer to the topic https://github.com/DevExpress/DevExtreme.AspNet.Data/issues/336.
            // loadOptions.PrimaryKey = new[] { "DateArret" };
            // loadOptions.PaginateViaPrimaryKey = true;

            return Json(await DataSourceLoader.LoadAsync(prodarretsprogrammeArrets, loadOptions));
        }

        [HttpPost]
        public async Task<IActionResult> Post(string values) {
            var model = new ProdArretsProgramme();
            var valuesDict = JsonConvert.DeserializeObject<IDictionary>(values);
            PopulateModel(model, valuesDict);
            model.Duree = (model.DateFin - model.DateDebut).TotalMinutes;
            if (!TryValidateModel(model))
                return BadRequest(GetFullErrorMessage(ModelState));

            var result = _context.ProdArretsProgramme.Add(model);

            await _context.SaveChangesAsync();

            return Json(result.Entity.DateArret);
        }
        [HttpPost]
        public async Task<IActionResult> PostInteruptions(string values)
        {
            var model = new ProdArretsPsSonalgaz();
            var valuesDict = JsonConvert.DeserializeObject<IDictionary>(values);
            PopulateInteruptionModel(model, valuesDict);
            if(model.DateDebut.Month != model.DateFin.Month)
            {
                //if the arret takes in a timelaps of two diffrent months
                var firstModel = new ProdArretsPsSonalgaz();
                var secondModel = new ProdArretsPsSonalgaz();
                firstModel.Id = model.Id;
                firstModel.Cause = model.Cause;
                firstModel.DateArret = model.DateArret;
                firstModel.DateDebut = model.DateDebut;
                // i set the day of date arret to 30
                DateTime firstmodelDateFin = new DateTime(model.DateDebut.Year, model.DateDebut.Month, 30);
                // i add a day then test if it is the same month
                firstmodelDateFin.AddDays(1.0);
                if (firstmodelDateFin.Month == model.DateFin.Month)
                {
                    //this month has only 30 days so i sub to get back to my ùonth
                    firstmodelDateFin.AddDays(-1.0);
                }
                //this month has 31 days => done
                firstModel.DateFin = firstmodelDateFin;
                firstModel.Duree = (firstModel.DateFin - firstModel.DateDebut).TotalMinutes;

                //Second model
                secondModel.Id = model.Id + 1;
                secondModel.Cause = model.Cause;
                secondModel.DateArret = model.DateArret;
                secondModel.DateDebut = firstmodelDateFin.AddDays(1.0);
                secondModel.DateFin = model.DateFin;
                secondModel.Duree = (secondModel.DateFin - secondModel.DateDebut).TotalMinutes;

                var result = _context.ProdArretsPsSonalgaz.Add(firstModel);
                result = _context.ProdArretsPsSonalgaz.Add(secondModel);
                // if the dateFin interuption  is greater then the arretprogramme datefin 
                //we set de datefin of the ArretsPorgrammee to the datedebut of that interuption
                var ArretsPgmToUpdate = await _context.ProdArretsProgramme
                .FirstOrDefaultAsync(c => c.DateFin <= model.DateFin && c.DateFin >= model.DateDebut);
                if (ArretsPgmToUpdate != null)
                {
                    ArretsPgmToUpdate.DateFin = model.DateDebut;
                    _context.ProdArretsProgramme.Update(ArretsPgmToUpdate);
                }
                await _context.SaveChangesAsync();
                return Json(result.Entity.DateArret);
            }
            else
            {
                var prodArretsPsSonalgaz = _context.ProdArretsPsSonalgaz
                 .Select(i => new
                 {
                     i.Id
                 }).ToList();
                if (prodArretsPsSonalgaz.Count > 0)
                {
                    var m = prodArretsPsSonalgaz.Last();
                    model.Id = m.Id + 1;
                }
                else
                {
                    model.Id = 1;
                }
                model.Cause = "Sonalgaz";
                model.Duree = (model.DateFin.TimeOfDay - model.DateDebut.TimeOfDay).TotalMinutes;
                if (!TryValidateModel(model))
                    return BadRequest(GetFullErrorMessage(ModelState));

                var result = _context.ProdArretsPsSonalgaz.Add(model);
                // if the dateFin interuption  is greater then the arretprogramme datefin 
                //we set de datefin of the ArretsPorgrammee to the datedebut of that interuption
                var ArretsPgmToUpdate = await _context.ProdArretsProgramme
                .FirstOrDefaultAsync(c => c.DateFin <= model.DateFin && c.DateFin >= model.DateDebut);
                if (ArretsPgmToUpdate != null)
                {
                    ArretsPgmToUpdate.DateFin = model.DateDebut;
                    _context.ProdArretsProgramme.Update(ArretsPgmToUpdate);
                }
                await _context.SaveChangesAsync();
                return Json(result.Entity.DateArret);
            }
        }
        [HttpPost]
        public async Task<IActionResult> PostTaches(string values)
        {
            var model = new ProdTachesArretsProgrammes();
            var valuesDict = JsonConvert.DeserializeObject<IDictionary>(values);
            PopulateTachesModel(model, valuesDict);

            if (!TryValidateModel(model))
                return BadRequest(GetFullErrorMessage(ModelState));


            // Now we generate a space ready to add in taches coorespanding to that date
            //AutoGenerating the ID
            var tachesList = _context.ProdTachesArretsProgrammes
            .OrderBy(o => o.Id)
            .Select(i => new
            {
                i.Id
            }).ToList();

            if (tachesList.Count == 0)
                model.Id = 1;
            else
            {
                var m = tachesList.Last();
                model.Id = Convert.ToInt32(m.Id) + 1;
            }

            // adding the tache to the entity 
            var result = _context.ProdTachesArretsProgrammes.Add(model);

            await _context.SaveChangesAsync();

            return Json(result.Entity.Id);
        }
        [HttpPost]
        public async Task<IActionResult> PostPersonnels(string values)
        {
            var model = new ProdPersonnelsArretsProgrammes();
            var valuesDict = JsonConvert.DeserializeObject<IDictionary>(values);
            PopulatePersonnelsModel(model, valuesDict);

            if (!TryValidateModel(model))
                return BadRequest(GetFullErrorMessage(ModelState));


            // Now we generate a space ready to add in taches coorespanding to that date
            //AutoGenerating the ID
            var personnelsList = _context.ProdPersonnelsArretsProgrammes
            .OrderBy(o => o.Id)
            .Select(i => new
            {
                i.Id
            }).ToList();

            if (personnelsList.Count == 0)
                model.Id = 1;
            else
            {
                var m = personnelsList.Last();
                model.Id = Convert.ToInt32(m.Id) + 1;
            }

            // adding the tache to the entity 
            var result = _context.ProdPersonnelsArretsProgrammes.Add(model);

            await _context.SaveChangesAsync();

            return Json(result.Entity.Id);
        }
        [HttpPost]
        public async Task<IActionResult> PostArrets(string values)
        {
            var model = new ProdArretsProgrammeArrets();
            var valuesDict = JsonConvert.DeserializeObject<IDictionary>(values);
            PopulateArretsModel(model, valuesDict);
            var prodArretsProgrammeArrets = _context.ProdArretsProgrammeArrets
            .Select(i => new
            {
                i.Id
            }).ToList();
            if (prodArretsProgrammeArrets.Count > 0)
            {
                var m = prodArretsProgrammeArrets.Last();
                model.Id = m.Id + 1;
            }
            else
            {
                model.Id = 1;
            }
            if (!TryValidateModel(model))
                return BadRequest(GetFullErrorMessage(ModelState));

            var result = _context.ProdArretsProgrammeArrets.Add(model);

            await _context.SaveChangesAsync();

            return Json(result.Entity.DateArret);
        }
        [HttpPut]
        public async Task<IActionResult> Put(DateTime key, string values) {
            var model = await _context.ProdArretsProgramme.FirstOrDefaultAsync(item => item.DateArret == key);
            if(model == null)
                return StatusCode(409, "Object not found");

            var valuesDict = JsonConvert.DeserializeObject<IDictionary>(values);
            PopulateModel(model, valuesDict);
            model.Duree = (model.DateFin - model.DateDebut).TotalMinutes;

            if (!TryValidateModel(model))
                return BadRequest(GetFullErrorMessage(ModelState));

            await _context.SaveChangesAsync();
            return Ok();
        }
        [HttpPut]
        public async Task<IActionResult> PutInteruptions(int key, string values)
        {
            var model = await _context.ProdArretsPsSonalgaz.FirstOrDefaultAsync(item => item.Id == key);
            if (model == null)
                return StatusCode(409, "Object not found");

            var valuesDict = JsonConvert.DeserializeObject<IDictionary>(values);
            PopulateInteruptionModel(model, valuesDict);
            model.Cause = "Sonalgaz";
            model.Duree = (model.DateFin - model.DateDebut).TotalMinutes;
            if (!TryValidateModel(model))
                return BadRequest(GetFullErrorMessage(ModelState));
            if (model.DateDebut.Month != model.DateFin.Month)
            {
                //if the arret takes in a timelaps of two diffrent months
                var secondModel = new ProdArretsPsSonalgaz();
                model.Id = model.Id;
                model.Cause = model.Cause;
                model.DateArret = model.DateArret;
                model.DateDebut = model.DateDebut;
                // i set the day of date arret to 30
                DateTime firstmodelDateFin = new DateTime(model.DateDebut.Year, model.DateDebut.Month, 30);
                // i add a day then test if it is the same month
                firstmodelDateFin.AddDays(1.0);
                if (firstmodelDateFin.Month == model.DateFin.Month)
                {
                    //this month has only 30 days so i sub to get back to my ùonth
                    firstmodelDateFin.AddDays(-1.0);
                }
                //this month has 31 days => done
                // i have to save the datefin in second model before updating it 
                secondModel.DateFin = model.DateFin;
                // i continue now my work normally
                model.DateFin = firstmodelDateFin;
                model.Duree = (model.DateFin - model.DateDebut).TotalMinutes;
                //Second model
                secondModel.Id = model.Id + 1;
                secondModel.Cause = model.Cause;
                secondModel.DateArret = model.DateArret;
                secondModel.DateDebut = firstmodelDateFin.AddDays(1.0);
                secondModel.Duree = (secondModel.DateFin - secondModel.DateDebut).TotalMinutes;

                var result = _context.ProdArretsPsSonalgaz.Update(model);
                result = _context.ProdArretsPsSonalgaz.Add(secondModel);
                await _context.SaveChangesAsync();
            }
            // if the dateFin interuption is greater then the arretprogramme datefin 
            //we set de datefin of the ArretsPorgrammee to the datedebut of that interuption
            var ArretsPgmToUpdate = await _context.ProdArretsProgramme
            .FirstOrDefaultAsync(c => c.DateFin <= model.DateFin && c.DateFin >= model.DateDebut);
            if (ArretsPgmToUpdate != null)
            {
                ArretsPgmToUpdate.DateFin = model.DateDebut;
                _context.ProdArretsProgramme.Update(ArretsPgmToUpdate);
            }
            await _context.SaveChangesAsync();
            return Ok();
        }
        [HttpPut]
        public async Task<IActionResult> PutTaches(int key, string values)
        {
            var model = await _context.ProdTachesArretsProgrammes.FirstOrDefaultAsync(item => item.Id == key);
            if (model == null)
                return StatusCode(409, "Object not found");

            var valuesDict = JsonConvert.DeserializeObject<IDictionary>(values);
            PopulateTachesModel(model, valuesDict);

            if (!TryValidateModel(model))
                return BadRequest(GetFullErrorMessage(ModelState));

            await _context.SaveChangesAsync();
            return Ok();
        }
        [HttpPut]
        public async Task<IActionResult> PutTPersonnels(int key, string values)
        {
            var model = await _context.ProdPersonnelsArretsProgrammes.FirstOrDefaultAsync(item => item.Id == key);
            if (model == null)
                return StatusCode(409, "Object not found");

            var valuesDict = JsonConvert.DeserializeObject<IDictionary>(values);
            PopulatePersonnelsModel(model, valuesDict);

            if (!TryValidateModel(model))
                return BadRequest(GetFullErrorMessage(ModelState));

            await _context.SaveChangesAsync();
            return Ok();
        }
        [HttpPut]
        public async Task<IActionResult> PutArrets(int key, string values)
        {
            var model = await _context.ProdArretsProgrammeArrets.FirstOrDefaultAsync(item => item.Id == key);
            if (model == null)
                return StatusCode(409, "Object not found");

            var valuesDict = JsonConvert.DeserializeObject<IDictionary>(values);
            PopulateArretsModel(model, valuesDict);
            if (!TryValidateModel(model))
                return BadRequest(GetFullErrorMessage(ModelState));

            await _context.SaveChangesAsync();
            return Ok();
        }

        [HttpDelete]
        public async Task Delete(DateTime key) {
            var model = await _context.ProdArretsProgramme.FirstOrDefaultAsync(item => item.DateArret == key);

            _context.ProdArretsProgramme.Remove(model);
            await _context.SaveChangesAsync();
        }
        [HttpDelete]
        public async Task DeleteInteruptions(int key)
        {
            var model = await _context.ProdArretsPsSonalgaz.FirstOrDefaultAsync(item => item.Id == key);
            _context.ProdArretsPsSonalgaz.Remove(model);
            await _context.SaveChangesAsync();
        }
        [HttpDelete]
        public async Task DeleteTaches(int key)
        {
            var model = await _context.ProdTachesArretsProgrammes.FirstOrDefaultAsync(item => item.Id == key);

            _context.ProdTachesArretsProgrammes.Remove(model);
            await _context.SaveChangesAsync();
        }
        [HttpDelete]
        public async Task DeletePersonnels(int key)
        {
            var model = await _context.ProdPersonnelsArretsProgrammes.FirstOrDefaultAsync(item => item.Id == key);

            _context.ProdPersonnelsArretsProgrammes.Remove(model);
            await _context.SaveChangesAsync();
        }
        [HttpDelete]
        public async Task DeleteArrets(int key)
        {
            var model = await _context.ProdArretsProgrammeArrets.FirstOrDefaultAsync(item => item.Id == key);
            _context.ProdArretsProgrammeArrets.Remove(model);
            await _context.SaveChangesAsync();
        }
        //================ Lookups================
        [HttpGet]
        public async Task<IActionResult> EtatLookup(DataSourceLoadOptions loadOptions)
        {
            var lookup = from i in _context.Statut
                         orderby i.CodeStatut
                         select new
                         {
                             Value = i.CodeStatut,
                             Text = i.Designation
                         };
            return Json(await DataSourceLoader.LoadAsync(lookup, loadOptions));
        }

        //================ModelsPopulation================
        private void PopulateModel(ProdArretsProgramme model, IDictionary values) {
            string DATE_ARRET = nameof(ProdArretsProgramme.DateArret);
            string DATE_DEBUT = nameof(ProdArretsProgramme.DateDebut);
            string DATE_FIN = nameof(ProdArretsProgramme.DateFin);

            if(values.Contains(DATE_ARRET)) {
                model.DateArret = Convert.ToDateTime(values[DATE_ARRET]);
            }

            if(values.Contains(DATE_DEBUT)) {
                model.DateDebut = Convert.ToDateTime(values[DATE_DEBUT]);
            }

            if(values.Contains(DATE_FIN)) {
                model.DateFin = Convert.ToDateTime(values[DATE_FIN]);
            }
        }
        private void PopulateTachesModel(ProdTachesArretsProgrammes model, IDictionary values)
        {
            string Id = nameof(ProdTachesArretsProgrammes.Id);
            string DATE_ARRET = nameof(ProdTachesArretsProgrammes.DateArret);
            string Etat = nameof(ProdTachesArretsProgrammes.Etat);
            string Description = nameof(ProdTachesArretsProgrammes.Description);

            if (values.Contains(DATE_ARRET))
            {
                model.DateArret = Convert.ToDateTime(values[DATE_ARRET]);
            }

            if (values.Contains(Id))
            {
                model.Id = Convert.ToInt32(values[Id]);
            }
            if (values.Contains(Etat))
            {
                model.Etat = Convert.ToInt32(values[Etat]);
            }

            if (values.Contains(Description))
            {
                model.Description = Convert.ToString(values[Description]);
            }
        }
        private void PopulatePersonnelsModel(ProdPersonnelsArretsProgrammes model, IDictionary values)
        {
            string Id = nameof(ProdPersonnelsArretsProgrammes.Id);
            string DATE_ARRET = nameof(ProdPersonnelsArretsProgrammes.DateArret);
            string CodeIntervenant = nameof(ProdPersonnelsArretsProgrammes.CodeIntervenant);

            if (values.Contains(DATE_ARRET))
            {
                model.DateArret = Convert.ToDateTime(values[DATE_ARRET]);
            }

            if (values.Contains(Id))
            {
                model.Id = Convert.ToInt32(values[Id]);
            }
            if (values.Contains(CodeIntervenant))
            {
                var Idemployevar = values[CodeIntervenant];
                var Idemployestrings = Idemployevar.ToString();
                var SplitThefirst = Idemployestrings.Split("[");
                var SplitThesecond = SplitThefirst[1].Split("]");
                var value = SplitThesecond[0];
                model.CodeIntervenant = Convert.ToInt32(value);
            }
        }
        private void PopulateInteruptionModel(ProdArretsPsSonalgaz model, IDictionary values)
        {
            string DateArret = nameof(ProdArretsPsSonalgaz.DateArret);
            string DateDebut = nameof(ProdArretsPsSonalgaz.DateDebut);
            string DateFin = nameof(ProdArretsPsSonalgaz.DateFin);

            if (values.Contains(DateArret))
            {
                model.DateArret = Convert.ToDateTime(values[DateArret]);
            }
            if (values.Contains(DateDebut))
            {
                model.DateDebut = Convert.ToDateTime(values[DateDebut]);
            }
            if (values.Contains(DateFin))
            {
                model.DateFin = Convert.ToDateTime(values[DateFin]);
            }
        }
        private void PopulateArretsModel(ProdArretsProgrammeArrets model, IDictionary values)
        {
            string DateArret = nameof(ProdArretsProgrammeArrets.DateArret);
            string HeureDebut = nameof(ProdArretsProgrammeArrets.HeureDebut);
            string HeureFin = nameof(ProdArretsProgrammeArrets.HeureFin);
            string Description = nameof(ProdArretsProgrammeArrets.Description);

            if (values.Contains(DateArret))
            {
                model.DateArret = Convert.ToDateTime(values[DateArret]);
            }
            if (values.Contains(HeureDebut))
            {
                model.HeureDebut = Convert.ToDateTime(values[HeureDebut]);
            }
            if (values.Contains(HeureFin))
            {
                model.HeureFin = Convert.ToDateTime(values[HeureFin]);
            }
            if (values.Contains(Description))
            {
                model.Description = Convert.ToString(values[Description]);
            }
        }
        private string GetFullErrorMessage(ModelStateDictionary modelState) {
            var messages = new List<string>();

            foreach(var entry in modelState) {
                foreach(var error in entry.Value.Errors)
                    messages.Add(error.ErrorMessage);
            }

            return String.Join(" ", messages);
        }
        private async Task SplitInteruption(ProdArretsPsSonalgaz model)
        {
            //if the arret takes in a timelaps of two diffrent months
            var firstModel = new ProdArretsPsSonalgaz();
            var secondModel = new ProdArretsPsSonalgaz();
            firstModel.Id = model.Id;
            firstModel.Cause = model.Cause;
            firstModel.DateArret = model.DateArret;
            firstModel.DateDebut = model.DateDebut;
            // i set the day of date arret to 30
            DateTime firstmodelDateFin = new DateTime(model.DateDebut.Year, model.DateDebut.Month, 30);
            // i add a day then test if it is the same month
            firstmodelDateFin.AddDays(1.0);
            if (firstmodelDateFin.Month == model.DateFin.Month)
            {
                //this month has only 30 days so i sub to get back to my ùonth
                firstmodelDateFin.AddDays(-1.0);
            }
            //this month has 31 days => done
            firstModel.DateFin = firstmodelDateFin;

            //Second model
            secondModel.Id = model.Id + 1;
            secondModel.Cause = model.Cause;
            secondModel.DateArret = model.DateArret;
            secondModel.DateDebut = firstmodelDateFin.AddDays(1.0);
            secondModel.DateFin = model.DateFin;
            var result = _context.ProdArretsPsSonalgaz.Add(firstModel);
            result = _context.ProdArretsPsSonalgaz.Add(secondModel);
            await _context.SaveChangesAsync();
        }
    }
}