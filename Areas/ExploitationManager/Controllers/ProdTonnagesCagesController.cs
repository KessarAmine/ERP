using DevExtreme.AspNet.Data;
using DevExtreme.AspNet.Mvc;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;
using DevKbfSteel.Entities;
using Microsoft.AspNetCore.Authorization;
using DevKbfSteel.Helpers;

namespace DevKbfSteel.Controllers
{
    [Route("api/[controller]/[action]")]
    [Authorize(Roles = "ExploitationManager")]

    public class ProdTonnagesCagesController : Controller
    {
        private KBFsteelContext _context;

        public ProdTonnagesCagesController(KBFsteelContext context)
        {
            _context = context;
        }

        [HttpGet]
        public async Task<IActionResult> Get(DateTime dateDebut, DateTime dateFin, DataSourceLoadOptions loadOptions)
        {
            XpertHelper.GetTonnageLimites(_context);
            var prodTonnagesCages = _context.ProdTonnagesCages
                .Where(i => i.DateJournee >= dateDebut && i.DateJournee <= dateFin)
                .Select(i => new
                {
                    i.Id,
                    i.DateJournee,
                    i.Cage01,
                    i.Cage02,
                    i.Cage03,
                    i.Cage04,
                    i.Cage05,
                    i.Cage06,
                    i.Cage07,
                    i.Cage08,
                    i.Cage09,
                    i.Cage10,
                    i.Cage11,
                    i.Cage12,
                    i.Cage13
                });

            // If you work with a large amount of data, consider specifying the PaginateViaPrimaryKey and PrimaryKey properties.
            // In this case, keys and data are loaded in separate queries. This can make the SQL execution plan more efficient.
            // Refer to the topic https://github.com/DevExpress/DevExtreme.AspNet.Data/issues/336.
            // loadOptions.PrimaryKey = new[] { "Id" };
            // loadOptions.PaginateViaPrimaryKey = true;

            return Json(await DataSourceLoader.LoadAsync(prodTonnagesCages, loadOptions));
        }


    }
}