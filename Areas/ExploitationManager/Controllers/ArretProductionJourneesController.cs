using DevExtreme.AspNet.Data;
using DevExtreme.AspNet.Mvc;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;
using DevKbfSteel.Entities;
using Microsoft.AspNetCore.Authorization;

namespace DevKbfSteel.Controllers
{
    [Route("api/[controller]/[action]")]
    [Authorize(Roles = "ExploitationManager")]
    public class ArretProductionJourneesController : Controller
    {
        private KBFsteelContext _context;

        public ArretProductionJourneesController(KBFsteelContext context) {
            _context = context;
        }

        [HttpGet]
        public async Task<IActionResult> Get(int id, DataSourceLoadOptions loadOptions) {
            var arretproductionjournee = _context.ArretProductionJournee.Where(c=> c.NumRapport == id)
                .Select(i => new {
                i.Id,
                i.DateArret,
                i.NumRapport,
                i.NumIncident,
                i.CodeMachine,
                i.SubMachine,
                i.Cause,
                i.HeureDebut,
                i.HeureFin,
                i.EnumArret,
                i.NbrBilleteDefournees,
                i.NbrBilleteRejetees,
                i.NbrBilleteCisalleTrio,
                i.NbrBilleteRealisees,
                i.NbrBilleteCisalleFinisseuse
            });

            // If you work with a large amount of data, consider specifying the PaginateViaPrimaryKey and PrimaryKey properties.
            // In this case, keys and data are loaded in separate queries. This can make the SQL execution plan more efficient.
            // Refer to the topic https://github.com/DevExpress/DevExtreme.AspNet.Data/issues/336.
            // loadOptions.PrimaryKey = new[] { "Id" };
            // loadOptions.PaginateViaPrimaryKey = true;

                return Json(await DataSourceLoader.LoadAsync(arretproductionjournee, loadOptions));
        }

        [HttpGet]
        public async Task<IActionResult> GetRapport(int id, DataSourceLoadOptions loadOptions)
        {
            var journeeProduction = _context.JourneeProduction.Where(c => c.NumBon == id)
                .Select(i => new {
                    i.NumRapport
                }).ToList();
            if (journeeProduction.Count > 0)
            {
                var m = journeeProduction.Last();
                var arretproductionjournee = _context.ArretProductionJournee.Where(c => c.NumRapport == m.NumRapport)
                    .Select(i => new {
                        i.Id,
                        i.NumRapport,
                        i.NumIncident,
                        i.CodeMachine,
                        i.SubMachine,
                        i.Cause,
                        i.HeureDebut,
                        i.HeureFin,
                        i.EnumArret,
                        i.NbrBilleteDefournees,
                        i.NbrBilleteRejetees,
                        i.NbrBilleteCisalleTrio,
                        i.NbrBilleteRealisees,
                        i.NbrBilleteCisalleFinisseuse
                    });
                return Json(await DataSourceLoader.LoadAsync(arretproductionjournee, loadOptions));
            }
            else {
                var arretproductionjournee = _context.ArretProductionJournee.Where(c => c.NumRapport == 0)
                    .Select(i => new {
                        i.Id,
                        i.NumRapport,
                        i.NumIncident,
                        i.CodeMachine,
                        i.SubMachine,
                        i.Cause,
                        i.HeureDebut,
                        i.HeureFin,
                        i.EnumArret,
                        i.NbrBilleteDefournees,
                        i.NbrBilleteRejetees,
                        i.NbrBilleteCisalleTrio,
                        i.NbrBilleteRealisees,
                        i.NbrBilleteCisalleFinisseuse
                    });
                return Json(await DataSourceLoader.LoadAsync(arretproductionjournee, loadOptions));
            }
                
        }

        [HttpPost]
        public async Task<IActionResult> Post(string values) {
            var model = new ArretProductionJournee();
            var valuesDict = JsonConvert.DeserializeObject<IDictionary>(values);
            PopulateModel(model, valuesDict);
            if(model.NumIncident == 1)
            {
                model.DateArret = model.DateArret.Value.AddHours(1.0);
                model.HeureDebut = model.HeureDebut.Value.AddHours(1.0);
                model.HeureFin = model.HeureFin.Value.AddHours(1.0);
            }
            if (!TryValidateModel(model))
                return BadRequest(GetFullErrorMessage(ModelState));

            var arretProductionJournee = _context.ArretProductionJournee
                .OrderBy(o => o.Id)
                .Select(i => new
                {
                    i.Id
                }).ToList();
            if (arretProductionJournee.Count == 0)
                model.Id = 1;
            else
            {
                var m = arretProductionJournee.Last();
                model.Id = Convert.ToInt32(m.Id) + 1;
            }

            var result = _context.ArretProductionJournee.Add(model);

            await _context.SaveChangesAsync();

            return Json(result.Entity.Id);
        }

        [HttpPut]
        public async Task<IActionResult> Put(int key, string values) {
            var model = await _context.ArretProductionJournee.FirstOrDefaultAsync(item => item.Id == key);
            if(model == null)
                return StatusCode(409, "Object not found");
            var valuesDict = JsonConvert.DeserializeObject<IDictionary>(values);
            PopulateModel(model, valuesDict);
            if (!TryValidateModel(model))
                return BadRequest(GetFullErrorMessage(ModelState));
            await _context.SaveChangesAsync();
            return Ok();
        }

        [HttpDelete]
        public async Task Delete(int key) {
            var model = await _context.ArretProductionJournee.FirstOrDefaultAsync(item => item.Id == key);

            _context.ArretProductionJournee.Remove(model);
            await _context.SaveChangesAsync();
        }

        [HttpGet]
        public async Task<IActionResult> EnumArretLookup(DataSourceLoadOptions loadOptions) {
            var lookup = from i in _context.EnumArret
                         orderby i.Designation
                         select new {
                             Value = i.Designation,
                             Text = i.Structure
                         };
            return Json(await DataSourceLoader.LoadAsync(lookup, loadOptions));
        }

        [HttpGet]
        public async Task<IActionResult> JourneeProductionLookup(DataSourceLoadOptions loadOptions) {
            var lookup = from i in _context.JourneeProduction
                         orderby i.DimProduitFini
                         select new {
                             Value = i.NumRapport,
                             Text = i.DimProduitFini
                         };
            return Json(await DataSourceLoader.LoadAsync(lookup, loadOptions));
        }

        private void PopulateModel(ArretProductionJournee model, IDictionary values) {

            string ID = nameof(ArretProductionJournee.Id);
            string NUM_RAPPORT = nameof(ArretProductionJournee.NumRapport);
            string NUM_INCIDENT = nameof(ArretProductionJournee.NumIncident);
            string CODE_MACHINE = nameof(ArretProductionJournee.CodeMachine);
            string SUB_MACHINE = nameof(ArretProductionJournee.SubMachine);
            string CAUSE = nameof(ArretProductionJournee.Cause);
            string HEURE_DEBUT = nameof(ArretProductionJournee.HeureDebut);
            string HEURE_FIN = nameof(ArretProductionJournee.HeureFin);
            string ENUM_ARRET = nameof(ArretProductionJournee.EnumArret);
            string NBR_BILLETE_DEFOURNEES = nameof(ArretProductionJournee.NbrBilleteDefournees);
            string NBR_BILLETE_REJETEES = nameof(ArretProductionJournee.NbrBilleteRejetees);
            string NBR_BILLETE_CISALLE_TRIO = nameof(ArretProductionJournee.NbrBilleteCisalleTrio);
            string NBR_BILLETE_CISALLE_FINISSEUSE = nameof(ArretProductionJournee.NbrBilleteCisalleFinisseuse);
            string NBR_BILLETE_REALISEES = nameof(ArretProductionJournee.NbrBilleteRealisees);
            string Date = nameof(ArretProductionJournee.DateArret);
            if (values.Contains(Date))
            {
                model.DateArret = Convert.ToDateTime(values[Date]);
            }
            if (values.Contains(NBR_BILLETE_REALISEES))
            {
                model.NbrBilleteRealisees = Convert.ToInt32(values[NBR_BILLETE_REALISEES]);
            }

            if (values.Contains(ID)) {
                model.Id = Convert.ToInt32(values[ID]);
            }

            if(values.Contains(NUM_RAPPORT)) {
                model.NumRapport = Convert.ToInt32(values[NUM_RAPPORT]);
            }

            if(values.Contains(NUM_INCIDENT)) {
                model.NumIncident = Convert.ToInt32(values[NUM_INCIDENT]);
            }

            if(values.Contains(CODE_MACHINE)) {
                model.CodeMachine = Convert.ToString(values[CODE_MACHINE]);
            }

            if(values.Contains(SUB_MACHINE)) {
                model.SubMachine = Convert.ToString(values[SUB_MACHINE]);
            }

            if(values.Contains(CAUSE)) {
                model.Cause = Convert.ToString(values[CAUSE]);
            }

            if(values.Contains(HEURE_DEBUT)) {
                model.HeureDebut = (System.DateTime)Convert.ChangeType(values[HEURE_DEBUT], typeof(System.DateTime));
            }

            if(values.Contains(HEURE_FIN)) {
                model.HeureFin = (System.DateTime)Convert.ChangeType(values[HEURE_FIN], typeof(System.DateTime));
            }

            if(values.Contains(ENUM_ARRET)) {
                model.EnumArret = Convert.ToString(values[ENUM_ARRET]);
            }

            if(values.Contains(NBR_BILLETE_DEFOURNEES)) {
                model.NbrBilleteDefournees = Convert.ToInt32(values[NBR_BILLETE_DEFOURNEES]);
            }

            if(values.Contains(NBR_BILLETE_REJETEES)) {
                model.NbrBilleteRejetees = Convert.ToInt32(values[NBR_BILLETE_REJETEES]);
            }

            if(values.Contains(NBR_BILLETE_CISALLE_TRIO)) {
                model.NbrBilleteCisalleTrio = Convert.ToInt32(values[NBR_BILLETE_CISALLE_TRIO]);
            }

            if(values.Contains(NBR_BILLETE_CISALLE_FINISSEUSE)) {
                model.NbrBilleteCisalleFinisseuse = Convert.ToInt32(values[NBR_BILLETE_CISALLE_FINISSEUSE]);
            }
        }

        private string GetFullErrorMessage(ModelStateDictionary modelState) {
            var messages = new List<string>();

            foreach(var entry in modelState) {
                foreach(var error in entry.Value.Errors)
                    messages.Add(error.ErrorMessage);
            }

            return String.Join(" ", messages);
        }
        
        #region //suiviArretsServices
        public int CheckDuplicate(ArretProductionJournee model)
        {
            var arretProductionJournee = _context.ArretProductionJournee
                        .OrderBy(o => o.Id)
                        .Select(i => new
                        {
                            i.DateArret,
                            i.HeureDebut,
                            i.HeureFin
                        }).ToList();
            var nbr = 0;
            foreach (var item in arretProductionJournee)
            {
                if (item.DateArret == model.DateArret && item.HeureDebut == model.HeureDebut && item.HeureFin == model.HeureFin)
                {
                    nbr++;
                }
            }
            if (nbr > 1)
                return -1;
            else
                return 1;
        }
        public async Task SuiviArretServicesUpdateInInsert(ArretProductionJournee model)
        {
            var suiviArretServicesGet = _context.ProdSuiviArretsServices
                        .OrderBy(o => o.Id)
                        .Where(c => c.DateArret == model.DateArret)
                        .Select(i => new
                        {
                            i.Id
                        }).ToList();
            if (suiviArretServicesGet.Count == 0)
            {
                //it does not exist we add it
                await SuiviArretServicesPost(model);
            }
            else
            {
                //it does exist we update it
                var lastOfus = suiviArretServicesGet.Last();
                var ToUpdate = await _context.ProdSuiviArretsServices.FirstOrDefaultAsync(item => item.Id == lastOfus.Id);
                ToUpdate.DateArret = (DateTime)model.DateArret;

                if (model.EnumArret.Equals("Hi"))
                    ToUpdate.Hi += (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;
                if (model.EnumArret.Equals("Hh"))
                    ToUpdate.Hh += (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;
                if (model.EnumArret.Equals("Ps"))
                    ToUpdate.Ps += (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;
                if (model.EnumArret.Equals("Tf"))
                    ToUpdate.Tf += (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;
                if (model.EnumArret.Equals("Eb"))
                    ToUpdate.Eb += (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;
                if (model.EnumArret.Equals("Mb"))
                    ToUpdate.Mb += (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;
                if (model.EnumArret.Equals("Kk"))
                    ToUpdate.Kk += (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;
                if (model.EnumArret.Equals("Sonalgaz"))
                    ToUpdate.Sonalgaz += (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;
                if (model.EnumArret.Equals("Dg"))
                    ToUpdate.Dg += (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;
                _context.ProdSuiviArretsServices.Update(ToUpdate);

            }

        }
        public async Task SuiviArretServicesUpdateInUpdate(ArretProductionJournee model, double oldDuree)
        {
            var suiviArretServicesGet = _context.ProdSuiviArretsServices
                        .OrderBy(o => o.Id)
                        .Where(c => c.DateArret == model.DateArret)
                        .Select(i => new
                        {
                            i.Id
                        }).ToList();
            if (suiviArretServicesGet.Count == 0)
            {
                //it does not exist we add it
                await SuiviArretServicesPost(model);
            }
            else
            {
                //it does exist we update it
                var lastOfus = suiviArretServicesGet.Last();
                var ToUpdate = await _context.ProdSuiviArretsServices.FirstOrDefaultAsync(item => item.Id == lastOfus.Id);
                ToUpdate.DateArret = (DateTime)model.DateArret;

                if (model.EnumArret.Equals("Hi"))
                {
                    ToUpdate.Hi -= oldDuree;
                    ToUpdate.Hi += (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;
                }
                if (model.EnumArret.Equals("Hh"))
                {
                    ToUpdate.Hh -= oldDuree;
                    ToUpdate.Hh += (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;
                }
                if (model.EnumArret.Equals("Ps"))
                {
                    ToUpdate.Ps -= oldDuree;
                    ToUpdate.Ps += (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;
                }
                if (model.EnumArret.Equals("Tf"))
                {
                    ToUpdate.Tf -= oldDuree;
                    ToUpdate.Tf += (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;
                }
                if (model.EnumArret.Equals("Eb"))
                {
                    ToUpdate.Eb -= oldDuree;
                    ToUpdate.Eb += (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;
                }
                if (model.EnumArret.Equals("Mb"))
                {
                    ToUpdate.Mb -= oldDuree;
                    ToUpdate.Mb += (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;
                }
                if (model.EnumArret.Equals("Kk"))
                {
                    ToUpdate.Kk -= oldDuree;
                    ToUpdate.Kk += (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;
                }
                if (model.EnumArret.Equals("Sonalgaz"))
                {
                    ToUpdate.Sonalgaz -= oldDuree;
                    ToUpdate.Sonalgaz += (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;
                }
                if (model.EnumArret.Equals("Dg"))
                {
                    ToUpdate.Dg -= oldDuree;
                    ToUpdate.Dg += (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;
                }
                _context.ProdSuiviArretsServices.Update(ToUpdate);

            }


        }
        public async Task SuiviArretServicesPost(ArretProductionJournee model)
        {
            var suiviArretsServices = new ProdSuiviArretsServices();
            var suiviArretServicesGet = _context.ProdSuiviArretsServices
                                    .OrderBy(o => o.Id)
                                    .Select(i => new
                                    {
                                        i.Id
                                    }).ToList();
            if (suiviArretServicesGet.Count == 0)
            {
                suiviArretsServices.Id = 1;
            }
            else
            {
                var last = suiviArretServicesGet.Last();
                suiviArretsServices.Id = last.Id + 1;
            }
            suiviArretsServices.DateArret = (DateTime)model.DateArret;
            InitSuiviNew(suiviArretsServices);
            if (model.EnumArret.Equals("Hi"))
                suiviArretsServices.Hi = (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;
            if (model.EnumArret.Equals("Hh"))
                suiviArretsServices.Hh = (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;
            if (model.EnumArret.Equals("Ps"))
                suiviArretsServices.Ps = (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;
            if (model.EnumArret.Equals("Tf"))
                suiviArretsServices.Tf = (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;
            if (model.EnumArret.Equals("Eb"))
                suiviArretsServices.Eb = (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;
            if (model.EnumArret.Equals("Mb"))
                suiviArretsServices.Mb = (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;
            if (model.EnumArret.Equals("Kk"))
                suiviArretsServices.Kk = (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;
            if (model.EnumArret.Equals("Sonalgaz"))
                suiviArretsServices.Sonalgaz = (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;
            if (model.EnumArret.Equals("Dg"))
                suiviArretsServices.Dg = (model.HeureFin.Value.TimeOfDay - model.HeureDebut.Value.TimeOfDay).TotalMinutes;

            await _context.ProdSuiviArretsServices.AddRangeAsync(suiviArretsServices);
        }
        public void InitSuiviNew(ProdSuiviArretsServices suiviArretsServices)
        {
            suiviArretsServices.Hh = 0;
            suiviArretsServices.Hi = 0;
            suiviArretsServices.Kk = 0;
            suiviArretsServices.Mb = 0;
            suiviArretsServices.Ps = 0;
            suiviArretsServices.Sonalgaz = 0;
            suiviArretsServices.Tf = 0;
            suiviArretsServices.Eb = 0;
            suiviArretsServices.Dg = 0;
        }
        public int SuiviArretServicesGetandCheck(ArretProductionJournee model)
        {
            var suiviArretServicesGet = _context.ProdSuiviArretsServices
                .OrderBy(o => o.Id)
                .Select(i => new
                {
                    i.DateArret
                }).ToList();
            foreach (var item in suiviArretServicesGet)
            {
                if (item.DateArret == model.DateArret)
                {
                    return 1;
                }
            }
            return -1;
        }
        public int SuiviArretInstallationsGetandCheck(ArretProductionJournee model)
        {
            var suiviArretServicesGet = _context.ProdSuiviArretsSonalgazTrainCages
                .OrderBy(o => o.Id)
                .Select(i => new
                {
                    i.DateArret,
                    i.Installation,
                    i.HeureDebut,
                    i.HerueFin
                }).ToList();
            foreach (var item in suiviArretServicesGet)
            {
                if (item.DateArret == model.DateArret && item.Installation.ToString() == model.CodeMachine && item.HerueFin == model.HeureFin && item.HeureDebut == model.HeureDebut)
                {
                    return 1;
                }
            }
            return -1;
        }
        public async Task RemoveFromSuiviServicesAsync(ArretProductionJournee model, double oldDuree)
        {
            var ToUpdate = await _context.ProdSuiviArretsServices.FirstOrDefaultAsync(item => item.DateArret == model.DateArret);
            if (model.EnumArret.Equals("Hi"))
            {
                if(ToUpdate.Hi >0)
                    ToUpdate.Hi -= oldDuree;
            }
            if (model.EnumArret.Equals("Hh"))
            {
                if (ToUpdate.Hh > 0)
                    ToUpdate.Hh -= oldDuree;
            }
            if (model.EnumArret.Equals("Ps"))
            {
                if (ToUpdate.Ps > 0)
                    ToUpdate.Ps -= oldDuree;
            }
            if (model.EnumArret.Equals("Tf"))
            {
                if (ToUpdate.Tf > 0)
                    ToUpdate.Tf -= oldDuree;
            }
            if (model.EnumArret.Equals("Eb"))
            {
                if (ToUpdate.Eb > 0)
                    ToUpdate.Eb -= oldDuree;
            }
            if (model.EnumArret.Equals("Mb"))
            {
                if (ToUpdate.Mb > 0)
                    ToUpdate.Mb -= oldDuree;
            }
            if (model.EnumArret.Equals("Kk"))
            {
                if (ToUpdate.Kk > 0)
                    ToUpdate.Kk -= oldDuree;
            }
            if (model.EnumArret.Equals("Sonalgaz"))
            {
                if (ToUpdate.Sonalgaz > 0)
                    ToUpdate.Sonalgaz -= oldDuree;
            }
            if (model.EnumArret.Equals("Dg"))
            {
                if (ToUpdate.Dg > 0)
                    ToUpdate.Dg -= oldDuree;
            }
            _context.ProdSuiviArretsServices.Update(ToUpdate);
        }
        //=======================
        #endregion

        #region //suiviArretsInstallation
        public int CheckDuplicateInstallation(ArretProductionJournee model)
        {
            var arretProductionJournee = _context.ProdSuiviArretsSonalgazTrainCages
                        .OrderBy(o => o.Id)
                        .Select(i => new
                        {
                            i.DateArret,
                            i.Installation
                        }).ToList();
            var nbr = 0;
            foreach (var item in arretProductionJournee)
            {

                if (item.DateArret == model.DateArret && item.Installation.ToString() == model.CodeMachine)
                {
                    nbr++;
                }
            }
            if (nbr >= 1)
                return -1;
            else
                return 1;
        }
        public async Task SuiviArretInstallationUpdateInInsert(ArretProductionJournee model)
        {
            var suiviArretInstallationsGet = _context.ProdSuiviArretsSonalgazTrainCages
            .OrderBy(o => o.Id)
            .Where(c => c.DateArret == model.DateArret)
            .Select(i => new
            {
                i.Id
            }).ToList();
            if (suiviArretInstallationsGet.Count == 0)
            {
                //it does not exist we add it
                SuiviArretInstallationPost(model);
            }
            else
            {
                // now lets check if it is the same installation
                var exist = CheckDuplicateInstallation(model);
                // if it doesnt exitst we do insert
                if (exist == 1)
                {
                     SuiviArretInstallationPost(model);
                }
                else
                {
                    var lastOfus = suiviArretInstallationsGet.Last();
                    var ToUpdate = await _context.ProdSuiviArretsSonalgazTrainCages.FirstOrDefaultAsync(item => item.Id == lastOfus.Id);
                    // check if this is just an other element of the same arret
                    if (!(ToUpdate.HeureDebut == model.HeureDebut && ToUpdate.HerueFin == model.HeureFin))
                    {
                         SuiviArretInstallationPost(model);
                    }
                }
            }

        }
        public async Task SuiviArretInstallationUpdateInUpdate(ArretProductionJournee model, ArretProductionJournee oldModel)
        {
            var suiviArretInstallationsGet = _context.ProdSuiviArretsSonalgazTrainCages
                        .OrderBy(o => o.Id)
                        .Where(c => c.DateArret == model.DateArret)
                        .Select(i => new
                        {
                            i.Id,
                            i.DateArret,
                            i.HeureDebut,
                            i.HerueFin,
                            i.Installation
                        }).ToList();
            if (suiviArretInstallationsGet.Count == 0)
            {
                //it does not exist we add it
                 SuiviArretInstallationPost(model);
            }
            else
            {
                // now lets check if it is the same installation
                var exist = CheckDuplicateInstallation(model);
                // if it doesnt exitst we do insert
                if (exist == 1)
                {
                     SuiviArretInstallationPost(model);
                }
                else
                {
                    var testEx = 0;
                    //Check for Duplicate arrets
                    // check if this is just an upate on an existing arret
                    foreach (var par in suiviArretInstallationsGet)
                    {
                        if (par.HeureDebut == oldModel.HeureDebut && par.HerueFin == oldModel.HeureFin)
                        {
                            testEx = 1;
                            var ToUpdate = await _context.ProdSuiviArretsSonalgazTrainCages.FirstOrDefaultAsync(item => item.Id == par.Id);
                            ToUpdate.HeureDebut = (DateTime)model.HeureDebut;
                            ToUpdate.HerueFin = (DateTime)model.HeureFin;
                            ToUpdate.Cisaillees = (int)(model.NbrBilleteCisalleFinisseuse + model.NbrBilleteCisalleTrio);
                            ToUpdate.DateArret = (DateTime)model.DateArret;
                            ToUpdate.Installation = model.CodeMachine;
                            ToUpdate.EnumArret = model.EnumArret;

                            _context.ProdSuiviArretsSonalgazTrainCages.Update(ToUpdate);
                            break;
                        }

                    }
                    // check if it is an other arret of the same installation
                    if (testEx == 0)
                    {
                        // we add it
                        SuiviArretInstallationPost(model);
                    }
                }
            }
        }
        public void SuiviArretInstallationPost(ArretProductionJournee model)
        {
            var prodSuiviArretsSonalgazTrainCages = new ProdSuiviArretsSonalgazTrainCages();
            var prodSuiviArretsSonalgazTrainCagesGet = _context.ProdSuiviArretsSonalgazTrainCages
                                    .OrderBy(o => o.Id)
                                    .Select(i => new
                                    {
                                        i.Id
                                    }).ToList();
            if (prodSuiviArretsSonalgazTrainCagesGet.Count == 0)
            {
                prodSuiviArretsSonalgazTrainCages.Id = 1;
            }
            else
            {
                var last = prodSuiviArretsSonalgazTrainCagesGet.Last();
                prodSuiviArretsSonalgazTrainCages.Id = last.Id + 1;
            }
            prodSuiviArretsSonalgazTrainCages.DateArret = (DateTime)model.DateArret;
            InitSuiviInstallationNew(prodSuiviArretsSonalgazTrainCages, model);
            _context.ProdSuiviArretsSonalgazTrainCages.Add(prodSuiviArretsSonalgazTrainCages);
        }
        public void InitSuiviInstallationNew(ProdSuiviArretsSonalgazTrainCages prodSuiviArretsSonalgazTrainCages, ArretProductionJournee model)
        {
            prodSuiviArretsSonalgazTrainCages.DateArret = (DateTime)model.DateArret;
            prodSuiviArretsSonalgazTrainCages.HeureDebut = (DateTime)model.HeureDebut;
            prodSuiviArretsSonalgazTrainCages.HerueFin = (DateTime)model.HeureFin;
            prodSuiviArretsSonalgazTrainCages.Installation = model.CodeMachine;
            prodSuiviArretsSonalgazTrainCages.Cisaillees = (int)(model.NbrBilleteCisalleTrio + model.NbrBilleteCisalleFinisseuse);
            prodSuiviArretsSonalgazTrainCages.EnumArret = model.EnumArret;
        }
        public async Task RemoveFromSuiviInstallationAsync(ArretProductionJournee model)
        {
            var ToRemove = await _context.ProdSuiviArretsSonalgazTrainCages.FirstOrDefaultAsync(item => item.DateArret == model.DateArret && item.Installation.ToString() == model.CodeMachine && item.HeureDebut == model.HeureDebut && item.HerueFin == model.HeureFin && item.EnumArret == model.EnumArret);
            if(ToRemove!=null)
                _context.ProdSuiviArretsSonalgazTrainCages.Remove(ToRemove);
        }
        //=======================
        #endregion
        public int CheckIsMachine(int x)
        {
            // CAGES = 3 -> 14 +26, Train = 24, Casette = 15, Table pivotante = 36, Cisaille 36m = 16, Four = 25, Thermex= 37
            // Deviateur = 29, Debloqeur = 39, Cisaille C41 = 18
            if (x == 4  || x == 5  || x == 6  || x == 7  || x == 8  || x == 9 || x == 10 || x == 11 || x == 12 ||
                x == 13 || x == 14 || x == 26 || x == 36 || x == 24 || x == 39|| x == 15 || x == 16 || x == 25 ||
                x == 37 || x == 29 || x == 18)
            {
                return 1;
            }
            return -1;
        }
    }
}