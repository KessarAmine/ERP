@using DevKbfSteel.Models
@using DevExpress.XtraReports.UI;
@using DevKbfSteel.Controllers
@using DevExpress.XtraReports.Parameters;
@using DevKbfSteel.Reports
@using DevExpress.AspNetCore
@using DevExtreme.AspNet.Mvc
@{
    ViewData["Title"] = "Exploitation-Arrets Travail ";
    Layout = "~/Views/Shared/_LayoutExploitationManager.cshtml";
}

@(Html.DevExtreme().Toolbar()
    .Items(items =>
    {
        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("yyyy-MM-dd").ID("FilterDateDebut"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);

        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("yyyy-MM-dd").ID("FilterDateFin"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);
        items.Add()
            .Widget(w => w.Button()
                .Icon("fas fa-clipboard-list")
                .OnClick("SuiviSonlagaz_click")
                .Hint("Suivi des arrêts sonalgaz"))

            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);

    }
    )
)
@(Html.DevExtreme().TabPanel()
        .Height("100%")
        .Items(items =>
        {
            items.Add()
                .Title("Arrets Programmes")
                .Template(new TemplateName("ArretsProgrammesGrid"));
            items.Add()
                .Title("Arrets de préparation et de Sonalgaz")
                .Template(new TemplateName("ArretsPsSonalgazGrid"));
        })
        )

@using (Html.DevExtreme().NamedTemplate("ArretsProgrammesGrid"))
{

    @(Html.DevExtreme().Toolbar()
    .Items(items =>
    {
        items.Add()
           .Widget(w => w
           .Button()
           .Icon("refresh")
           .OnClick("refreshButton_click")
       )
       .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
       .Location(ToolbarItemLocation.Before);

    }
    )
)
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.ProdArretsProgramme>()
    .ID("ArretsProgrammes")
    .DataSource(ds => ds.Mvc()
        .Controller("ProdArretsProgrammes")
        .LoadAction("Get")
        .InsertAction("Post")
        .UpdateAction("Put")
        .DeleteAction("Delete")
        .Key("DateArret")
        .LoadParams(new { dateDebut = new JS("dateDebutBox_value"), dateFin = new JS("dateFinBox_value") })
    )

    .OnRowExpanding(@<text>
        function(e) {
        	e.component.collapseAll(-1);
        }
    </text>)
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always))
    .Height("90%")
    .RemoteOperations(true)
    .Columns(columns => {

        columns.AddFor(m => m.DateArret).Format("d/M/yyyy")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));

        columns.AddFor(m => m.DateDebut).DataType(GridColumnDataType.DateTime).Format("d/M/yyyy")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));

        columns.AddFor(m => m.DateFin).DataType(GridColumnDataType.DateTime).Format("d/M/yyyy")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
        columns.Add()
        .Type(GridCommandColumnType.Buttons)
        .Width(110)
        .Buttons(b =>
        {
            b.Add().Name(GridColumnButtonName.Edit);
            b.Add().Name(GridColumnButtonName.Delete);
        });
    })
    .Editing(editing =>
    {
        editing.AllowUpdating(true);
        editing.AllowDeleting(true);
        editing.AllowAdding(true);
        editing.Mode(GridEditMode.Popup)
        .Popup(p => p.Title("Editer Arret")
        .ShowTitle(true)
        .Position(pos => pos.My(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).Of(new JS("window"))));
    })
    .MasterDetail(md => md
    .Enabled(true)
    .Template(new TemplateName("ArretsProgrammesDetails"))
    )
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
)
}
@using (Html.DevExtreme().NamedTemplate("ArretsProgrammesDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Tâches de l'arret")
                .Template(new TemplateName("ArretsProgrammesTachesGrid"))
                .Option("Taches", new { id = new JS("data.DateArret") });
            items.Add()
                .Title("personnels de l'arret")
                .Template(new TemplateName("ArretsProgrammesPersonnelsGrid"))
                .Option("Personnels", new { id = new JS("data.DateArret") });
            items.Add()
                .Title("Arrets")
                .Template(new TemplateName("ArretsProgrammesArretsGrid"))
                .Option("Arrets", new { id = new JS("data.DateArret") });
            items.Add()
                .Title("Interuptions par sonalgaz")
                .Template(new TemplateName("ArretsProgrammesSonalgazGrid"))
                .Option("Sonalgaz", new { dateDebut = new JS("data.DateDebut"), dateFin= new JS("data.DateFin") });
        })
        )
}
@using (Html.DevExtreme().NamedTemplate("ArretsProgrammesArretsGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.ProdArretsProgrammeArrets>()
    .DataSource(ds => ds.Mvc()
        .Controller("ProdArretsProgrammes")
        .LoadAction("GetArrets")
        .InsertAction("PostArrets")
        .UpdateAction("PutArrets")
        .DeleteAction("DeleteArrets")
        .Key("Id")
        .LoadParams(new
        {
            id = new JS("Arrets.id")
        })
    )
    .Columns(columns => {

        columns.AddFor(m => m.DateArret)
        .DataType(GridColumnDataType.DateTime)
        .Format("d/M/yyyy")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));

        columns.AddFor(m => m.HeureDebut)
        .DataType(GridColumnDataType.DateTime)
        .Format("HH:mm")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));

        columns.AddFor(m => m.HeureFin)
        .DataType(GridColumnDataType.DateTime)
        .Format("HH:mm")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));

        columns.AddFor(m => m.Description);

        columns.Add()
        .Type(GridCommandColumnType.Buttons)
        .Width(110)
        .Buttons(b =>
        {
            b.Add().Name(GridColumnButtonName.Edit);
            b.Add().Name(GridColumnButtonName.Delete);
        });
    })
    .Editing(editing =>
    {
        editing.AllowUpdating(true);
        editing.AllowDeleting(true);
        editing.AllowAdding(true);
        editing.Mode(GridEditMode.Popup)
        .Popup(p => p.Title("Editer ARRET")
        .ShowTitle(true)
        .Position(pos => pos.My(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).Of(new JS("window"))));
    })
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .Selection(s => s.Mode(SelectionMode.Multiple))
)
}
@using (Html.DevExtreme().NamedTemplate("ArretsProgrammesTachesGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.ProdTachesArretsProgrammes>()
    .DataSource(ds => ds.Mvc()
        .Controller("ProdArretsProgrammes")
        .LoadAction("GetTaches")
        .InsertAction("PostTaches")
        .UpdateAction("PutTaches")
        .DeleteAction("DeleteTaches")
        .Key("Id")
        .LoadParams(new
        {
            id = new JS("Taches.id")
        })
    )
    .Columns(columns => {

        columns.AddFor(m => m.DateArret)
        .DataType(GridColumnDataType.DateTime)
        .Format("d/M/yyyy")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));

        columns.AddFor(m => m.Description);

        columns.AddFor(m => m.Etat).Caption("Etat")
                .Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().Controller("ProdArretsProgrammes").LoadAction("EtatLookup").Key("Value"))
                .AllowClearing(true)
                .ValueExpr("Value")
                .DisplayExpr("Text")
                );
        columns.Add()
        .Type(GridCommandColumnType.Buttons)
        .Width(110)
        .Buttons(b =>
        {
            b.Add().Name(GridColumnButtonName.Edit);
            b.Add().Name(GridColumnButtonName.Delete);
        });
    })
    .Editing(editing =>
    {
        editing.AllowUpdating(true);
        editing.AllowDeleting(true);
        editing.AllowAdding(true);
        editing.Mode(GridEditMode.Popup)
        .Popup(p => p.Title("Editer Tache")
        .ShowTitle(true)
        .Position(pos => pos.My(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).Of(new JS("window"))));
    })
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .Selection(s => s.Mode(SelectionMode.Multiple))
)
}
@using (Html.DevExtreme().NamedTemplate("ArretsProgrammesPersonnelsGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.ProdPersonnelsArretsProgrammes>()
    .DataSource(ds => ds.Mvc()
        .Controller("ProdArretsProgrammes")
        .LoadAction("GetPersonnels")
        .InsertAction("PostPersonnels")
        .UpdateAction("PutPersonnels")
        .DeleteAction("DeletePersonnels")
        .Key("Id")
        .LoadParams(new
        {
            id = new JS("Personnels.id")
        })
    )
    .Columns(columns => {

        columns.AddFor(m => m.DateArret)
        .DataType(GridColumnDataType.DateTime)
        .Format("d/M/yyyy")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));

        columns.AddFor(m => m.CodeIntervenant)
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("GestionPersonnelsExploitation").LoadAction("NomLookup").Key("Value"))
        .AllowClearing(true)
        .ValueExpr("Value")
        .DisplayExpr("Text")
        )
        .EditCellTemplate(@<text>
        @Html.Partial("DxDropDownBox")
        </text>)
        .AllowGrouping(true);
        columns.Add()
        .Type(GridCommandColumnType.Buttons)
        .Width(110)
        .Buttons(b =>
        {
            b.Add().Name(GridColumnButtonName.Edit);
            b.Add().Name(GridColumnButtonName.Delete);
        });
    })
    .Editing(editing =>
    {
        editing.AllowUpdating(true);
        editing.AllowDeleting(true);
        editing.AllowAdding(true);
        editing.Mode(GridEditMode.Popup)
        .Popup(p => p.Title("Editer Personnel")
        .ShowTitle(true)
        .Position(pos => pos.My(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).Of(new JS("window"))));
    })
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .Selection(s => s.Mode(SelectionMode.Multiple))
)
}
@using (Html.DevExtreme().NamedTemplate("ArretsProgrammesSonalgazGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.ProdArretsPsSonalgaz>()
        .ID("ArretsSonalgaz")
        .DataSource(ds => ds.Mvc()
        .Controller("ProdArretsProgrammes")
        .LoadAction("GetInteruptions")
        .InsertAction("PostInteruptions")
        .UpdateAction("PutInteruptions")
        .DeleteAction("DeleteInteruptions")
        .Key("Id")
        .LoadParams(new
        {
            dateDebut = new JS("Sonalgaz.dateDebut"),
            dateFin = new JS("Sonalgaz.dateFin")
        }))
    .RemoteOperations(true)
    .Columns(columns => {

        columns.AddFor(m => m.DateArret).Format("d/M/yyyy")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));

        columns.AddFor(m => m.DateDebut).DataType(GridColumnDataType.DateTime).Format("d/M/yyyy")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));

        columns.AddFor(m => m.DateFin).DataType(GridColumnDataType.DateTime).Format("d/M/yyyy")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
    })
    .Editing(editing =>
    {
        editing.AllowUpdating(true);
        editing.AllowDeleting(true);
        editing.AllowAdding(true);
        editing.Mode(GridEditMode.Popup)
        .Popup(p => p.Title("Editer Interuption")
        .ShowTitle(true)
        .Position(pos => pos.My(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).Of(new JS("window"))));
    })
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
)
}
@using (Html.DevExtreme().NamedTemplate("ArretsPsSonalgazGrid"))
{@(Html.DevExtreme().Toolbar()
    .Items(items =>
    {
        items.Add()
           .Widget(w => w
           .Button()
           .Icon("refresh")
           .OnClick("refreshButton_click2")
       )
       .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
       .Location(ToolbarItemLocation.Before);

    }
    )
)
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.ProdArretsPsSonalgaz>()
        .ID("ArretsPS")
    .DataSource(ds => ds.Mvc()
        .Controller("ProdArretsProgrammes")
        .LoadAction("GetPsSonalgaz")
        .Key("DateArret")
        .LoadParams(new { dateDebut = new JS("dateDebutBox_value"), dateFin = new JS("dateFinBox_value") })
    )
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always))
    .Height("90%")
    .RemoteOperations(true)
    .Columns(columns => {

        columns.AddFor(m => m.DateArret).Format("d/M/yyyy")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));

        columns.AddFor(m => m.DateDebut).DataType(GridColumnDataType.DateTime).Format("d/M/yyyy")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));

        columns.AddFor(m => m.DateFin).DataType(GridColumnDataType.DateTime).Format("d/M/yyyy")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));

        columns.AddFor(m => m.Duree);
        columns.AddFor(m => m.Cause);
        columns.AddFor(m => m.NbrCisaillees);

    })
   .ColumnChooser(cc => cc.Enabled(true).AllowSearch(true))
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
)
}

<script>

        function refreshButton_click() {
         DevExpress.ui.notify("Rafraichissement en cours!");
            var demandesTravailGrid = $("#ArretsProgrammes").dxDataGrid("instance");
         var demandesTravailDS = demandesTravailGrid.getDataSource();
         demandesTravailGrid.beginCustomLoading("Chargement en cours...");
         demandesTravailDS.reload();
         demandesTravailGrid.refresh();
         demandesTravailGrid.endCustomLoading();
        }
        function refreshButton_click2() {
            DevExpress.ui.notify("Rafraichissement en cours!");
            var demandesTravailGrid = $("#ArretsPS").dxDataGrid("instance");
            var demandesTravailDS = demandesTravailGrid.getDataSource();
            demandesTravailGrid.beginCustomLoading("Chargement en cours...");
            demandesTravailDS.reload();
            demandesTravailGrid.refresh();
            demandesTravailGrid.endCustomLoading();
        }
        function addButton_click() {
            DevExpress.ui.notify("Ajouter une demande!");
            window.location.href = '@Url.Action("NewReception")';
        }

        function dateDebutBox_value() {
            var dateDebutBox = $("#FilterDateDebut").dxDateBox("instance");
            console.log(dateDebutBox.option('value'));
            return new Date(dateDebutBox.option('value')).toJSON();
        }

        function dateFinBox_value() {
            var dateFinBox = $("#FilterDateFin").dxDateBox("instance");
            console.log(dateFinBox.option('value'));
            return new Date(dateFinBox.option('value')).toJSON();
        }

    function receptionCell_prepared(e) {
        console.log(e.rowType.data)

            if (e.rowType === "data" && e.column.command === "edit") {
                var isEditing = e.row.isEditing, $links = e.cellElement.find(".dx-link");
                $links.text("");
                if (isEditing) {
                    $links.filter(".dx-link-save").addClass("dx-icon-save");
                    $links.filter(".dx-link-cancel").addClass("dx-icon-revert");
                } else {
                    $links.filter(".dx-link-edit").addClass("dx-icon-edit");
                    $links.filter(".dx-link-delete").addClass("dx-icon-trash");
                }
            }
        }

        var imprimerDemandeTravail = function (e) {
            var num = e.row.data.NumDt;

               window.location.href = ' @Url.Action("DemandeTravailViewer")';
         }
    function SuiviSonlagaz_click() {
        //GetDateDebut GetDateFin
        var Datedebut = $("#FilterDateDebut").dxDateBox("instance").option("text");
        var Datefin = $("#FilterDateFin").dxDateBox("instance").option("text");
        window.open(' @Url.Action("SuiviSonalgazViewer", "ExploitationManager")?Datedebut=' + Datedebut + '&Datefin=' + Datefin,
                    '_blank').focus();
    }



</script>
