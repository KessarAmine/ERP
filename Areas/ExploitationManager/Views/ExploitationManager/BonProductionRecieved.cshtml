@using DevKbfSteel.Models
@using DevExpress.XtraReports.UI;
@using DevKbfSteel.Controllers
@using DevExpress.XtraReports.Parameters;
@using DevKbfSteel.Reports
@using DevExpress.AspNetCore
@using DevExtreme.AspNet.Mvc
@{
    ViewData["Title"] = "Exploitation-Bons de Production";
    Layout = "~/Views/Shared/_LayoutExploitationManager.cshtml";
}
@(Html.DevExtreme().Toolbar()
    .Items(items =>
    {
        items.Add()
           .Widget(w => w
           .Button()
           .Icon("refresh")
           .OnClick("refreshButton_click")
       )
       .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
       .Location(ToolbarItemLocation.Before);

        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("dd/MM/yyyy").ID("FilterDateDebut"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);

    }
    )
)
@(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.BonProduction>
    ()
    .ID("BonProduction")

    .DataSource(ds => ds.Mvc()
    .Controller("BonProductions")
    .LoadAction("Get")
    .Key("NumBon")
    .LoadParams(new { dateDebut = new JS("dateDebutBox_value"), dateFin = new JS("dateFinBox_value") })
    )
    .RemoteOperations(true)
    .MasterDetail(md => md
    .Enabled(true)
    .Template(new TemplateName("RapportInterventionDetails"))
    )
    .Columns(columns => {

        columns.AddFor(m => m.NumBon);

        columns.AddFor(m => m.CodeProduit).Caption("Produit")
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("BonProductions").LoadAction("ProduitsLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        );

        columns.AddFor(m => m.UniteMesure);

        columns.AddFor(m => m.Qte);
        columns.AddFor(m => m.CodeReceveur).Caption("Receveur")
        .Lookup(lookup => lookup
        .DataSource(ds => ds.WebApi().Controller("BonProductions").LoadAction("IntervenantLookup").Key("Value"))
        .ValueExpr("Value")
        .DisplayExpr("Text")
        );
        columns.AddFor(m => m.Nb);

    })
       .Export(e => e.Enabled(true).AllowExportSelectedData(true))
       .FilterRow(f => f.Visible(true))
       .HeaderFilter(headerfilter => headerfilter.Visible(true))
       .GroupPanel(p => p.Visible(true))
       .AllowColumnReordering(true)
       .AllowColumnResizing(true)
       .OnCellPrepared("receptionCell_prepared")
       .NoDataText("Aucune donnée à afficher")
       .CacheEnabled(true)
       .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
       .RemoteOperations(true)
       .Selection(s => s.Mode(SelectionMode.Multiple))
    )

@using (Html.DevExtreme().NamedTemplate("RapportInterventionDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Production")
                .Template(new TemplateName("ProductionGrid"))
                .Option("Production", new { id = new JS("data.NumBon") });
            items.Add()
                .Title("Arrets et incidents")
                .Template(new TemplateName("ArretsGrid"))
                .Option("Arrets", new { id = new JS("data.NumBon") });
            items.Add()
                .Title("Cadences")
                .Template(new TemplateName("CadencesGrid"))
                .Option("Cadences", new { id = new JS("data.NumBon") });
            items.Add()
                .Title("Responsables")
                .Template(new TemplateName("ResponsablesGrid"))
                .Option("Responsables", new { id = new JS("data.NumBon") });
        })
        )
}

@using (Html.DevExtreme().NamedTemplate("ProductionGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.JourneeProduction>()
        .ShowBorders(true)
        .LoadPanel(l => l.Enabled(false))
        .Columns(columns =>
        {
            columns.AddFor(m => m.NumRapport);
            columns.AddFor(m => m.NbrCisaille).Caption("Bilettes Cisallees");
            columns.AddFor(m => m.NbrDefourne).Caption("Bilettes Defrounees");
            columns.AddFor(m => m.NbrExpulsee).Caption("Bilettes Expulsee");
            columns.AddFor(m => m.NbrRealisee).Caption("Bilettes Realisees");

            columns.Add()
                .Type(GridCommandColumnType.Buttons)
                .Width(110)
                .Buttons(b =>
                {
                    b.Add().Name(GridColumnButtonName.Edit);
                    b.Add().Name(GridColumnButtonName.Delete);
                });
        })
         .DataSource(ds => ds.Mvc()
             .Controller("BonProductions")
             .LoadAction("GetRapport")
             .Key("NumRapport")
             .LoadParams(new
             {
                 id = new JS("Production.id")
             }
             )
            )
    )
}

@using (Html.DevExtreme().NamedTemplate("ResponsablesGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.JourneeProduction>()
        .ShowBorders(true)
        .LoadPanel(l => l.Enabled(false))
        .Columns(columns =>
        {
            columns.AddFor(m => m.NumRapport);
            columns.AddFor(m => m.OperateurPcp).Caption("Operateur PCp")
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("JourneeProduction").LoadAction("IntervenantLookup").Key("Value"))
            .AllowClearing(true)
            .ValueExpr("Value")
            .DisplayExpr("Text")
            );
            columns.AddFor(m => m.ChefPoste).Caption("Chef de poste")
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("JourneeProduction").LoadAction("IntervenantLookup").Key("Value"))
            .AllowClearing(true)
            .ValueExpr("Value")
            .DisplayExpr("Text")
            );
            columns.AddFor(m => m.IngProcess).Caption("Ingenieur de process")
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("JourneeProduction").LoadAction("IntervenantLookup").Key("Value"))
            .AllowClearing(true)
            .ValueExpr("Value")
            .DisplayExpr("Text")
            );

            columns.Add()
                .Type(GridCommandColumnType.Buttons)
                .Width(110)
                .Buttons(b =>
                {
                    b.Add().Name(GridColumnButtonName.Edit);
                    b.Add().Name(GridColumnButtonName.Delete);
                });
        })
         .DataSource(ds => ds.Mvc()
             .Controller("BonProductions")
             .LoadAction("GetRapport")
             .Key("NumRapport")
             .LoadParams(new
             {
                 id = new JS("Responsables.id")
             }
             )
            )
    )
}

@using (Html.DevExtreme().NamedTemplate("ArretsGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.ArretProductionJournee>()
        .ShowBorders(true)
        .LoadPanel(l => l.Enabled(false))
        .Columns(columns =>
        {
            columns.AddFor(m => m.NumRapport);
            columns.AddFor(m => m.NumIncident);
            columns.AddFor(m => m.HeureDebut).DataType(GridColumnDataType.DateTime);
            columns.AddFor(m => m.HeureFin).DataType(GridColumnDataType.DateTime);
            columns.AddFor(m => m.Cause);
            columns.AddFor(m => m.EnumArret).Caption("Code Arret")
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("JourneeProduction").LoadAction("EnumArretLookup").Key("Value"))
            .AllowClearing(true)
            .ValueExpr("Value")
            .DisplayExpr("Text")
            );
            columns.AddFor(m => m.CodeMachine).Caption("Installation")
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("JourneeProduction").LoadAction("MachineLookup").Key("Value"))
            .AllowClearing(true)
            .ValueExpr("Value")
            .DisplayExpr("Text")
            );
            columns.AddFor(m => m.SubMachine)
            .Caption("Composant")
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("JourneeProduction").LoadAction("SubMachinesLookup").Key("Value"))
            .AllowClearing(true)
            .ValueExpr("Value")
            .DisplayExpr("Text")
            );
            columns.AddFor(m => m.NbrBilleteRejetees);
            columns.AddFor(m => m.NbrBilleteDefournees);
            columns.AddFor(m => m.NbrBilleteCisalleTrio);
            columns.AddFor(m => m.NbrBilleteCisalleFinisseuse);

            columns.Add()
                .Type(GridCommandColumnType.Buttons)
                .Width(110)
                .Buttons(b =>
                {
                    b.Add().Name(GridColumnButtonName.Edit);
                    b.Add().Name(GridColumnButtonName.Delete);
                });
        })
         .DataSource(ds => ds.Mvc()
             .Controller("ArretProductionJournees")
             .LoadAction("GetRapport")
             .Key("Id")
             .LoadParams(new
             {
                 id = new JS("Arrets.id")
             }
             )
            )
    )
}

@using (Html.DevExtreme().NamedTemplate("CadencesGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.CadenceProductionJournee>()
        .ShowBorders(true)
        .LoadPanel(l => l.Enabled(false))
        .Columns(columns =>
        {
            columns.AddFor(m => m.NumRapport);
            columns.AddFor(m => m.H1);
            columns.AddFor(m => m.H2);
            columns.AddFor(m => m.H3);
            columns.AddFor(m => m.H4);
            columns.AddFor(m => m.H5);
            columns.AddFor(m => m.H6);
            columns.AddFor(m => m.H7);
            columns.AddFor(m => m.H8);
            columns.AddFor(m => m.H9);
            columns.AddFor(m => m.H10);
            columns.AddFor(m => m.H11);

            columns.Add()
                .Type(GridCommandColumnType.Buttons)
                .Width(110)
                .Buttons(b =>
                {
                    b.Add().Name(GridColumnButtonName.Edit);
                    b.Add().Name(GridColumnButtonName.Delete);
                });
        })
         .DataSource(ds => ds.Mvc()
             .Controller("CadenceProductionJournees")
             .LoadAction("GetRapport")
             .Key("Id")
             .LoadParams(new
             {
                 id = new JS("Cadences.id")
             }
             )
            )

    )
}

<script>

        function refreshButton_click() {
         DevExpress.ui.notify("Rafraichissement en cours!");
            var demandesTravailGrid = $("#BonProduction").dxDataGrid("instance");
         var demandesTravailDS = demandesTravailGrid.getDataSource();
         demandesTravailGrid.beginCustomLoading("Chargement en cours...");
         demandesTravailDS.reload();
         demandesTravailGrid.refresh();
         demandesTravailGrid.endCustomLoading();
        }

        function addButton_click() {
            DevExpress.ui.notify("Ajouter une demande!");
            window.location.href = '@Url.Action("NewReception")';
        }

        function dateDebutBox_value() {
            var dateDebutBox = $("#FilterDateDebut").dxDateBox("instance");
            console.log(dateDebutBox.option('value'));
            return new Date(dateDebutBox.option('value')).toJSON();
        }

        function dateFinBox_value() {
            var dateFinBox = $("#FilterDateFin").dxDateBox("instance");
            console.log(dateFinBox.option('value'));
            return new Date(dateFinBox.option('value')).toJSON();
        }

        function receptionCell_prepared(e) {
            if (e.rowType === "data" && e.column.command === "edit") {
                var isEditing = e.row.isEditing, $links = e.cellElement.find(".dx-link");
                $links.text("");
                if (isEditing) {
                    $links.filter(".dx-link-save").addClass("dx-icon-save");
                    $links.filter(".dx-link-cancel").addClass("dx-icon-revert");
                } else {
                    $links.filter(".dx-link-edit").addClass("dx-icon-edit");
                    $links.filter(".dx-link-delete").addClass("dx-icon-trash");
                }
            }
        }

        var imprimerDemandeTravail = function (e) {
            var num = e.row.data.NumDt;

               window.location.href = ' @Url.Action("DemandeTravailViewer")';
         }

        var docViewer;
        function GetDocumentViewer(s, e) {
            docViewer = s;
        }

        function BuildOnClick() {
            var parameterValue = 2;
            docViewer.GetParametersModel()["NumDt"](parameterValue);
            docViewer.StartBuild();
        }

        function GoToLastPage(s, e) {
            s.GoToPage(e.PageCount - 1);
        }

        function WebDocumentViewerInit(s, e) {
            var parametersModel = s.GetParametersModel();
            if (!parametersModel) { return; }
            var serializeParametersOriginal = parametersModel.serializeParameters;
            parametersModel.serializeParameters = function () {
                var serializedParameters = serializeParametersOriginal.apply(parametersModel);
                var reportParameter = serializedParameters.filter(function (p) { return p.Key === "MyParameterName" })[0];
                if (reportParameter) {
                    reportParameter.Value = "my custom parameter value";
                }
                return serializedParameters;
            }
        }



</script>