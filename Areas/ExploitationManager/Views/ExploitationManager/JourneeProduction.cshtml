@using DevKbfSteel.Models
@using DevExpress.XtraReports.UI;
@using DevKbfSteel.Controllers
@using DevExpress.XtraReports.Parameters;
@using DevKbfSteel.Reports
@using DevExpress.AspNetCore
@using DevExtreme.AspNet.Mvc
@{
    ViewData["Title"] = "Exploitation-Journées de production";
    Layout = "~/Views/Shared/_LayoutExploitationManager.cshtml";
}
@(Html.DevExtreme().Toolbar()
    .Items(items =>
    {
        items.Add()
           .Widget(w => w
           .Button()
           .Icon("refresh")
           .OnClick("refreshButton_click")
       )
       .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
       .Location(ToolbarItemLocation.Before);

        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("yyyy-MM-dd").ID("FilterDateDebut"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);

        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("yyyy-MM-dd").ID("FilterDateFin"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);

    }
    )
)
@(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.JourneeProduction>()
    .Height("100%")
    .DataSource(ds => ds.Mvc()
     .Controller("JourneeProduction")
     .LoadAction("Get")
     .InsertAction("Post")
     .UpdateAction("PutMain")
     .DeleteAction("Delete")
     .Key("NumRapport")
     .LoadParams(new { dateDebut = new JS("dateDebutBox_value"), dateFin = new JS("dateFinBox_value") })
    )
    .OnRowExpanding(@<text>
        function(e) {
        	e.component.collapseAll(-1);
        }
    </text>)
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always)
    .Mode(GridScrollingMode.Virtual))
    .Height("95%")
    .RemoteOperations(true)
    .ID("JourneeProdGrid")
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns =>
    {
        columns.AddFor(m => m.NumBon);
        columns.AddFor(m => m.NumRapport);
        columns.AddFor(m => m.Date).Format("yyyy-MM-dd")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
        columns.AddFor(m => m.Poste);
        columns.AddFor(m => m.DimBillete);
        columns.AddFor(m => m.LongBillete);
        columns.AddFor(m => m.DimProduitFini);
        columns.AddFor(m => m.DimProduitConforme);
        columns.AddFor(m => m.NumRapportPreparation);
        columns.AddFor(m => m.OperateurPcp).Visible(false).Caption("Operateur PCp")
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("GestionPersonnelsExploitation").LoadAction("NomLookup").Key("Value"))
            .AllowClearing(true)
            .ValueExpr("Value")
            .DisplayExpr("Text")
            )
            .AllowGrouping(true);
        columns.AddFor(m => m.ChefPoste).Visible(false).Caption("Chef de poste")
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("GestionPersonnelsExploitation").LoadAction("NomLookup").Key("Value"))
            .AllowClearing(true)
            .ValueExpr("Value")
            .DisplayExpr("Text")
            )
            .AllowGrouping(true);
        columns.AddFor(m => m.IngProcess).Visible(false).Caption("Ingenieure Process")
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("GestionPersonnelsExploitation").LoadAction("NomLookup").Key("Value"))
            .AllowClearing(true)
            .ValueExpr("Value")
            .DisplayExpr("Text")
            )
            .AllowGrouping(true);
        columns.AddFor(m => m.Note);
        columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Width(110)
            .Buttons(b => {
            b.Add().Name(GridColumnButtonName.Edit);
            b.Add().Name(GridColumnButtonName.Delete);
            b.Add()
                    .Hint("Imprimer")
                    .OnClick(@<text>imprimerRapportJournalierProduction</text>)
                               .Icon("print");
            });
    })
    .WordWrapEnabled(true)
    .ColumnAutoWidth(true)
   .Editing(editing =>
   {
       editing.AllowUpdating(true);
       editing.AllowDeleting(true);
       editing.AllowAdding(true);
       editing.Mode(GridEditMode.Popup)
        .Popup(p => p.Title("Editer Poste")
        .ShowTitle(true)
        .Position(pos => pos.My(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).Of(new JS("window"))));
   })
    .MasterDetail(md => md
    .Enabled(true)
    .Template(new TemplateName("JourneeProductionDetails"))
    )
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
)



@using (Html.DevExtreme().NamedTemplate("JourneeProductionDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Arrets et incidents")
                .Template(new TemplateName("ArretsGrid"))
                .Option("Arrets", new { id = new JS("data.NumRapport") });
            items.Add()
                .Title("Cadences")
                .Template(new TemplateName("CadencesGrid"))
                .Option("Cadences", new { id = new JS("data.NumRapport") });
            items.Add()
                .Title("Responsables")
                .Template(new TemplateName("ResponsablesGrid"))
                .Option("Responsables", new { id = new JS("data.NumRapport") });
            items.Add()
                .Title("Preparation des calibres")
                .Template(new TemplateName("CalibresGrid"))
                .Option("Calibres", new { id = new JS("data.NumRapportPreparation") });
            items.Add()
                .Title("Preparation des cylindres")
                .Template(new TemplateName("CylindresGrid"))
                .Option("Cylindres", new { id = new JS("data.NumRapportPreparation"), dateJournee = new JS("data.Date") });
            items.Add()
                .Title("Production")
                .Template(new TemplateName("ProductionGrid"))
                .Option("Production", new { id = new JS("data.NumRapport") });
            items.Add()
                .Title("Parametres Production")
                .Template(new TemplateName("ParametresGrid"))
                .Option("Parametres", new { id = new JS("data.NumRapport") });
        })
        )
}
@using (Html.DevExtreme().NamedTemplate("ProductionGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.JourneeProduction>()
        .ShowBorders(true)
        .LoadPanel(l => l.Enabled(false))
        .Columns(columns =>
        {
            columns.AddFor(m => m.NumRapport);
            columns.AddFor(m => m.NbrDefourne).Caption("Bilettes Defrounees");
            columns.AddFor(m => m.NbrCisaille).Caption("Bilettes Cisallees");
            columns.AddFor(m => m.NbrExpulsee).Caption("Bilettes Expulsee");
            columns.AddFor(m => m.NbrRealisee).Caption("Bilettes Realisees");
            columns.AddFor(m => m.NbrFardeaux).Caption("Nombre Fardeaux");

            columns.Add()
                .Type(GridCommandColumnType.Buttons)
                .Width(110)
                .Buttons(b =>
                {
                    b.Add().Name(GridColumnButtonName.Edit);
                    b.Add().Name(GridColumnButtonName.Delete);
                });
        })
         .DataSource(ds => ds.Mvc()
             .Controller("JourneeProduction")
             .LoadAction("GetD")
             .UpdateAction("Put")
             .Key("NumRapport")
             .LoadParams(new
             {
                 id = new JS("Production.id")
             }
             )
            )
            .Editing(editing =>
            {
                editing.AllowUpdating(true);

                editing.Mode(GridEditMode.Popup)
                .Popup(p => p.Title("Editer Production")
                .ShowTitle(true)
                .Position(pos => pos.My(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).Of(new JS("window"))));
            })

    )
}
@using (Html.DevExtreme().NamedTemplate("ParametresGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.JourneeProduction>()
        .ShowBorders(true)
        .LoadPanel(l => l.Enabled(false))
        .WordWrapEnabled(true)
        .ColumnAutoWidth(true)
        .Scrolling(scrolling => scrolling
        .ScrollByContent(true)
        .ShowScrollbar(ShowScrollbarMode.Always)
        .Mode(GridScrollingMode.Virtual))
        .Columns(columns =>
        {
            columns.AddFor(m => m.ParDcl).Caption("Diametre cylindre laminant Cage 1");
            columns.AddFor(m => m.ParGrpInter2Dcl).Caption("Diametre cylindre laminant Cage 2");
            columns.AddFor(m => m.ParGrpInter3Dcl).Caption("Diametre cylindre laminant Cage 3");
            columns.AddFor(m => m.ParGrpInter4Dcl).Caption("Diametre cylindre laminant Cage 4");
            columns.AddFor(m => m.ParGrpInter5Dcl).Caption("Diametre cylindre laminant Cage 5");
            columns.AddFor(m => m.ParGrpFin67Dcl).Caption("Diametre cylindre laminant Cage 6/7");
            columns.AddFor(m => m.ParGrpFin8Dcl).Caption("Diametre cylindre laminant Cage 8");
            columns.AddFor(m => m.ParGrpFin9Dcl).Caption("Diametre cylindre laminant Cage 9");
            columns.AddFor(m => m.ParGrpFin10Dcl).Caption("Diametre cylindre laminant Cage 10");
            columns.AddFor(m => m.ParGrpFin11Dcl).Caption("Diametre cylindre laminant Cage 11");
            columns.AddFor(m => m.ParGrpFin12Dcl).Caption("Diametre cylindre laminant Cage 12");
            columns.AddFor(m => m.ParGrpFin13Dcl).Caption("Diametre cylindre laminant Cage 13");

            columns.AddFor(m => m.ParGrpInter2Mvr).Caption("RPM Vitesse Rotation T/MIN Cage 2");
            columns.AddFor(m => m.ParGrpInter3Mvr).Caption("RPM Vitesse Rotation T/MIN Cage 3");
            columns.AddFor(m => m.ParGrpInter4Mvr).Caption("RPM Vitesse Rotation T/MIN Cage 4");
            columns.AddFor(m => m.ParGrpInter5Mvr).Caption("RPM Vitesse Rotation T/MIN Cage 5");
            columns.AddFor(m => m.ParGrpFin67Mvr).Caption("RPM Vitesse Rotation T/MIN Cage 6/7");
            columns.AddFor(m => m.ParGrpFin8Mvr).Caption("RPM Vitesse Rotation T/MIN Cage 8");
            columns.AddFor(m => m.ParGrpFin9Mvr).Caption("RPM Vitesse Rotation T/MIN Cage 9");
            columns.AddFor(m => m.ParGrpFin10Mvr).Caption("RPM Vitesse Rotation T/MIN Cage 10");
            columns.AddFor(m => m.ParGrpFin11Mvr).Caption("RPM Vitesse Rotation T/MIN Cage 11");
            columns.AddFor(m => m.ParGrpFin12Mvr).Caption("RPM Vitesse Rotation T/MIN Cage 12");
            columns.AddFor(m => m.ParGrpFin13Mvr).Caption("RPM Vitesse Rotation T/MIN Cage 13");

            columns.AddFor(m => m.ParGrpInter2Vl).Caption("Vitesse Liniaire Cage 2");
            columns.AddFor(m => m.ParGrpInter3Vl).Caption("Vitesse Liniaire Cage 3");
            columns.AddFor(m => m.ParGrpInter4Vl).Caption("Vitesse Liniaire Cage 4");
            columns.AddFor(m => m.ParGrpInter5Vl).Caption("Vitesse Liniaire Cage 5");
            columns.AddFor(m => m.ParGrpFin67Vl).Caption("Vitesse Liniaire Cage 6/7");
            columns.AddFor(m => m.ParGrpFin8Vl).Caption("Vitesse Liniaire Cage 8");
            columns.AddFor(m => m.ParGrpFin9Vl).Caption("Vitesse Liniaire Cage 9");
            columns.AddFor(m => m.ParGrpFin10Vl).Caption("Vitesse Liniaire Cage 10");
            columns.AddFor(m => m.ParGrpFin11Vl).Caption("Vitesse Liniaire Cage 11");
            columns.AddFor(m => m.ParGrpFin12Vl).Caption("Vitesse Liniaire Cage 12");
            columns.AddFor(m => m.ParGrpFin13Vl).Caption("Vitesse Liniaire Cage 13");

            columns.AddFor(m => m.ParP1a).Caption("1 ere Passe Amperage");
            columns.AddFor(m => m.ParP2a).Caption("2 eme Passe Amperage");
            columns.AddFor(m => m.ParP3a).Caption("2 eme Passe Amperage");
            columns.AddFor(m => m.ParP4a).Caption("4 eme Passe Amperage");
            columns.AddFor(m => m.ParP5a).Caption("5 eme Passe Amperage");

            columns.AddFor(m => m.ParGrpInter2A).Caption("Amperage Cage 2");
            columns.AddFor(m => m.ParGrpInter3A).Caption("Amperage Cage 3");
            columns.AddFor(m => m.ParGrpInter4A).Caption("Amperage Cage 4");
            columns.AddFor(m => m.ParGrpInter5A).Caption("Amperage Cage 5");
            columns.AddFor(m => m.ParGrpFin67A).Caption("Amperage Cage 6/7");
            columns.AddFor(m => m.ParGrpFin8A).Caption("Amperage Cage 8");
            columns.AddFor(m => m.ParGrpFin9A).Caption("Amperage Cage 9");
            columns.AddFor(m => m.ParGrpFin10A).Caption("Amperage Cage 10");
            columns.AddFor(m => m.ParGrpFin11A).Caption("Amperage Cage 11");
            columns.AddFor(m => m.ParGrpFin12A).Caption("Amperage Cage 12");
            columns.AddFor(m => m.ParGrpFin13A).Caption("Amperage Cage 13");

            columns.AddFor(m => m.ParVmcv).Caption("Vitesse moteur cisaille volante");
            columns.AddFor(m => m.ParLpb).Caption("Longeur premiere barre");
            columns.AddFor(m => m.ParLbn).Caption("Longeur barre normale");
            columns.AddFor(m => m.ParLbf).Caption("Longeur barre finale");
            columns.AddFor(m => m.ParCm).Caption("Compteur Cassette");
            columns.AddFor(m => m.ParVmce5).Caption("Vitesse moteur cisaille ebouter C5");
            columns.AddFor(m => m.ParLt).Caption("Longeur tête");
            columns.AddFor(m => m.ParLq).Caption("Longeur queue");
            columns.AddFor(m => m.ParRpm1).Caption("Role Moteur RPM 1");
            columns.AddFor(m => m.ParRmp2).Caption("Role Moteur RPM 2");
            columns.AddFor(m => m.ParRmp3).Caption("Role Moteur RPM 3");
            columns.Add()
                .Type(GridCommandColumnType.Buttons)
                .Width(110)
                .Buttons(b => {
                b.Add().Name(GridColumnButtonName.Edit);
                b.Add()
                        .Hint("Imprimer")
                        .OnClick(@<text>imprimerParametresProduction</text>)
                        .Icon("print");
                });
        })
         .DataSource(ds => ds.Mvc()
             .Controller("JourneeProduction")
             .LoadAction("GetParametres")
             .UpdateAction("PutMain")
             .Key("NumRapport")
             .LoadParams(new
             {
                 id = new JS("Parametres.id")
             }
             )
            )
            .Editing(editing =>
            {
                editing.AllowUpdating(true);
                editing.Mode(GridEditMode.Popup)
                .Popup(p => p.Title("Editer Parametres")
                .ShowTitle(true)
                .Position(pos => pos.My(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).Of(new JS("window"))));
            })

    )
}
@using (Html.DevExtreme().NamedTemplate("ResponsablesGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.JourneeProduction>()
        .ShowBorders(true)
        .LoadPanel(l => l.Enabled(false))
        .Columns(columns =>
        {
            columns.AddFor(m => m.NumRapport);
            columns.AddFor(m => m.OperateurPcp).Caption("Operateur PCp")
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("GestionPersonnelsExploitation").LoadAction("NomLookup").Key("Value"))
            .AllowClearing(true)
            .ValueExpr("Value")
            .DisplayExpr("Text")
            );
            columns.AddFor(m => m.ChefPoste).Caption("Chef de poste")
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("GestionPersonnelsExploitation").LoadAction("NomLookup").Key("Value"))
            .AllowClearing(true)
            .ValueExpr("Value")
            .DisplayExpr("Text")
            );
            columns.AddFor(m => m.IngProcess).Caption("Ingenieur de process")
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("GestionPersonnelsExploitation").LoadAction("NomLookup").Key("Value"))
            .AllowClearing(true)
            .ValueExpr("Value")
            .DisplayExpr("Text")
            );

            columns.Add()
                .Type(GridCommandColumnType.Buttons)
                .Width(110)
                .Buttons(b =>
                {
                    b.Add().Name(GridColumnButtonName.Edit);
                    b.Add().Name(GridColumnButtonName.Delete);
                });
        })
         .DataSource(ds => ds.Mvc()
             .Controller("JourneeProduction")
             .LoadAction("GetD")
             .UpdateAction("PutMain")
             .Key("NumRapport")
             .LoadParams(new
             {
                 id = new JS("Responsables.id")
             }
             )
            )
            .Editing(editing =>
            {
                editing.AllowUpdating(true);
                editing.Mode(GridEditMode.Popup)
                .Popup(p => p.Title("Editer Responsables")
                .ShowTitle(true)
                .Position(pos => pos.My(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).Of(new JS("window"))));
            })

    )
}
@using (Html.DevExtreme().NamedTemplate("ArretsGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.ArretProductionJournee>()
    .ShowBorders(true)
    .LoadPanel(l => l.Enabled(false))
    .Columns(columns =>
    {
        columns.AddFor(m => m.NumRapport);
        columns.AddFor(m => m.DateArret).Format("yyyy-MM-dd")
        .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
        columns.Add()
        .Caption("Arrets (PANNES)")
        .Alignment(HorizontalAlignment.Center)
        .Columns(a =>
        {
            a.AddFor(m => m.NumIncident);
            a.AddFor(m => m.CodeMachine).Caption("Installation")
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("JourneeProduction").LoadAction("MachineLookup").Key("Value"))
            .AllowClearing(true)
            .ValueExpr("Value")
            .DisplayExpr("Text")
            );
            a.AddFor(m => m.SubMachine)
            .Caption("Composant")
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("JourneeProduction").LoadAction("SubMachinesLookup").Key("Value"))
            .AllowClearing(true)
            .ValueExpr("Value")
            .DisplayExpr("Text")
            );
            a.AddFor(m => m.Cause);

            a.AddFor(m => m.HeureDebut).Format("HH:mm")
            .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month))
            .DataType(GridColumnDataType.DateTime);
            a.AddFor(m => m.HeureFin).DataType(GridColumnDataType.DateTime).Format("HH:mm")
            .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month)); ;
            a.AddFor(m => m.EnumArret).Caption("Code Arret")
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("JourneeProduction").LoadAction("EnumArretLookup").Key("Value"))
            .AllowClearing(true)
            .ValueExpr("Value")
            .DisplayExpr("Text")
            );
        });
        columns.AddFor(m => m.NbrBilleteDefournees).Caption("Deforunees");
        columns.AddFor(m => m.NbrBilleteRejetees).Caption("Rejetees");
        columns.AddFor(m => m.NbrBilleteCisalleTrio).Caption("Ciaille Trio");
        columns.AddFor(m => m.NbrBilleteCisalleFinisseuse).Caption("Cisaille Finisseuses");
        columns.AddFor(m => m.NbrBilleteRealisees).Caption("Realissees");
        columns.Add()
                .Type(GridCommandColumnType.Buttons)
                .Width(110)
                .Buttons(b =>
                {
                    b.Add().Name(GridColumnButtonName.Edit);
                    b.Add().Name(GridColumnButtonName.Delete);
                });
    })
         .DataSource(ds => ds.Mvc()
             .Controller("ArretProductionJournees")
             .LoadAction("Get")
             .InsertAction("Post")
             .UpdateAction("Put")
             .DeleteAction("Delete")
             .Key("Id")
             .LoadParams(new
             {
                 id = new JS("Arrets.id")
             }
             )
            )
            .Editing(editing =>
            {
                editing.AllowUpdating(true);
                editing.AllowDeleting(true);
                editing.AllowAdding(true);
                editing.Mode(GridEditMode.Popup)
                .Popup(p => p.Title("Editer Arret")
                .ShowTitle(true)
                .Position(pos => pos.My(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).Of(new JS("window"))));
            })

    )
}
@using (Html.DevExtreme().NamedTemplate("CadencesGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.CadenceProductionJournee>()
        .ShowBorders(true)
        .LoadPanel(l => l.Enabled(false))
        .Columns(columns =>
        {
            columns.AddFor(m => m.NumRapport);
            columns.AddFor(m => m.H1);
            columns.AddFor(m => m.H2);
            columns.AddFor(m => m.H3);
            columns.AddFor(m => m.H4);
            columns.AddFor(m => m.H5);
            columns.AddFor(m => m.H6);
            columns.AddFor(m => m.H7);
            columns.AddFor(m => m.H8);
            columns.AddFor(m => m.H9);
            columns.AddFor(m => m.H10);
            columns.AddFor(m => m.H11);
            columns.AddFor(m => m.H12);

            columns.Add()
                .Type(GridCommandColumnType.Buttons)
                .Width(110)
                .Buttons(b =>
                {
                    b.Add().Name(GridColumnButtonName.Edit);
                    b.Add().Name(GridColumnButtonName.Delete);
                });
        })
        .Editing(editing =>
        {
            editing.AllowUpdating(true);
            editing.AllowDeleting(true);
            editing.AllowAdding(true);
            editing.Mode(GridEditMode.Popup)
            .Popup(p => p.Title("Editer Cadences")
            .ShowTitle(true)
            .Position(pos => pos.My(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).Of(new JS("window"))));
        })
         .DataSource(ds => ds.Mvc()
             .Controller("CadenceProductionJournees")
             .LoadAction("Get")
             .InsertAction("Post")
             .UpdateAction("Put")
             .DeleteAction("Delete")
             .Key("Id")
             .LoadParams(new
             {
                 id = new JS("Cadences.id")
             }
             )
            )

    )
}
@using (Html.DevExtreme().NamedTemplate("CalibresGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.ProdPreparationCalibre>()
        .ShowBorders(true)
        .LoadPanel(l => l.Enabled(false))
        .Columns(columns =>
        {
            columns.AddFor(m => m.NumRapport);
            columns.AddFor(m => m.CodeMachine).Caption("Installation")
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("JourneeProduction").LoadAction("MachineLookup").Key("Value"))
            .AllowClearing(true)
            .ValueExpr("Value")
            .DisplayExpr("Text")
            );
            columns.AddFor(m => m.NumCalibre);


            columns.Add()
                .Type(GridCommandColumnType.Buttons)
                .Width(110)
                .Buttons(b =>
                {
                    b.Add().Name(GridColumnButtonName.Edit);
                    b.Add().Name(GridColumnButtonName.Delete);
                });
        })
        .Editing(editing =>
        {
            editing.AllowUpdating(true);
            editing.AllowDeleting(true);
            editing.AllowAdding(true);
            editing.Mode(GridEditMode.Popup)
            .Popup(p => p.Title("Editer Calibre")
            .ShowTitle(true)
            .Position(pos => pos.My(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).Of(new JS("window"))));
        })
         .DataSource(ds => ds.Mvc()
             .Controller("JourneeProduction")
             .LoadAction("GetCalibres")
             .InsertAction("PostCalibres")
             .UpdateAction("PutCalibres")
             .DeleteAction("DeleteCalibres")
             .Key("Id")
             .LoadParams(new
             {
                 id = new JS("Calibres.id")
             }
             )
            )

    )
}
@using (Html.DevExtreme().NamedTemplate("CylindresGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.ProdPreparationCylindre>()
        .ShowBorders(true)
        .LoadPanel(l => l.Enabled(false))
        .Columns(columns =>
        {
            columns.AddFor(m => m.NumRapport);
            columns.AddFor(m => m.CodeMachine).Caption("Installation")
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("JourneeProduction").LoadAction("MachineLookup").Key("Value"))
            .AllowClearing(true)
            .ValueExpr("Value")
            .DisplayExpr("Text")
            );
            columns.AddFor(m => m.RefAncienCylindre)
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("CylindresPreprocess").LoadAction("CylindresLookup").Key("Value"))
            .AllowClearing(true)
            .ValueExpr("Value")
            .DisplayExpr("Text")
            );
            columns.AddFor(m => m.AncienDiametre);
            columns.AddFor(m => m.RefNouveauCylindre)
            .Lookup(lookup => lookup
            .DataSource(ds => ds.WebApi().Controller("CylindresPreprocess").LoadAction("CylindresLookup").Key("Value"))
            .AllowClearing(true)
            .ValueExpr("Value")
            .DisplayExpr("Text")
            );
            columns.AddFor(m => m.NouveauDiametre);
            columns.Add()
                .Type(GridCommandColumnType.Buttons)
                .Width(110)
                .Buttons(b =>
                {
                    b.Add().Name(GridColumnButtonName.Edit);
                    b.Add().Name(GridColumnButtonName.Delete);
                });
        })
        .Editing(editing =>
        {
            editing.AllowUpdating(true);
            editing.AllowDeleting(true);
            editing.AllowAdding(true);
            editing.Mode(GridEditMode.Popup)
            .Popup(p => p.Title("Editer Calibre")
            .ShowTitle(true)
            .Position(pos => pos.My(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).Of(new JS("window"))));
        })
         .DataSource(ds => ds.Mvc()
             .Controller("JourneeProduction")
             .LoadAction("GetCylindres")
             .InsertAction("PostCylindres")
             .UpdateAction("PutCylindres")
             .DeleteAction("DeleteCylindres")
             .Key("Id")
             .LoadParams(new
             {
                 id = new JS("Cylindres.id"),
                 dateJournee = new JS("Cylindres.dateJournee")
             }
             )
            )

    )
}
@using (Html.DevExtreme().NamedTemplate("CylindresAnomaliesDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Anomalies")
                .Template(new TemplateName("CylindresAnomalies"))
                .Option("CylindresAnomalies", new { id = new JS("data.Id") });
        })
        )
}

<script>

        function refreshButton_click() {
         DevExpress.ui.notify("Rafraichissement en cours!");
            var demandesTravailGrid = $("#JourneeProdGrid").dxDataGrid("instance");
         var demandesTravailDS = demandesTravailGrid.getDataSource();
         demandesTravailGrid.beginCustomLoading("Chargement en cours...");
         demandesTravailDS.reload();
         demandesTravailGrid.refresh();
         demandesTravailGrid.endCustomLoading();
        }

        function addButton_click() {
            DevExpress.ui.notify("Ajouter une demande!");
            window.location.href = '@Url.Action("NewReception")';
        }

        function dateDebutBox_value() {
            var dateDebutBox = $("#FilterDateDebut").dxDateBox("instance");
            console.log(dateDebutBox.option('value'));
            return new Date(dateDebutBox.option('value')).toJSON();
        }

        function dateFinBox_value() {
            var dateFinBox = $("#FilterDateFin").dxDateBox("instance");
            console.log(dateFinBox.option('value'));
            return new Date(dateFinBox.option('value')).toJSON();
        }

    function receptionCell_prepared(e) {
        console.log(e.data)
        var donees = e.data;


        if (e.rowType.data === "En Cours") {
            e.cellElement.css('backgroundColor', '#52cafa');
        }
        if (e.rowType === "data" && e.column.command === "edit")
        {
            var isEditing = e.row.isEditing, $links = e.cellElement.find(".dx-link");
            $links.text("");
            if (isEditing) {
                $links.filter(".dx-link-save").addClass("dx-icon-save");
                $links.filter(".dx-link-cancel").addClass("dx-icon-revert");
            } else {
                $links.filter(".dx-link-edit").addClass("dx-icon-edit");
                $links.filter(".dx-link-delete").addClass("dx-icon-trash");
            }
        }
    }


    var imprimerRapportJournalierProduction = function (e) {
        var num = e.row.data.NumRapport;
        window.open(' @Url.Action("imprimerRapportJournalierProductionViewer", "ExploitationManager")?NumRapport='+num, '_blank').focus();
    }
    var imprimerParametresProduction = function (e) {
        var num = e.row.data.NumRapport;
        window.open(' @Url.Action("ParametresProductionViewer", "ExploitationManager")?NumRapport='+num, '_blank').focus();
    }
</script>