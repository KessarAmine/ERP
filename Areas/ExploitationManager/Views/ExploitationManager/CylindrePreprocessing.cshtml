@using DevKbfSteel.Models
@using DevExpress.XtraReports.UI;
@using DevKbfSteel.Controllers
@using DevExpress.XtraReports.Parameters;
@using DevKbfSteel.Reports
@using DevExpress.AspNetCore
@using DevExtreme.AspNet.Mvc
@using DevKbfSteel.Helpers;
@{
    ViewData["Title"] = "Exploitation-Preprocessing Cylindres";
    Layout = "~/Views/Shared/_LayoutExploitationManager.cshtml";
}
@(Html.DevExtreme().Toolbar()
    .Items(items =>
    {
        items.Add()
           .Widget(w => w
           .Button()
           .Icon("refresh")
           .OnClick("refreshButton_click")
       )
       .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
       .Location(ToolbarItemLocation.Before);

        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("yyyy-MM-dd").ID("FilterDateDebut"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);

        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("yyyy-MM-dd").ID("FilterDateFin"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);

    })
)
@(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.ProdPreProccessingCylindresUsinage>()
 .DataSource(ds => ds.Mvc()
     .Controller("CylindresPreprocess")
     .LoadAction("GetPreProcessing")
     .UpdateAction("PutPreProcessing")
     .Key("Id")
     .LoadParams(new { dateDebut = new JS("dateDebutBox_value"), dateFin = new JS("dateFinBox_value")}))
    .OnRowExpanding(@<text>
        function(e) {
        	e.component.collapseAll(-1);
        }
    </text>)
     .ColumnChooser(cc => cc.Enabled(true).AllowSearch(true))
     .Scrolling(scrolling => scrolling
     .ScrollByContent(true)
     .ShowScrollbar(ShowScrollbarMode.Always)
     .Mode(GridScrollingMode.Virtual))
     .Height("95%")
     .RemoteOperations(true)
     .ID("demandesTravailGrid")
     .NoDataText("Aucune donnée à afficher")
     .CacheEnabled(true)
     .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
 .Columns(columns => {
     columns.AddFor(m => m.DateChangement)
     .Format("yyyy-MM-dd")
     .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
     columns.AddFor(m => m.RefCylindre).Caption("Cylindre")
     .Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("CylindresPreprocess").LoadAction("CylindresLookup").Key("Value"))
    .AllowClearing(true)
    .ValueExpr("Value")
    .DisplayExpr("Text")
    );
     columns.AddFor(m => m.DiametreAtteint).Caption("⌀Entrée");
     columns.AddFor(m => m.DateEntreeUsinage)
     .Format("yyyy-MM-dd")
     .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
     columns.AddFor(m => m.DateSortieUsinage)
     .Format("yyyy-MM-dd")
     .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
     columns.AddFor(m => m.DiametreSortieCylindre).Caption("⌀Sortie");

     columns.AddFor(m => m.EtatPreProcessing).Caption("Etat")
     .Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("DemandeTravails").LoadAction("StatutLookup").Key("Value"))
    .AllowClearing(true)
    .ValueExpr("Value")
    .DisplayExpr("Text")
    );
 columns.Add()
        .Type(GridCommandColumnType.Buttons)
        .Width(50)
        .Buttons(b => {
        b.Add().Name(GridColumnButtonName.Edit);
        });
 })
   .Editing(editing =>
   {
       editing.AllowUpdating(false);
       editing.AllowDeleting(false);
       editing.AllowAdding(false);
       editing.Mode(GridEditMode.Form);
   })
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple))
)

<script>

    function gridBoxIdEmployee_valueChanged(e) {
        var $dataGrid = $("#embedded-datagridMultipleIdEmployee");
        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(e.value, false);
        }
    }

    function gridBox_valueChanged(args, setValueMethod) {
        var $dataGrid = $("#embedded-datagridMultipleIdEmployee");

        if ($dataGrid.length) {
            var dataGrid = $dataGrid.dxDataGrid("instance");
            dataGrid.selectRows(args.value, false);
        }
        setValueMethod(args.value);
    }
    function onSelectionChanged(e, dropDownBoxInstance) {
        var keys = e.selectedRowKeys;
        dropDownBoxInstance.option("value", keys);
        console.log(dropDownBoxInstance);
    }

    function refreshButton_click() {
        DevExpress.ui.notify("Rafraichissement en cours!");
        var demandesTravailGrid = $("#demandesTravailGrid").dxDataGrid("instance");
        var demandesTravailDS = demandesTravailGrid.getDataSource();
        demandesTravailGrid.beginCustomLoading("Chargement en cours...");
        demandesTravailDS.reload();
        demandesTravailGrid.refresh();
        demandesTravailGrid.endCustomLoading();
    }

    function addButton_click() {
        DevExpress.ui.notify("Ajouter une demande!");
        window.location.href = '@Url.Action("NewReception")';
    }

    function dateDebutBox_value() {
        var dateDebutBox = $("#FilterDateDebut").dxDateBox("instance");
        console.log(dateDebutBox.option('value'));
        return new Date(dateDebutBox.option('value')).toJSON();
    }

    function dateFinBox_value() {
        var dateFinBox = $("#FilterDateFin").dxDateBox("instance");
        console.log(dateFinBox.option('value'));
        return new Date(dateFinBox.option('value')).toJSON();
    }

    function receptionCell_prepared(e) {
        if (e.rowType === "data" && e.column.command === "edit") {
            var isEditing = e.row.isEditing, $links = e.cellElement.find(".dx-link");
            $links.text("");
            if (isEditing) {
                $links.filter(".dx-link-save").addClass("dx-icon-save");
                $links.filter(".dx-link-cancel").addClass("dx-icon-revert");
            } else {
                $links.filter(".dx-link-edit").addClass("dx-icon-edit");
                $links.filter(".dx-link-delete").addClass("dx-icon-trash");
            }
        }
        if (e.rowType === "data") {
            var dangerColor = "#f54542";
            if (e.column.dataField == "DateFinAmbouche") {
                var Today = new Date();
                var DateFin = new Date();
                DateFin = e.value;
                var limit = @XpertHelper.FacteurContratEnding;
                Today.setHours(0, 0, 0, 0)
                DateFin.setHours(0, 0, 0, 0)
                var diffInMs = Math.abs(DateFin - Today);
                diffInMs = diffInMs / (1000 * 60 * 60 * 24);

                if (diffInMs <= limit) {
                    $(e.cellElement).get(0).style.backgroundColor = dangerColor;
                }
            }
        }
    }
</script>