@using DevKbfSteel.Models
@using DevExpress.XtraReports.UI;
@using DevKbfSteel.Controllers
@using DevExpress.XtraReports.Parameters;
@using DevKbfSteel.Reports
@using DevExpress.AspNetCore
@using DevExtreme.AspNet.Mvc
@using DevKbfSteel.Helpers;

@{
    ViewData["Title"] = "Exploitation-Demandes Travail Envoyées";
    Layout = "~/Views/Shared/_LayoutExploitationManager.cshtml";
}
@(Html.DevExtreme().Toolbar()
    .Items(items =>
    {
        items.Add()
           .Widget(w => w
           .Button()
           .Icon("refresh")
           .OnClick("refreshButton_click")
       )
       .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
       .Location(ToolbarItemLocation.Before);

        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("yyyy-MM-dd").ID("FilterDateDebut"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);

        items.Add()
            .Widget(w => w.DateBox().Type(DateBoxType.Date).ApplyButtonText("Appliquer").Value(DateTime.Now.Date).DisplayFormat("yyyy-MM-dd").ID("FilterDateFin"))
            .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            .Location(ToolbarItemLocation.Before);

    })
)
@(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.DemandeTravail>()
    .DataSource(ds => ds.Mvc()
    .Controller("DemandeTravails")
    .LoadAction("GetSent")
    .InsertAction("PostExploitation")
    .UpdateAction("Put")
    .DeleteAction("Delete")
    .Key("NumDt")
    .LoadParams(new { dateDebut = new JS("dateDebutBox_value"), dateFin = new JS("dateFinBox_value"), CodeDemandeur = XpertHelper.CodeExploitation  })
    )
    .OnRowExpanding(@<text>
        function(e) {
        	e.component.collapseAll(-1);
        }
    </text>)
    .Scrolling(scrolling => scrolling
    .ScrollByContent(true)
    .ShowScrollbar(ShowScrollbarMode.Always)
    .Mode(GridScrollingMode.Virtual))
    .Height("95%")
    .RemoteOperations(true)
    .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual))
    .ID("demandesTravailGrid")
    .NoDataText("Aucune donnée à afficher")
    .CacheEnabled(true)
    .SearchPanel(sp => sp.Placeholder("Rechercher").Visible(true))
    .Columns(columns => {

    columns.AddFor(m => m.DateDt)
    .DataType(GridColumnDataType.DateTime)
    .Width("10%")
    .Format("yyyy-MM-dd HH:mm")
    .HeaderFilter(headerfilter => headerfilter.GroupInterval(HeaderFilterGroupInterval.Month));
    columns.AddFor(m => m.DemandeurOpt).Caption("Demandeur")
    .Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("DemandeTravails").LoadAction("DerigantsLookup").Key("Value"))
    .AllowClearing(true)
    .ValueExpr("Value")
    .DisplayExpr("Text")
    );
    columns.AddFor(m => m.TravailDemandee);
    columns.AddFor(m => m.Note);
    columns.AddFor(m => m.Journee);
    columns.AddFor(m => m.Semaine);
    columns.AddFor(m => m.RefMachine).Caption("Installation")
    .Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("DemandeTravails").LoadAction("MachinesLookup").Key("Value"))
    .AllowClearing(true)
    .ValueExpr("Value")
    .DisplayExpr("Text")
    );
        columns.AddFor(m => m.CodeArret).Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("DemandeTravails").LoadAction("ArreteProductionLookup").Key("Value"))
    .ValueExpr("Value")
    .DisplayExpr("Text")
    .AllowClearing(true)
    );


        columns.AddFor(m => m.CodeReceveur).Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("DemandeTravails").LoadAction("StructureLookup").Key("Value"))
    .ValueExpr("Value")
    .DisplayExpr("Text")
    .AllowClearing(true)
    );


        columns.AddFor(m => m.CodeUrgence).Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("DemandeTravails").LoadAction("UrgenceTravailleLookup").Key("Value"))
    .ValueExpr("Value")
    .DisplayExpr("Text")
    .AllowClearing(true)

    );
        columns.Add()
    .Type(GridCommandColumnType.Buttons)
    .Width(110)
    .Buttons(b => {
    b.Add().Name(GridColumnButtonName.Edit);
    b.Add().Name(GridColumnButtonName.Delete);
    b.Add()
        .Hint("Imprimer")
        .OnClick(@<text>imprimerDemandeTravail</text>)
                   .Icon("print");
           });

   })
   .Editing(editing =>
   {
       editing.AllowUpdating(true);
       editing.AllowDeleting(true);
       editing.AllowAdding(true);
       editing.Mode(GridEditMode.Popup)
        .Popup(p => p.Title("Editer Demande")
        .ShowTitle(true)
        .Position(pos => pos.My(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).At(HorizontalAlignment.Center, VerticalAlignment.Top).Of(new JS("window"))));
   })
                       .MasterDetail(md => md
        .Enabled(true)
        .Template(new TemplateName("RapportInterventionDetails"))
    )
   .Export(e => e.Enabled(true).AllowExportSelectedData(true))
   .FilterRow(f => f.Visible(true))
   .HeaderFilter(headerfilter => headerfilter.Visible(true))
   .GroupPanel(p => p.Visible(true))
   .AllowColumnReordering(true)
   .AllowColumnResizing(true)
   .OnCellPrepared("receptionCell_prepared")
   .Selection(s => s.Mode(SelectionMode.Multiple)
)
)
@using (Html.DevExtreme().NamedTemplate("RapportInterventionDetails"))
{
    @(Html.DevExtreme().TabPanel()
        .Items(items =>
        {
            items.Add()
                .Title("Rapport Intervention")
                .Template(new TemplateName("RapportInterventionGrid"))
                .Option("masterGridData", new { id = new JS("data.NumDt") });
        })
        )
}
@using (Html.DevExtreme().NamedTemplate("RapportInterventionGrid"))
{
    @(Html.DevExtreme().DataGrid<DevKbfSteel.Entities.RapportIntervention>()
        .ShowBorders(true)
        .LoadPanel(l => l.Enabled(true))
        .Columns(columns =>
        {
            columns.AddFor(m => m.NumIntervention);
            columns.AddFor(m => m.NumOt);
            columns.AddFor(m => m.DateIntervention).Format("yyyy-MM-dd");
            columns.AddFor(m => m.DebutIntervention).Format("yyyy-MM-dd HH:mm");
            columns.AddFor(m => m.DureeIntervention);
            columns.AddFor(m => m.CompteRendu);
            columns.AddFor(m => m.Observation);
        })
         .DataSource(ds => ds.Mvc()
             .Controller("RapportInterventionsMethode")
             .LoadAction("GetDtRapport")
             .Key("NumIntervention")
             .LoadParams(new
             {
                 id = new JS("masterGridData.id")
             }
             )
            )

    )
}
<script>

        function refreshButton_click() {
         DevExpress.ui.notify("Rafraichissement en cours!");
         var demandesTravailGrid = $("#demandesTravailGrid").dxDataGrid("instance");
         var demandesTravailDS = demandesTravailGrid.getDataSource();
         demandesTravailGrid.beginCustomLoading("Chargement en cours...");
         demandesTravailDS.reload();
         demandesTravailGrid.refresh();
         demandesTravailGrid.endCustomLoading();
        }

        function addButton_click() {
            DevExpress.ui.notify("Ajouter une demande!");
            window.location.href = '@Url.Action("NewReception")';
        }

        function dateDebutBox_value() {
            var dateDebutBox = $("#FilterDateDebut").dxDateBox("instance");
            console.log(dateDebutBox.option('value'));
            return new Date(dateDebutBox.option('value')).toJSON();
        }

        function dateFinBox_value() {
            var dateFinBox = $("#FilterDateFin").dxDateBox("instance");
            console.log(dateFinBox.option('value'));
            return new Date(dateFinBox.option('value')).toJSON();
        }

    function receptionCell_prepared(e) {
        console.log(e.rowType.data)

            if (e.rowType === "data" && e.column.command === "edit") {
                var isEditing = e.row.isEditing, $links = e.cellElement.find(".dx-link");
                $links.text("");
                if (isEditing) {
                    $links.filter(".dx-link-save").addClass("dx-icon-save");
                    $links.filter(".dx-link-cancel").addClass("dx-icon-revert");
                } else {
                    $links.filter(".dx-link-edit").addClass("dx-icon-edit");
                    $links.filter(".dx-link-delete").addClass("dx-icon-trash");
                }
            }
        }

        var imprimerDemandeTravail = function (e) {
            var num = e.row.data.NumDt;
            window.open(' @Url.Action("DemandeTravailViewer", "ExploitationManager")?id=' + num, '_blank').focus();
        }

</script>